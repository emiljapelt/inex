1. Look at syntax error handling, https://gallium.inria.fr/~fpottier/menhir/manual.html#sec69
4. Setup some automated testing
7. Fix assembly compiler
8. Implement escape characters in string literals
9. Develope syntax highlighting for vscode, https://github.com/microsoft/vscode-textmate/tree/main/test-cases/themes/syntaxes
10. Implement routine signature compatability check
11. Implement routine name overloading
12. Fix machine/compiler interaction 
    - currently failes if the source file is not in 'cwd'
13. Implement anonymous routines
    - syntax: (i: int) { i *:= 2; }
    - example: array#each("Hi there", (c: char){ print c; });
    - example: square ::= (i: int, o: int) { o := i*i; };
    - example: square :(int,int):= (i, o) { o := i*i; };
    - At compile-time these should "just" be translated to internal routines, with an unreachable name.
    - Could principally replace internal routines, which would allow removing the keywords 'internal' and 'external'
    - Would make the language even more side-effecty, as routines could now be overwritten, if they are not 'const'/'stable'.
