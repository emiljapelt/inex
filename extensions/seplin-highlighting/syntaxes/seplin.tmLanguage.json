{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "seplin",
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#topdecs" }
	],
	"repository": {
		"topdecs": {
			"patterns": [{
				"begin": "reference",
				"end": ";",
				"name": "keyword",
				"match": "\\b(reference|as)\\b"
			},{
				"name": "keyword",
				"match": "\\b(entry|internal|external)\\b"
			},{
				"begin": "struct",
				"end": ";",
				"name": "keyword",
				"match": "\\b(struct)\\b",
				"patterns": [{
					"begin": "<",
					"end": ">",
					"match": "\\b([A-Z](,[A-Z])*)\\b",
					"name": "support.type"
				},{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [{
						"include": "#params"
					}]
				}]
			},{
				"include": "#block"
			}]
		},
		"block": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [{
				"include": "#block_inner"
			}]
		},
		"block_inner": {
			"patterns": [{
				"include": "#block"
			},{
				"include": "#control_keywords"
			},{
				"include": "#assignment"
			},{
				"begin": "print",
				"end": ";",
				"name": "keyword",
				"match": "\\b(print)\\b",
				"patterns": [{"include": "#expression"}]
			}]
		},
		"assignment": {
			"begin": "[A-Za-z][A-Za-z0-9_]* *:=",
			"end": ";",
			"patterns": [{"include": "#expression"}]
		},
		"args": {
			"patterns": [{
				"begin": "\\(",
				"end": "\\)",
				"patterns": [{
					"include": "#expression"
				}]
			}]
		},
		"expression": {
			"patterns": [{
				"include": "#strings"
			},{
				"name": "constant.numeric",
				"match": "\\b(-?[0-9]+)\\b"
			},{
				"name": "constant.language",
				"match": "\\b(true|false|null)\\b"
			},{
				"name": "constant.character",
				"match": "\\b('\\?.')\\b"
			},{
				"include": "#struct_literal"
			},{
				"include": "#array_literal"
			}]
		},
		"struct_literal": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [{
				"include": "#expression"
			}]
		},
		"array_literal": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [{
				"include": "#expression"
			}]
		},
		"params": {
			"patterns": [{
				"begin": "\\(",
				"end": "\\)",
				"patterns": [{
					"begin": ":",
					"end": ",|\\)",
					"include": "#types"
				},{
					"name": "constant.language",
					"match": "\\b([A-Za-z0-9]+:)\\b"
				}]
			}]
		},
		"type_args": {
			"patterns": [{
				"begin": "<",
				"end": ">",
				"patterns": [{
					"include": "#types"
				}]
			}]
		},
		"types": {
			"patterns": [{
				"name": "support.type",
				"match": "\\b([A-Z]|int|char|bool|_)\\b"
			},{
				"name": "keyword",
				"match": "\\b(const|stable)\\b"
			},{
				"name": "support.type",
				"match": "\\b(\\[\\])\\b"
			},{
				"name": "support.type",
				"match": "[A-Za-z][A-Za-z0-9_]*"
			},{
				"begin": "\\(",
				"end": "\\)",
				"patterns": [{"include": "#types"}]
			},{
				"include": "#type_args"
			}, {
				"include": "#routine_type"
			}]
		},
		"routine_type": {
			"begin": "\\(",
			"end": "\\)",
			"patterns": [{
				"include": "#types"
			}]
		},
		"control_keywords": {
			"patterns": [{
				"name": "keyword.control.seplin",
				"match": "\\b(if|while|repeat|for|stop|halt|until|repeat|else)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.seplin",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.seplin",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"name": "comment.line",
			"begin": "//",
			"end": "\\n"
		}
	},
	"scopeName": "source.sep"
}