
struct tuple<T,U>(fst: T, snd: U);
struct list<T>(head: T, tail: list<T>);

external test1() {
    
    l1 :list<int>:= {16, {32, null}};

    print_all(l1);
    
    a2 ::= [4,5,6,7];
    l2: list<int>;
    from_array(a2,l2);
    print_all(l2);

}

internal from_array(data: int[], out: list<int>) {
    out := null;
    for(i::=0; i<|data|; i+:=1) out := {data[i], out};
}

internal print_all(l: list<int>) {

    holder ::= $l;

    while(holder != null) {
        pretty_print(holder.head);
        holder := holder.tail;
    }

}

internal pretty_print(x: locked int) {
    print x, '\n';
}

external meme() {

    x ::= 1;
    y ::= 2;

    print x,y,'\n';

    swap(x,y);

    print x,y,'\n';
}

internal swap<T>(a: T, b: T) {

    temp :tuple<T,T>:= {a, null};
    a := b;
    b := temp.fst;

}