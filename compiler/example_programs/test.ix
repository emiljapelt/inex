locked int funny := 69;

external main() {

    int r;
    addmul2(10,5,r);
    print r;

    fbrea(10, 5);
    print 0;
    fcont(10, 5);
    print 0;
    wbrea(10, 5);
    print 0;
    wcont(10, 5);
    print 0;
    ubrea(10, 5);
    print 0;
    ucont(10, 5);
}

external calls(int amount) {
    until (amount < 0) decrement(amount);
}

internal decrement(int a).subtractFrom(a, 1)

internal subtractFrom(int a, locked int b) {
    a -:= b;
}


internal fbrea(locked int ls, locked int b) {
    for(int i := 0; i < ls; i := i+1) {
        if (i = b) break;
        print funny+i;
    }
}

internal fcont(locked int ls, locked int c) {
    for(int i := 0; i < ls; i := i+1) {
        if (i = c) continue;
        print funny+i;
    }
}

external test2() {
    test(4,1);
}

external test(locked int ls, locked int when) {
    var i := 0;
    print ls;
    print when;
    while( i < ls ) {
        var x := 1;
        i := i + x;
        if (i = when) break;
        print i;
    }
}

internal wbrea(locked int ls, locked int b) {
    var i := 0;
    while(i < ls) {
        i := i + 1;
        if (i = b) break;
        print funny+i;
    }
}

internal wcont(locked int ls, locked int c) {
    var i := 0;
    while(i < ls) {
        i := i + 1;
        if (i = c) continue;
        print funny+i;
    }
}


internal ubrea(locked int ls, locked int b) {
    var i := 0;
    until(i = ls) {
        i := i + 1;
        if (i = b) break;
        print funny+i;
    }
}

internal ucont(locked int ls, locked int c) {
    var i := 0;
    until(i = ls) {
        i := i + 1;
        if (i = c) continue;
        print funny+i;
    }
}


external fib(int c) {
    int res;
    'fib(res, 1, c);
    print res;
}

internal 'fib(int a, int b, int c) {
    if (c <= 0) stop;
    var temp := a;
    a := b;
    b := temp + b;
    'fib(a, b, c-1);
}



internal add(locked int x, locked int y, int r) {
    r := x + y;
}

internal mul(locked int x, locked int y, int r) {
    r := x * y;
}

internal addmul2(locked int x, locked int y, int r)
    .add(x,y,r)
    .mul(r,2,r)