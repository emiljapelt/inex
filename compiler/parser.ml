type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | VAR
  | NULL
  | NEW
  | PRINT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions
# 58 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  261 (* INTERNAL *);
  262 (* EXTERNAL *);
  264 (* ASSIGNMENT *);
  265 (* LPAR *);
  266 (* RPAR *);
  267 (* LBRACE *);
  268 (* RBRACE *);
  269 (* LBRAKE *);
  270 (* RBRAKE *);
  271 (* STOP *);
  272 (* HALT *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* GT *);
  280 (* LTEQ *);
  281 (* GTEQ *);
  282 (* LOGIC_AND *);
  283 (* LOGIC_OR *);
  284 (* PIPE *);
  285 (* NOT *);
  286 (* VALUE *);
  287 (* COMMA *);
  288 (* DOT *);
  289 (* SEMI *);
  290 (* COLON *);
    0 (* EOF *);
  291 (* IF *);
  292 (* ELSE *);
  293 (* WHILE *);
  294 (* UNTIL *);
  295 (* FOR *);
  296 (* BREAK *);
  297 (* CONTINUE *);
  298 (* LOCKED *);
  299 (* STRUCT *);
  300 (* VAR *);
  301 (* NULL *);
  302 (* NEW *);
  303 (* PRINT *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  263 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\008\000\008\000\008\000\008\000\006\000\007\000\007\000\
\011\000\011\000\011\000\012\000\012\000\012\000\012\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\010\000\010\000\015\000\
\015\000\009\000\009\000\016\000\016\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\005\000\005\000\018\000\018\000\
\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\006\000\006\000\006\000\
\006\000\001\000\001\000\003\000\001\000\003\000\005\000\006\000\
\001\000\001\000\003\000\001\000\003\000\004\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\002\000\
\005\000\005\000\003\000\004\000\004\000\004\000\004\000\004\000\
\001\000\001\000\001\000\001\000\002\000\000\000\001\000\001\000\
\003\000\000\000\002\000\001\000\001\000\004\000\005\000\006\000\
\007\000\006\000\007\000\005\000\006\000\002\000\001\000\007\000\
\005\000\005\000\005\000\008\000\000\000\001\000\001\000\003\000\
\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\083\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\001\000\003\000\
\000\000\000\000\010\000\011\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\025\000\
\024\000\020\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\005\000\007\000\080\000\006\000\008\000\019\000\039\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\021\000\069\000\
\000\000\000\000\066\000\064\000\009\000\000\000\000\000\049\000\
\050\000\000\000\000\000\000\000\000\000\051\000\052\000\000\000\
\061\000\071\000\000\000\000\000\000\000\000\000\060\000\000\000\
\000\000\000\000\055\000\000\000\022\000\067\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\070\000\059\000\000\000\042\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\074\000\075\000\000\000\016\000\000\000\000\000\072\000\
\000\000\076\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\028\000\130\000\091\000\025\000\
\131\000\137\000\138\000\043\000\044\000\133\000\139\000\134\000\
\135\000\029\000\030\000"

let yysindex = "\024\000\
\014\255\000\000\039\255\047\255\056\255\096\255\000\000\112\000\
\014\255\000\000\105\255\119\255\008\255\122\255\000\000\000\000\
\127\255\127\255\000\000\000\000\000\000\080\255\035\255\129\255\
\015\255\127\255\101\255\135\255\000\000\117\255\147\255\000\000\
\000\000\000\000\080\255\080\255\010\255\080\255\010\255\000\000\
\125\255\006\001\248\254\000\000\080\255\144\255\069\255\080\255\
\080\255\146\255\000\000\151\255\007\255\042\255\127\255\042\255\
\197\000\021\255\072\255\000\000\248\254\154\255\156\255\080\255\
\080\255\080\255\080\255\080\255\080\255\080\255\080\255\080\255\
\080\255\080\255\000\000\080\255\163\255\023\001\080\255\080\255\
\000\000\040\001\057\001\000\000\138\255\142\255\160\255\161\255\
\167\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\080\255\077\255\021\255\021\255\000\000\176\001\176\001\014\000\
\014\000\014\000\014\000\000\000\021\255\140\001\000\000\000\000\
\074\001\091\001\000\000\000\000\000\000\160\255\251\254\000\000\
\000\000\166\255\170\255\177\255\182\255\000\000\000\000\080\255\
\000\000\000\000\175\255\213\255\159\255\161\255\000\000\196\255\
\187\255\125\001\000\000\154\001\000\000\000\000\000\000\080\255\
\080\255\080\255\080\255\200\255\165\001\000\000\080\255\201\255\
\202\255\204\255\206\255\000\000\000\000\080\255\000\000\080\255\
\000\000\210\255\215\000\233\000\251\000\080\255\165\001\080\255\
\080\255\080\255\080\255\212\255\000\000\000\000\178\255\178\255\
\178\255\108\001\165\001\165\001\165\001\165\001\179\255\215\255\
\191\255\000\000\000\000\188\255\000\000\178\255\224\255\000\000\
\178\255\000\000"

let yyrindex = "\000\000\
\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\228\255\228\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\228\255\000\000\000\000\000\000\229\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\028\000\230\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\252\254\238\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\135\255\000\000\064\000\082\000\000\000\226\255\180\000\116\000\
\132\000\148\000\164\000\000\000\100\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\255\236\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\238\255\000\000\000\000\
\000\000\147\255\000\000\000\000\000\000\000\000\000\000\135\255\
\000\000\000\000\000\000\000\000\253\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\135\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\255\078\255\082\255\083\255\001\000\236\255\
\143\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\232\000\000\000\181\255\095\000\045\000\203\255\241\255\
\114\000\134\255\252\255\219\255\000\000\063\000\092\000\000\000\
\199\255\201\000\000\000"

let yytablesize = 715
let yytable = "\059\000\
\015\000\061\000\094\000\144\000\076\000\082\000\053\000\047\000\
\019\000\019\000\020\000\020\000\129\000\021\000\021\000\022\000\
\034\000\042\000\003\000\004\000\005\000\162\000\049\000\077\000\
\001\000\063\000\082\000\050\000\013\000\053\000\057\000\058\000\
\043\000\060\000\044\000\172\000\019\000\087\000\020\000\066\000\
\078\000\021\000\045\000\082\000\083\000\011\000\073\000\051\000\
\086\000\023\000\132\000\024\000\088\000\012\000\040\000\043\000\
\006\000\044\000\129\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\118\000\110\000\
\166\000\089\000\113\000\114\000\080\000\032\000\046\000\033\000\
\032\000\050\000\033\000\034\000\076\000\035\000\034\000\045\000\
\035\000\013\000\084\000\046\000\047\000\140\000\036\000\081\000\
\132\000\036\000\090\000\096\000\093\000\081\000\014\000\077\000\
\037\000\038\000\039\000\037\000\038\000\039\000\045\000\015\000\
\031\000\017\000\046\000\047\000\081\000\185\000\186\000\187\000\
\052\000\040\000\041\000\149\000\040\000\041\000\019\000\018\000\
\020\000\189\000\026\000\062\000\192\000\027\000\053\000\194\000\
\048\000\132\000\132\000\132\000\163\000\164\000\165\000\019\000\
\054\000\020\000\167\000\055\000\021\000\073\000\132\000\079\000\
\132\000\073\000\073\000\132\000\056\000\073\000\073\000\084\000\
\085\000\178\000\097\000\179\000\180\000\181\000\182\000\119\000\
\098\000\111\000\117\000\088\000\050\000\136\000\145\000\120\000\
\121\000\073\000\146\000\073\000\073\000\073\000\073\000\073\000\
\184\000\147\000\150\000\073\000\088\000\073\000\148\000\156\000\
\120\000\121\000\184\000\122\000\159\000\123\000\124\000\125\000\
\126\000\127\000\120\000\121\000\158\000\040\000\005\000\128\000\
\168\000\169\000\089\000\170\000\122\000\171\000\123\000\124\000\
\125\000\126\000\127\000\174\000\151\000\183\000\040\000\144\000\
\128\000\076\000\190\000\126\000\127\000\152\000\153\000\154\000\
\040\000\193\000\128\000\028\000\002\000\077\000\079\000\028\000\
\016\000\155\000\013\000\020\000\077\000\028\000\028\000\157\000\
\020\000\058\000\191\000\173\000\020\000\020\000\020\000\092\000\
\028\000\000\000\028\000\000\000\000\000\015\000\015\000\015\000\
\020\000\000\000\000\000\020\000\017\000\000\000\000\000\000\000\
\017\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\064\000\065\000\
\066\000\017\000\000\000\017\000\000\000\040\000\000\000\073\000\
\074\000\040\000\000\000\015\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\037\000\
\000\000\000\000\040\000\037\000\040\000\000\000\037\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
\037\000\034\000\000\000\000\000\037\000\034\000\037\000\000\000\
\034\000\034\000\000\000\034\000\034\000\034\000\034\000\034\000\
\034\000\000\000\034\000\036\000\000\000\000\000\034\000\036\000\
\034\000\000\000\036\000\036\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\000\000\036\000\027\000\000\000\000\000\
\036\000\027\000\036\000\000\000\027\000\027\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\031\000\027\000\000\000\
\000\000\031\000\027\000\000\000\027\000\000\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\033\000\000\000\000\000\
\000\000\033\000\031\000\000\000\031\000\000\000\000\000\033\000\
\033\000\033\000\033\000\033\000\033\000\030\000\000\000\000\000\
\000\000\030\000\033\000\000\000\033\000\000\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\032\000\000\000\000\000\
\000\000\032\000\030\000\000\000\030\000\000\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\029\000\000\000\000\000\
\000\000\029\000\032\000\000\000\032\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\000\000\000\000\095\000\000\000\
\000\000\000\000\029\000\000\000\029\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\175\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\176\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\177\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\000\000\000\000\000\000\075\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\000\000\000\000\000\000\112\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\000\000\000\000\000\000\000\000\000\000\
\115\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\000\000\000\000\
\000\000\116\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\000\000\000\000\000\000\
\000\000\000\000\142\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\000\000\000\000\000\000\143\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\000\000\
\000\000\000\000\000\000\000\000\188\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\000\000\141\000\000\000\160\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\161\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\064\000\065\000\066\000\000\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000"

let yycheck = "\037\000\
\000\000\039\000\056\000\009\001\013\001\010\001\010\001\023\000\
\002\001\002\001\004\001\004\001\088\000\007\001\007\001\008\001\
\007\001\022\000\005\001\006\001\007\001\144\000\008\001\032\001\
\001\000\041\000\031\001\013\001\034\001\033\001\035\000\036\000\
\010\001\038\000\010\001\158\000\002\001\053\000\004\001\019\001\
\045\000\007\001\008\001\048\000\049\000\007\001\026\001\033\001\
\042\001\042\001\088\000\044\001\011\001\007\001\045\001\033\001\
\043\001\033\001\134\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\086\000\076\000\
\148\000\032\001\079\000\080\000\008\001\001\001\044\001\003\001\
\001\001\013\001\003\001\007\001\013\001\009\001\007\001\010\001\
\009\001\034\001\014\001\010\001\010\001\098\000\018\001\010\001\
\134\000\018\001\054\000\028\001\056\000\033\001\007\001\032\001\
\028\001\029\001\030\001\028\001\029\001\030\001\033\001\000\000\
\018\000\009\001\033\001\033\001\031\001\175\000\176\000\177\000\
\026\000\045\001\046\001\128\000\045\001\046\001\002\001\009\001\
\004\001\183\000\009\001\007\001\190\000\007\001\034\001\193\000\
\008\001\175\000\176\000\177\000\145\000\146\000\147\000\002\001\
\010\001\004\001\151\000\031\001\007\001\007\001\188\000\008\001\
\190\000\011\001\012\001\193\000\010\001\015\001\016\001\014\001\
\010\001\166\000\009\001\168\000\169\000\170\000\171\000\007\001\
\013\001\007\001\033\001\011\001\013\001\007\001\009\001\015\001\
\016\001\035\001\009\001\037\001\038\001\039\001\040\001\041\001\
\007\001\009\001\012\001\045\001\011\001\047\001\009\001\033\001\
\015\001\016\001\007\001\035\001\010\001\037\001\038\001\039\001\
\040\001\041\001\015\001\016\001\009\001\045\001\007\001\047\001\
\008\001\008\001\032\001\008\001\035\001\008\001\037\001\038\001\
\039\001\040\001\041\001\010\001\008\001\010\001\045\001\009\001\
\047\001\013\001\036\001\040\001\041\001\017\001\018\001\019\001\
\045\001\010\001\047\001\010\001\000\000\010\001\010\001\014\001\
\009\000\029\001\013\001\008\001\032\001\020\001\021\001\134\000\
\013\001\012\001\188\000\160\000\017\001\018\001\019\001\055\000\
\031\001\255\255\033\001\255\255\255\255\005\001\006\001\007\001\
\029\001\255\255\255\255\032\001\010\001\255\255\255\255\255\255\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\017\001\018\001\
\019\001\031\001\255\255\033\001\255\255\010\001\255\255\026\001\
\027\001\014\001\255\255\043\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\010\001\
\255\255\255\255\031\001\014\001\033\001\255\255\017\001\018\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\010\001\255\255\255\255\031\001\014\001\033\001\255\255\
\017\001\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\010\001\255\255\255\255\031\001\014\001\
\033\001\255\255\017\001\018\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\027\001\010\001\255\255\255\255\
\031\001\014\001\033\001\255\255\017\001\018\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\010\001\027\001\255\255\
\255\255\014\001\031\001\255\255\033\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\010\001\255\255\255\255\
\255\255\014\001\031\001\255\255\033\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\010\001\255\255\255\255\
\255\255\014\001\031\001\255\255\033\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\010\001\255\255\255\255\
\255\255\014\001\031\001\255\255\033\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\010\001\255\255\255\255\
\255\255\014\001\031\001\255\255\033\001\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\031\001\255\255\033\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\033\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\014\001\255\255\031\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  INTERNAL\000\
  EXTERNAL\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  VAR\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 36 "parser.mly"
                  ( Topdecs _1 )
# 476 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                        ( [] )
# 482 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 41 "parser.mly"
                        ( _1 :: _2 )
# 490 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 45 "parser.mly"
        ( GlobalDeclaration _1 )
# 497 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 46 "parser.mly"
                                                   ( Routine (Internal, _2, _4, _6) )
# 506 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 47 "parser.mly"
                                                   ( Routine (External, _2, _4, _6) )
# 515 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 48 "parser.mly"
                                                   ( Routine (Internal, _2, _4, Block _6) )
# 524 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 49 "parser.mly"
                                                   ( Routine (External, _2, _4, Block _6) )
# 533 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 50 "parser.mly"
                                                   ( Struct (_2, _4) )
# 541 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                        ( T_Int )
# 547 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                        ( T_Bool )
# 553 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 56 "parser.mly"
                        ( T_Array _1 )
# 560 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
                        ( T_Struct _1 )
# 567 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 61 "parser.mly"
                                ( Block _2 )
# 574 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 65 "parser.mly"
                                 ( [Statement (Expression (Call(_2, _4)))] )
# 582 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arguments) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 66 "parser.mly"
                                       ( (Statement (Expression (Call (_2, _4)))) :: _6 )
# 591 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 70 "parser.mly"
                                                  ( Reference _1 )
# 598 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 71 "parser.mly"
                                                  ( Value _1 )
# 605 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 72 "parser.mly"
                                                  ( _2 )
# 612 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                                                      ( VarRef _1 )
# 619 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 627 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 78 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 635 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                                                      ( Null )
# 641 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 83 "parser.mly"
              ( Bool _1 )
# 648 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 84 "parser.mly"
              ( Int _1 )
# 655 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 85 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 663 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 86 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 671 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 87 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 679 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 88 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 687 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 89 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 695 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 90 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 703 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 91 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 711 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 92 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 719 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 93 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 727 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 94 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 735 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 95 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 743 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 96 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 750 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 97 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 757 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 98 "parser.mly"
                                                          ( ArraySize _2 )
# 764 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 99 "parser.mly"
                                                          ( Lookup _2 )
# 771 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 100 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 779 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 101 "parser.mly"
                                                          ( NewStruct (_2, _4) )
# 787 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 105 "parser.mly"
                                                     ( Assign (_1, _3) )
# 795 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 106 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 803 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 107 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 811 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 108 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 819 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 109 "parser.mly"
                                                     ( Assign (_1, Value(Unary_op("!", _4))) )
# 827 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 110 "parser.mly"
                                                ( Call (_1, _3) )
# 835 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                                                ( Stop )
# 841 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                                                ( Halt )
# 847 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                                                ( Break )
# 853 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                                                ( Continue )
# 859 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 115 "parser.mly"
                                                ( Print _2 )
# 866 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                 ( [] )
# 872 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 120 "parser.mly"
                 ( _1 )
# 879 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 124 "parser.mly"
                                              ( [_1] )
# 886 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 125 "parser.mly"
                                              ( _1 :: _3 )
# 894 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                               ( [] )
# 900 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 130 "parser.mly"
                               ( _1 :: _2)
# 908 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 134 "parser.mly"
                                                             ( Statement _1 )
# 915 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 135 "parser.mly"
                                                             ( Declaration _1 )
# 922 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 139 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 930 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 140 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 938 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 141 "parser.mly"
                                                             ( AssignDeclaration (false, _3, _1, _5) )
# 947 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 142 "parser.mly"
                                                                   ( AssignDeclaration (true, _4, _1, _6) )
# 956 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 143 "parser.mly"
                                                                   ( VarDeclaration (false, _1, _5) )
# 964 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 144 "parser.mly"
                                                                   ( VarDeclaration (true, _1, _6) )
# 972 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 145 "parser.mly"
                                                               ( VarDeclaration (false, _1, _4) )
# 980 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 146 "parser.mly"
                                                               ( VarDeclaration (true, _1, _5) )
# 988 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 150 "parser.mly"
                                                       ( Expression _1 )
# 995 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 151 "parser.mly"
                                                       ( _1 )
# 1002 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 152 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1011 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 153 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1019 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 154 "parser.mly"
                                                             ( While (_3, _5) )
# 1027 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 155 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1035 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 156 "parser.mly"
                                                                                 ( Block([Declaration(_3); Statement(While(_4, Block([Statement(_8); Statement(Expression(_6));])));]) )
# 1045 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
               ( [] )
# 1051 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 161 "parser.mly"
               ( _1 )
# 1058 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 165 "parser.mly"
                           ( [_1] )
# 1065 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 166 "parser.mly"
                           ( _1 :: _3 )
# 1073 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 170 "parser.mly"
                                    ( (true, _4, _1) )
# 1081 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 171 "parser.mly"
                                    ( (false, _3, _1) )
# 1089 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
