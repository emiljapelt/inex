type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | INCLUDE
  | PATH of (string)
  | TYPE_VAR of (char)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | NULL
  | NEW
  | PRINT
  | HASH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number

  let get_filename () = ((symbol_start_pos ()).pos_fname)
  let get_linenum () = ((symbol_start_pos ()).pos_lnum)
# 74 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  266 (* INCLUDE *);
  269 (* ASSIGNMENT *);
  270 (* LPAR *);
  271 (* RPAR *);
  272 (* LBRACE *);
  273 (* RBRACE *);
  274 (* LBRAKE *);
  275 (* RBRAKE *);
  276 (* STOP *);
  277 (* HALT *);
  278 (* PLUS *);
  279 (* MINUS *);
  280 (* TIMES *);
  281 (* EQ *);
  282 (* NEQ *);
  283 (* LT *);
  284 (* GT *);
  285 (* LTEQ *);
  286 (* GTEQ *);
  287 (* LOGIC_AND *);
  288 (* LOGIC_OR *);
  289 (* PIPE *);
  290 (* NOT *);
  291 (* VALUE *);
  292 (* COMMA *);
  293 (* DOT *);
  294 (* SEMI *);
  295 (* COLON *);
    0 (* EOF *);
  296 (* IF *);
  297 (* ELSE *);
  298 (* WHILE *);
  299 (* UNTIL *);
  300 (* FOR *);
  301 (* REPEAT *);
  302 (* BREAK *);
  303 (* CONTINUE *);
  304 (* LOCKED *);
  305 (* STRUCT *);
  306 (* NULL *);
  307 (* NEW *);
  308 (* PRINT *);
  309 (* HASH *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  265 (* NAME *);
  267 (* PATH *);
  268 (* TYPE_VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\007\000\007\000\008\000\008\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\006\000\011\000\
\011\000\011\000\012\000\012\000\012\000\012\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\014\000\014\000\016\000\016\000\016\000\010\000\
\010\000\017\000\017\000\004\000\004\000\004\000\004\000\004\000\
\004\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\005\000\005\000\019\000\019\000\019\000\020\000\
\020\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\009\000\006\000\009\000\
\006\000\009\000\003\000\001\000\003\000\001\000\003\000\001\000\
\001\000\001\000\003\000\001\000\004\000\001\000\003\000\001\000\
\001\000\003\000\001\000\003\000\004\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\002\000\
\002\000\005\000\003\000\005\000\008\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\007\000\001\000\001\000\001\000\
\001\000\002\000\000\000\001\000\001\000\003\000\001\000\000\000\
\002\000\001\000\001\000\004\000\005\000\006\000\007\000\005\000\
\006\000\002\000\001\000\007\000\005\000\005\000\005\000\008\000\
\005\000\005\000\000\000\001\000\001\000\003\000\001\000\004\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\001\000\003\000\000\000\000\000\000\000\000\000\016\000\017\000\
\018\000\000\000\022\000\000\000\000\000\000\000\011\000\000\000\
\000\000\095\000\000\000\000\000\092\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\031\000\033\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\071\000\000\000\000\000\
\068\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\
\000\000\077\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\005\000\094\000\013\000\000\000\007\000\000\000\021\000\
\000\000\026\000\000\000\054\000\051\000\047\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\000\000\028\000\081\000\000\000\
\078\000\009\000\000\000\000\000\000\000\062\000\063\000\000\000\
\000\000\000\000\000\000\000\000\064\000\065\000\000\000\075\000\
\083\000\000\000\000\000\000\000\000\000\074\000\000\000\000\000\
\015\000\070\000\000\000\000\000\000\000\029\000\079\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\023\000\000\000\000\000\000\000\000\000\000\000\082\000\073\000\
\000\000\000\000\052\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\008\000\000\000\010\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\000\087\000\000\000\090\000\089\000\053\000\000\000\000\000\
\000\000\061\000\084\000\000\000\088\000"

let yydgoto = "\002\000\
\008\000\009\000\010\000\011\000\036\000\161\000\040\000\075\000\
\076\000\162\000\079\000\059\000\060\000\080\000\164\000\081\000\
\165\000\166\000\037\000\038\000"

let yysindex = "\015\000\
\075\255\000\000\008\255\009\255\248\254\032\255\038\255\000\000\
\088\000\075\255\000\000\000\255\137\255\033\255\052\255\186\255\
\000\000\000\000\089\255\100\255\089\255\100\255\000\000\000\000\
\000\000\094\255\000\000\211\255\054\000\078\255\000\000\089\255\
\100\255\000\000\084\255\114\255\000\000\099\255\101\255\134\255\
\155\255\148\255\041\001\000\000\000\000\000\000\000\000\211\255\
\092\255\092\255\211\255\002\255\211\255\002\255\000\000\031\002\
\041\001\098\001\068\255\000\000\211\255\081\255\211\255\146\255\
\000\000\180\255\182\255\105\255\192\255\089\255\100\255\205\255\
\192\255\212\255\196\255\116\255\033\001\000\000\183\001\214\255\
\000\000\213\255\031\255\172\255\000\000\068\255\201\255\215\255\
\217\255\211\255\211\255\211\255\211\255\211\255\211\255\211\255\
\211\255\211\255\211\255\211\255\000\000\211\255\227\255\115\001\
\211\255\000\000\132\001\000\000\199\255\226\255\041\001\217\255\
\247\255\000\000\000\000\000\000\089\255\000\000\089\255\000\000\
\041\001\000\000\092\255\000\000\000\000\000\000\092\255\041\001\
\188\255\031\255\031\255\000\000\000\002\000\002\022\002\022\002\
\022\002\022\002\000\000\031\255\198\001\000\000\000\000\149\001\
\000\000\000\000\089\255\217\255\005\255\000\000\000\000\229\255\
\234\255\237\255\238\255\241\255\000\000\000\000\092\255\000\000\
\000\000\230\255\126\255\219\255\247\255\000\000\244\255\245\255\
\000\000\000\000\250\255\242\255\212\001\000\000\000\000\251\255\
\092\255\041\001\211\255\211\255\211\255\249\255\211\255\000\000\
\000\000\211\255\002\000\003\000\005\000\012\000\000\000\000\000\
\192\255\192\255\000\000\255\255\000\000\246\255\011\000\004\000\
\051\001\069\001\087\001\211\255\223\001\181\255\025\000\223\001\
\211\255\211\255\211\255\211\255\000\000\000\000\092\255\000\000\
\000\000\016\000\030\000\030\000\030\000\166\001\030\000\030\000\
\223\001\223\001\223\001\223\001\027\000\092\255\203\255\006\000\
\000\000\000\000\004\255\000\000\000\000\000\000\033\000\030\000\
\037\000\000\000\000\000\030\000\000\000"

let yyrindex = "\000\000\
\045\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\000\000\042\000\000\000\000\000\000\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\044\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\103\255\000\000\
\000\000\000\000\138\000\000\000\000\000\102\000\060\000\000\000\
\120\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\165\255\
\069\000\000\000\000\000\000\000\042\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\156\000\174\000\000\000\121\255\016\001\208\000\224\000\
\240\000\000\001\000\000\192\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\167\255\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\001\245\001\251\254\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\255\019\255\025\255\049\255\000\000\046\000\031\000\233\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\077\001\000\000\150\255\239\255\195\255\243\255\157\255\
\248\255\191\000\231\255\204\255\178\000\207\255\139\000\138\255\
\000\000\210\255\053\001\000\000"

let yytablesize = 822
let yytable = "\084\000\
\082\000\086\000\058\000\041\000\170\000\030\000\160\000\114\000\
\042\000\055\000\047\000\118\000\231\000\019\000\066\000\001\000\
\012\000\013\000\177\000\067\000\062\000\169\000\077\000\150\000\
\151\000\083\000\020\000\085\000\172\000\056\000\014\000\178\000\
\055\000\057\000\023\000\104\000\024\000\107\000\025\000\058\000\
\184\000\026\000\015\000\014\000\027\000\028\000\016\000\088\000\
\089\000\157\000\158\000\055\000\056\000\055\000\092\000\159\000\
\057\000\116\000\160\000\112\000\163\000\099\000\058\000\059\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\204\000\141\000\171\000\200\000\144\000\
\029\000\003\000\004\000\005\000\006\000\102\000\059\000\017\000\
\034\000\031\000\063\000\078\000\044\000\105\000\045\000\064\000\
\046\000\035\000\064\000\167\000\047\000\168\000\148\000\173\000\
\103\000\048\000\023\000\049\000\024\000\050\000\025\000\039\000\
\163\000\026\000\051\000\065\000\027\000\069\000\106\000\069\000\
\043\000\069\000\068\000\007\000\052\000\053\000\054\000\199\000\
\069\000\176\000\206\000\213\000\214\000\064\000\070\000\036\000\
\071\000\036\000\186\000\036\000\069\000\055\000\056\000\102\000\
\057\000\036\000\036\000\187\000\188\000\189\000\021\000\121\000\
\111\000\201\000\202\000\203\000\036\000\205\000\036\000\190\000\
\208\000\072\000\103\000\022\000\108\000\229\000\163\000\163\000\
\163\000\073\000\163\000\163\000\232\000\233\000\234\000\074\000\
\236\000\237\000\222\000\097\000\239\000\096\000\163\000\225\000\
\226\000\227\000\228\000\163\000\044\000\102\000\045\000\163\000\
\046\000\243\000\109\000\223\000\047\000\245\000\102\000\032\000\
\097\000\048\000\096\000\049\000\126\000\050\000\108\000\113\000\
\103\000\110\000\051\000\044\000\033\000\045\000\127\000\046\000\
\177\000\103\000\117\000\047\000\052\000\053\000\054\000\120\000\
\048\000\119\000\049\000\128\000\050\000\178\000\124\000\125\000\
\129\000\051\000\064\000\142\000\146\000\055\000\056\000\147\000\
\057\000\085\000\179\000\052\000\053\000\054\000\185\000\180\000\
\085\000\085\000\181\000\182\000\085\000\085\000\183\000\149\000\
\191\000\005\000\193\000\194\000\055\000\056\000\113\000\057\000\
\195\000\198\000\150\000\151\000\215\000\196\000\209\000\210\000\
\085\000\211\000\085\000\085\000\085\000\085\000\085\000\085\000\
\212\000\217\000\085\000\216\000\085\000\230\000\152\000\218\000\
\153\000\154\000\155\000\156\000\157\000\158\000\231\000\224\000\
\055\000\238\000\159\000\027\000\002\000\113\000\240\000\242\000\
\027\000\150\000\151\000\244\000\027\000\027\000\027\000\023\000\
\091\000\024\000\093\000\025\000\067\000\012\000\026\000\067\000\
\027\000\027\000\061\000\027\000\067\000\152\000\014\000\153\000\
\154\000\155\000\156\000\157\000\158\000\020\000\020\000\055\000\
\020\000\159\000\020\000\020\000\020\000\072\000\018\000\020\000\
\020\000\020\000\020\000\020\000\021\000\020\000\020\000\020\000\
\020\000\020\000\024\000\192\000\024\000\020\000\024\000\020\000\
\207\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\049\000\241\000\049\000\024\000\
\049\000\024\000\115\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\048\000\000\000\
\048\000\049\000\048\000\049\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\045\000\000\000\045\000\048\000\045\000\048\000\000\000\045\000\
\045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\000\000\045\000\042\000\000\000\042\000\045\000\042\000\045\000\
\000\000\042\000\042\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\044\000\000\000\044\000\042\000\
\044\000\042\000\000\000\044\000\044\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\044\000\035\000\000\000\
\035\000\044\000\035\000\044\000\000\000\035\000\035\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\039\000\035\000\
\039\000\000\000\039\000\035\000\000\000\035\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\041\000\000\000\
\041\000\000\000\041\000\039\000\000\000\039\000\000\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\038\000\000\000\
\038\000\000\000\038\000\041\000\000\000\041\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\040\000\000\000\
\040\000\000\000\040\000\038\000\000\000\038\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\037\000\000\000\
\037\000\000\000\037\000\040\000\000\000\040\000\000\000\000\000\
\037\000\037\000\023\000\000\000\024\000\000\000\025\000\122\000\
\000\000\026\000\000\000\037\000\027\000\037\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\220\000\000\000\000\000\000\000\000\000\
\000\000\000\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\221\000\000\000\000\000\
\000\000\000\000\000\000\000\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\000\000\000\000\000\000\000\000\000\000\101\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\000\000\000\000\000\000\000\000\000\000\
\143\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\000\000\000\000\000\000\000\000\
\000\000\145\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\000\000\000\000\000\000\
\000\000\000\000\175\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\000\000\000\000\
\000\000\000\000\000\000\235\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\000\000\
\174\000\000\000\123\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\197\000\000\000\
\000\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\090\000\091\000\092\000\
\000\000\000\000\095\000\096\000\097\000\098\000\099\000\100\000\
\023\000\000\000\024\000\000\000\025\000\000\000\000\000\087\000\
\000\000\000\000\027\000\090\000\091\000\092\000\000\000\000\000\
\000\000\000\000\000\000\000\000\099\000\100\000"

let yycheck = "\052\000\
\050\000\054\000\028\000\021\000\123\000\014\000\113\000\069\000\
\022\000\015\001\009\001\073\000\009\001\014\001\032\000\001\000\
\009\001\009\001\014\001\033\000\029\000\121\000\048\000\020\001\
\021\001\051\000\027\001\053\000\128\000\015\001\039\001\027\001\
\038\001\015\001\002\001\061\000\004\001\063\000\006\001\015\001\
\159\000\009\001\011\001\039\001\012\001\013\001\009\001\056\000\
\057\000\046\001\047\001\050\001\038\001\050\001\024\001\052\001\
\038\001\071\000\165\000\068\000\113\000\031\001\038\001\015\001\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\182\000\102\000\127\000\178\000\105\000\
\048\001\007\001\008\001\009\001\010\001\018\001\038\001\000\000\
\000\001\038\001\013\001\000\001\001\001\013\001\003\001\018\001\
\005\001\009\001\018\001\117\000\009\001\119\000\111\000\129\000\
\037\001\014\001\002\001\016\001\004\001\018\001\006\001\012\001\
\165\000\009\001\023\001\038\001\012\001\015\001\038\001\017\001\
\027\001\019\001\039\001\049\001\033\001\034\001\035\001\177\000\
\015\001\147\000\183\000\193\000\194\000\018\001\036\001\015\001\
\036\001\017\001\013\001\019\001\038\001\050\001\051\001\018\001\
\053\001\025\001\026\001\022\001\023\001\024\001\014\001\036\001\
\048\001\179\000\180\000\181\000\036\001\183\000\038\001\034\001\
\186\000\028\001\037\001\027\001\019\001\215\000\219\000\220\000\
\221\000\015\001\223\000\224\000\219\000\220\000\221\000\028\001\
\223\000\224\000\204\000\015\001\230\000\015\001\235\000\209\000\
\210\000\211\000\212\000\240\000\001\001\018\001\003\001\244\000\
\005\001\240\000\015\001\015\001\009\001\244\000\018\001\014\001\
\036\001\014\001\036\001\016\001\033\001\018\001\019\001\016\001\
\037\001\028\001\023\001\001\001\027\001\003\001\014\001\005\001\
\014\001\037\001\014\001\009\001\033\001\034\001\035\001\028\001\
\014\001\014\001\016\001\027\001\018\001\027\001\017\001\019\001\
\018\001\023\001\018\001\009\001\038\001\050\001\051\001\014\001\
\053\001\009\001\014\001\033\001\034\001\035\001\017\001\014\001\
\016\001\017\001\014\001\014\001\020\001\021\001\014\001\009\001\
\038\001\009\001\015\001\015\001\050\001\051\001\016\001\053\001\
\015\001\015\001\020\001\021\001\014\001\028\001\013\001\013\001\
\040\001\013\001\042\001\043\001\044\001\045\001\046\001\047\001\
\013\001\015\001\050\001\038\001\052\001\014\001\040\001\028\001\
\042\001\043\001\044\001\045\001\046\001\047\001\009\001\015\001\
\050\001\015\001\052\001\013\001\000\000\016\001\041\001\015\001\
\018\001\020\001\021\001\015\001\022\001\023\001\024\001\002\001\
\015\001\004\001\015\001\006\001\015\001\028\001\009\001\017\001\
\034\001\012\001\013\001\037\001\019\001\040\001\028\001\042\001\
\043\001\044\001\045\001\046\001\047\001\018\001\013\001\050\001\
\015\001\052\001\017\001\018\001\019\001\017\001\010\000\022\001\
\023\001\024\001\025\001\026\001\018\001\028\001\029\001\030\001\
\031\001\032\001\015\001\165\000\017\001\036\001\019\001\038\001\
\183\000\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\015\001\235\000\017\001\036\001\
\019\001\038\001\070\000\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\015\001\255\255\
\017\001\036\001\019\001\038\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\015\001\255\255\017\001\036\001\019\001\038\001\255\255\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\032\001\015\001\255\255\017\001\036\001\019\001\038\001\
\255\255\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\032\001\015\001\255\255\017\001\036\001\
\019\001\038\001\255\255\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\015\001\255\255\
\017\001\036\001\019\001\038\001\255\255\022\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\015\001\032\001\
\017\001\255\255\019\001\036\001\255\255\038\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\015\001\255\255\
\017\001\255\255\019\001\036\001\255\255\038\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\015\001\255\255\
\017\001\255\255\019\001\036\001\255\255\038\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\015\001\255\255\
\017\001\255\255\019\001\036\001\255\255\038\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\015\001\255\255\
\017\001\255\255\019\001\036\001\255\255\038\001\255\255\255\255\
\025\001\026\001\002\001\255\255\004\001\255\255\006\001\015\001\
\255\255\009\001\255\255\036\001\012\001\038\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\038\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\038\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\038\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\038\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\038\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\019\001\255\255\036\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\022\001\023\001\024\001\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\002\001\255\255\004\001\255\255\006\001\255\255\255\255\009\001\
\255\255\255\255\012\001\022\001\023\001\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  INCLUDE\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  HASH\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  PATH\000\
  TYPE_VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 52 "parser.mly"
                  ( Topdecs _1 )
# 552 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                        ( [] )
# 558 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 57 "parser.mly"
                        ( _1 :: _2 )
# 566 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 61 "parser.mly"
        ( GlobalDeclaration _1 )
# 573 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 62 "parser.mly"
                                                          ( Routine (Internal, _2, [], _4, _6) )
# 582 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 63 "parser.mly"
                                                          ( Routine (Internal, _2, _4, _7, _9) )
# 592 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 64 "parser.mly"
                                                          ( Routine (External, _2, [], _4, _6) )
# 601 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 65 "parser.mly"
                                                          ( Routine (External, _2, _4, _7, _9) )
# 611 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 66 "parser.mly"
                                                          ( Struct (_2, [], _4) )
# 619 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 67 "parser.mly"
                                                          ( Struct (_2, _4, _7) )
# 628 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 68 "parser.mly"
                                                          ( Include _2 )
# 635 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 72 "parser.mly"
                            ( [_1] )
# 642 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : char) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_vars) in
    Obj.repr(
# 73 "parser.mly"
                            ( _1 :: _3 )
# 650 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 77 "parser.mly"
                        ( [_1] )
# 657 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_args) in
    Obj.repr(
# 78 "parser.mly"
                        ( _1 :: _3 )
# 665 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                        ( T_Int )
# 671 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                        ( T_Bool )
# 677 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                        ( T_Char )
# 683 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 85 "parser.mly"
                        ( T_Array _1 )
# 690 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "parser.mly"
                        ( T_Struct (_1, []) )
# 697 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_args) in
    Obj.repr(
# 87 "parser.mly"
                        ( T_Struct (_1, _3) )
# 705 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 88 "parser.mly"
                        ( T_Generic _1 )
# 712 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 92 "parser.mly"
                                ( Block _2 )
# 719 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 96 "parser.mly"
                                                  ( Reference _1 )
# 726 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 97 "parser.mly"
                                                  ( Value _1 )
# 733 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 98 "parser.mly"
                                                  ( _2 )
# 740 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                                                      ( VarRef _1 )
# 747 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 755 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 104 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 763 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                                                      ( Null )
# 769 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 109 "parser.mly"
              ( Bool _1 )
# 776 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 110 "parser.mly"
              ( Int _1 )
# 783 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 111 "parser.mly"
              ( Char _1 )
# 790 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 112 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 798 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 113 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 806 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 114 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 814 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 115 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 822 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 116 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 830 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 117 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 838 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 118 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 846 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 119 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 854 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 120 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 862 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 121 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 870 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 122 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 878 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 123 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 885 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 124 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 892 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 125 "parser.mly"
                                                          ( ArraySize _2 )
# 899 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 126 "parser.mly"
                                                          ( GetInput _2 )
# 906 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 127 "parser.mly"
                                                          ( ValueOf _2 )
# 913 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 128 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 921 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 129 "parser.mly"
                                                          ( ArrayLiteral _2 )
# 928 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 130 "parser.mly"
                                                          ( NewStruct (_2, [], _4) )
# 936 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 131 "parser.mly"
                                                          ( NewStruct (_2, _4, _7) )
# 945 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 132 "parser.mly"
                                                          ( StructLiteral _2 )
# 952 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 136 "parser.mly"
                                                     ( Assign (_1, _3) )
# 960 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 137 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 968 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 138 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 976 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 139 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 984 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 140 "parser.mly"
                                                     ( Assign (_1, Value(Unary_op("!", _4))) )
# 992 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 141 "parser.mly"
                                                ( Call (_1, [], _3) )
# 1000 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 142 "parser.mly"
                                                ( Call (_1, _3, _6) )
# 1009 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                                                ( Stop )
# 1015 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
                                                ( Halt )
# 1021 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                                                ( Break )
# 1027 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                                                ( Continue )
# 1033 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 147 "parser.mly"
                                                ( Print _2 )
# 1040 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
                 ( [] )
# 1046 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 152 "parser.mly"
                 ( _1 )
# 1053 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 156 "parser.mly"
                                              ( [_1] )
# 1060 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 157 "parser.mly"
                                              ( _1 :: _3 )
# 1068 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parser.mly"
          ( raise_line_error "Error in arguments" (get_filename ()) (get_linenum ()) )
# 1074 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                               ( [] )
# 1080 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 163 "parser.mly"
                               ( _1 :: _2 )
# 1088 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 167 "parser.mly"
                                                             ( Statement (_1, (get_filename ()), (get_linenum ())) )
# 1095 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 168 "parser.mly"
                                                             ( Declaration (_1, (get_filename ()), (get_linenum ())) )
# 1102 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 172 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 1110 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 173 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 1118 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 174 "parser.mly"
                                                             ( AssignDeclaration (false, Some _3, _1, _5) )
# 1127 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 175 "parser.mly"
                                                                   ( AssignDeclaration (true, Some _4, _1, _6) )
# 1136 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 176 "parser.mly"
                                                               ( AssignDeclaration (false, None, _1, _4) )
# 1144 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 177 "parser.mly"
                                                               ( AssignDeclaration (true, None, _1, _5) )
# 1152 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 181 "parser.mly"
                                                       ( Expression _1 )
# 1159 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 182 "parser.mly"
                                                       ( _1 )
# 1166 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 183 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1175 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 184 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1183 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 185 "parser.mly"
                                                             ( While (_3, _5) )
# 1191 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 186 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1199 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 187 "parser.mly"
                                                                                 ( Block([Declaration(_3, (get_filename ()), (get_linenum ())); Statement(While(_4, Block([Statement(_8, (get_filename ()), (get_linenum ())); Statement(Expression(_6), (get_filename ()), (get_linenum ()));])), (get_filename ()), (get_linenum ()));]) )
# 1209 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 188 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VarRef var_name), Value _3)), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Expression(Assign(VarRef(var_name), Value(Binary_op("+", Value(Int 1), Reference(VarRef var_name))))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1228 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 200 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, Some T_Int, limit_name, Value(ValueOf(_3))), (get_filename ()), (get_linenum ())); 
      Declaration(TypeDeclaration(false, T_Int, count_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VarRef count_name), Reference(VarRef limit_name))), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Expression(Assign(VarRef count_name, Value(Binary_op("+", Value(Int 1), Reference(VarRef count_name))))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1249 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "parser.mly"
               ( [] )
# 1255 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 218 "parser.mly"
               ( _1 )
# 1262 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 222 "parser.mly"
                           ( [_1] )
# 1269 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 223 "parser.mly"
                           ( _1 :: _3 )
# 1277 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parser.mly"
          ( raise_line_error "Error in parameter declaration" (get_filename ()) (get_linenum ()) )
# 1283 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 228 "parser.mly"
                                    ( (true, _4, _1) )
# 1291 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 229 "parser.mly"
                                    ( (false, _3, _1) )
# 1299 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
