type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | ENTRY
  | NAME of (string)
  | REFERENCE
  | AS
  | PATH of (string)
  | TYPE_VAR of (char)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | NULL
  | NEW
  | PRINT
  | HASH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number

  let get_filename () = ((symbol_start_pos ()).pos_fname)
  let get_linenum () = ((symbol_start_pos ()).pos_lnum)
# 76 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  265 (* ENTRY *);
  267 (* REFERENCE *);
  268 (* AS *);
  271 (* ASSIGNMENT *);
  272 (* LPAR *);
  273 (* RPAR *);
  274 (* LBRACE *);
  275 (* RBRACE *);
  276 (* LBRAKE *);
  277 (* RBRAKE *);
  278 (* STOP *);
  279 (* HALT *);
  280 (* PLUS *);
  281 (* MINUS *);
  282 (* TIMES *);
  283 (* EQ *);
  284 (* NEQ *);
  285 (* LT *);
  286 (* GT *);
  287 (* LTEQ *);
  288 (* GTEQ *);
  289 (* LOGIC_AND *);
  290 (* LOGIC_OR *);
  291 (* PIPE *);
  292 (* NOT *);
  293 (* VALUE *);
  294 (* COMMA *);
  295 (* DOT *);
  296 (* SEMI *);
  297 (* COLON *);
    0 (* EOF *);
  298 (* IF *);
  299 (* ELSE *);
  300 (* WHILE *);
  301 (* UNTIL *);
  302 (* FOR *);
  303 (* REPEAT *);
  304 (* BREAK *);
  305 (* CONTINUE *);
  306 (* LOCKED *);
  307 (* STRUCT *);
  308 (* NULL *);
  309 (* NEW *);
  310 (* PRINT *);
  311 (* HASH *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  266 (* NAME *);
  269 (* PATH *);
  270 (* TYPE_VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\007\000\007\000\009\000\
\009\000\011\000\011\000\011\000\011\000\010\000\010\000\010\000\
\010\000\010\000\006\000\013\000\013\000\014\000\014\000\014\000\
\014\000\014\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\017\000\017\000\018\000\018\000\
\018\000\012\000\012\000\019\000\019\000\004\000\004\000\004\000\
\004\000\004\000\004\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\008\000\008\000\022\000\022\000\023\000\023\000\
\005\000\005\000\024\000\024\000\025\000\025\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\009\000\006\000\009\000\
\006\000\009\000\006\000\009\000\005\000\001\000\003\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\001\000\
\004\000\001\000\003\000\001\000\001\000\001\000\003\000\004\000\
\001\000\003\000\003\000\001\000\001\000\001\000\002\000\002\000\
\003\000\002\000\002\000\005\000\003\000\005\000\008\000\003\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\000\000\001\000\001\000\003\000\
\001\000\000\000\002\000\001\000\001\000\004\000\005\000\006\000\
\007\000\005\000\006\000\001\000\007\000\005\000\005\000\005\000\
\008\000\005\000\005\000\002\000\002\000\002\000\002\000\002\000\
\003\000\004\000\004\000\004\000\004\000\004\000\007\000\006\000\
\009\000\002\000\000\000\001\000\001\000\003\000\004\000\003\000\
\000\000\001\000\001\000\003\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\018\000\019\000\020\000\000\000\026\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\100\000\000\000\000\000\000\000\037\000\036\000\038\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\029\000\049\000\000\000\
\000\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\062\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\000\000\000\000\071\000\000\000\023\000\013\000\
\000\000\000\000\000\000\000\000\000\000\005\000\108\000\015\000\
\000\000\007\000\000\000\000\000\104\000\009\000\102\000\000\000\
\025\000\000\000\034\000\035\000\000\000\048\000\045\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
\031\000\075\000\000\000\072\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\069\000\076\000\000\000\000\000\000\000\068\000\
\000\000\000\000\000\000\103\000\000\000\017\000\064\000\000\000\
\000\000\000\000\032\000\073\000\000\000\000\000\000\000\000\000\
\084\000\085\000\000\000\000\000\000\000\000\000\000\000\086\000\
\087\000\098\000\027\000\000\000\000\000\000\000\000\000\000\000\
\067\000\088\000\000\000\000\000\000\000\046\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\008\000\010\000\000\000\012\000\094\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\000\080\000\000\000\083\000\082\000\047\000\000\000\096\000\
\000\000\000\000\000\000\095\000\000\000\077\000\000\000\000\000\
\081\000\097\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000\012\000\041\000\188\000\045\000\049\000\
\091\000\092\000\036\000\189\000\097\000\069\000\070\000\071\000\
\098\000\099\000\191\000\192\000\193\000\050\000\051\000\042\000\
\043\000"

let yysindex = "\021\000\
\156\255\000\000\014\255\041\255\046\255\082\255\069\255\127\255\
\000\000\144\000\156\255\000\000\160\255\189\255\215\255\098\255\
\137\255\217\255\000\000\000\000\145\255\142\255\145\255\142\255\
\165\255\142\255\000\000\000\000\000\000\000\000\150\255\000\000\
\222\255\235\255\039\255\000\000\173\255\145\255\142\255\143\255\
\168\255\000\000\164\255\174\255\183\255\199\255\184\255\187\255\
\219\255\000\000\196\255\221\255\055\000\000\000\000\000\000\000\
\000\000\222\255\125\255\125\255\222\255\021\255\222\255\021\255\
\000\000\247\001\055\000\127\001\001\255\000\000\000\000\222\255\
\100\255\222\255\234\255\000\000\212\255\248\255\223\255\132\255\
\246\255\145\255\142\255\252\255\246\255\253\255\064\255\246\255\
\165\255\255\255\242\255\089\255\007\002\090\255\006\000\000\000\
\212\001\254\255\000\000\003\000\085\255\021\255\171\255\000\000\
\001\255\227\255\005\000\008\000\222\255\222\255\222\255\222\255\
\222\255\222\255\222\255\222\255\222\255\222\255\222\255\000\000\
\222\255\019\000\144\001\222\255\000\000\161\001\000\000\000\000\
\007\000\015\000\055\000\008\000\004\000\000\000\000\000\000\000\
\145\255\000\000\145\255\039\000\000\000\000\000\000\000\165\255\
\000\000\055\000\000\000\000\000\125\255\000\000\000\000\090\255\
\000\000\125\255\055\000\025\255\085\255\085\255\000\000\040\002\
\040\002\098\000\098\000\098\000\098\000\000\000\085\255\238\001\
\000\000\000\000\178\001\000\000\000\000\145\255\008\000\254\254\
\024\000\030\000\022\000\028\000\059\000\060\000\061\000\031\000\
\038\000\125\255\000\000\000\000\062\000\048\000\004\000\000\000\
\040\000\065\000\066\000\000\000\068\000\000\000\000\000\077\000\
\049\000\252\001\000\000\000\000\085\000\125\255\055\000\093\000\
\000\000\000\000\222\255\222\255\222\255\099\000\222\255\000\000\
\000\000\000\000\000\000\222\255\100\000\102\000\104\000\113\000\
\000\000\000\000\246\255\246\255\246\255\000\000\114\000\000\000\
\089\000\116\000\105\000\232\255\080\001\098\001\116\001\222\255\
\191\255\122\000\007\002\222\255\222\255\222\255\222\255\000\000\
\000\000\000\000\125\255\000\000\000\000\137\000\125\255\055\000\
\044\000\044\000\044\000\195\001\044\000\044\000\007\002\007\002\
\007\002\007\002\141\000\125\255\154\000\146\000\026\255\151\000\
\000\000\000\000\013\255\000\000\000\000\000\000\172\000\000\000\
\181\000\044\000\187\000\000\000\125\255\000\000\044\000\190\000\
\000\000\000\000"

let yyrindex = "\000\000\
\215\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\215\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\195\000\000\000\195\000\000\000\
\205\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\195\000\000\000\000\000\
\000\000\000\000\208\000\200\000\000\000\000\000\000\000\000\000\
\000\000\000\000\216\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\221\000\222\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\117\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\218\000\000\000\018\002\029\002\000\000\
\084\255\000\000\000\000\000\000\171\000\000\000\000\000\000\000\
\135\000\231\000\000\000\153\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\252\254\242\000\000\000\000\000\000\000\
\195\000\000\000\195\000\000\000\000\000\000\000\000\000\205\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\247\000\000\000\000\000\189\000\207\000\000\000\049\001\
\063\001\241\000\001\001\017\001\033\001\000\000\225\000\000\000\
\000\000\000\000\000\000\000\000\000\000\195\000\031\255\101\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\242\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\247\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\246\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\002\029\002\066\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\247\000\000\000\000\000\000\000\247\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\099\255\141\255\
\154\255\157\255\000\000\247\000\000\000\000\000\101\000\244\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\247\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\002\000\000\139\255\236\255\180\255\249\255\131\001\
\121\255\247\255\179\255\086\001\231\255\198\255\200\255\000\000\
\197\255\122\255\000\000\167\255\005\001\193\001\000\000\201\001\
\000\000"

let yytablesize = 842
let yytable = "\094\000\
\100\000\095\000\046\000\103\000\134\000\105\000\035\000\068\000\
\138\000\141\000\198\000\142\000\110\000\206\000\199\000\187\000\
\047\000\078\000\052\000\201\000\121\000\001\000\015\001\013\000\
\073\000\054\000\207\000\055\000\102\000\056\000\057\000\079\000\
\093\000\110\000\057\000\101\000\102\000\104\000\016\000\122\000\
\058\000\206\000\059\000\152\000\060\000\127\000\123\000\109\000\
\126\000\061\000\014\000\218\000\208\000\074\000\207\000\015\000\
\107\000\108\000\075\000\062\000\063\000\064\000\196\000\027\000\
\065\000\028\000\186\000\029\000\109\000\030\000\132\000\235\000\
\065\000\187\000\190\000\136\000\065\000\066\000\076\000\067\000\
\208\000\017\000\089\000\157\000\158\000\159\000\160\000\161\000\
\162\000\163\000\164\000\165\000\166\000\167\000\200\000\168\000\
\240\000\027\000\171\000\028\000\063\000\029\000\063\000\030\000\
\063\000\089\000\147\000\031\000\075\000\121\000\111\000\032\000\
\033\000\140\000\124\000\090\000\194\000\118\000\195\000\075\000\
\014\001\175\000\016\000\063\000\096\000\054\000\146\000\055\000\
\122\000\056\000\202\000\027\000\190\000\028\000\057\000\029\000\
\018\000\030\000\090\000\125\000\058\000\031\000\059\000\019\000\
\060\000\032\000\234\000\034\000\037\000\061\000\248\000\249\000\
\250\000\205\000\040\000\044\000\241\000\091\000\242\000\062\000\
\063\000\064\000\003\000\004\000\005\000\006\000\007\000\016\001\
\017\001\018\001\092\000\020\001\021\001\093\000\048\000\021\000\
\065\000\066\000\053\000\067\000\091\000\131\000\077\000\080\000\
\081\000\237\000\238\000\239\000\022\000\093\000\121\000\011\001\
\030\001\092\000\243\000\013\001\093\000\033\001\190\000\190\000\
\190\000\082\000\190\000\190\000\023\000\153\000\008\000\005\001\
\023\001\122\000\121\000\083\000\084\000\086\000\004\001\085\000\
\190\000\024\000\007\001\008\001\009\001\010\001\054\000\190\000\
\055\000\032\001\056\000\087\000\190\000\122\000\025\000\057\000\
\038\000\089\000\027\000\088\000\028\000\058\000\029\000\059\000\
\030\000\060\000\154\000\026\000\031\000\039\000\061\000\255\000\
\032\000\072\000\090\000\128\000\130\000\078\000\127\000\155\000\
\062\000\063\000\064\000\078\000\000\001\078\000\078\000\133\000\
\129\000\078\000\078\000\137\000\139\000\176\000\144\000\145\000\
\150\000\065\000\066\000\102\000\067\000\133\000\148\000\151\000\
\156\000\177\000\178\000\075\000\169\000\078\000\174\000\078\000\
\078\000\078\000\078\000\078\000\078\000\211\000\027\000\078\000\
\028\000\078\000\029\000\212\000\030\000\179\000\173\000\180\000\
\181\000\182\000\183\000\184\000\185\000\015\001\027\000\065\000\
\028\000\186\000\029\000\102\000\030\000\133\000\220\000\209\000\
\031\000\177\000\178\000\121\000\032\000\210\000\216\000\221\000\
\222\000\223\000\213\000\214\000\215\000\217\000\231\000\226\000\
\219\000\227\000\228\000\224\000\229\000\179\000\122\000\180\000\
\181\000\182\000\183\000\184\000\185\000\230\000\024\000\065\000\
\024\000\186\000\024\000\024\000\024\000\233\000\236\000\024\000\
\024\000\024\000\024\000\024\000\006\000\024\000\024\000\024\000\
\024\000\024\000\244\000\030\000\245\000\024\000\246\000\024\000\
\030\000\109\000\110\000\111\000\030\000\030\000\030\000\247\000\
\252\000\251\000\118\000\119\000\253\000\028\000\254\000\028\000\
\030\000\028\000\006\001\030\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\043\000\
\012\001\043\000\028\000\043\000\028\000\022\001\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\042\000\024\001\042\000\043\000\042\000\043\000\025\001\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\039\000\028\001\039\000\042\000\039\000\
\042\000\026\001\039\000\039\000\029\001\039\000\039\000\039\000\
\039\000\039\000\039\000\031\001\039\000\058\000\034\001\058\000\
\039\000\058\000\039\000\105\000\058\000\058\000\002\000\058\000\
\058\000\058\000\058\000\058\000\058\000\099\000\058\000\060\000\
\107\000\060\000\058\000\060\000\058\000\014\000\060\000\060\000\
\101\000\060\000\060\000\060\000\060\000\060\000\060\000\061\000\
\060\000\051\000\061\000\051\000\060\000\051\000\060\000\016\000\
\051\000\051\000\024\000\051\000\051\000\051\000\051\000\051\000\
\051\000\055\000\051\000\055\000\066\000\055\000\051\000\061\000\
\051\000\025\000\020\000\055\000\055\000\055\000\055\000\055\000\
\055\000\057\000\197\000\057\000\225\000\057\000\055\000\027\001\
\055\000\143\000\135\000\057\000\057\000\057\000\057\000\057\000\
\057\000\054\000\000\000\054\000\000\000\054\000\057\000\000\000\
\057\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\056\000\000\000\056\000\000\000\056\000\054\000\000\000\
\054\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\052\000\000\000\052\000\000\000\052\000\056\000\000\000\
\056\000\000\000\000\000\052\000\052\000\000\000\000\000\053\000\
\000\000\053\000\000\000\053\000\000\000\000\000\052\000\000\000\
\052\000\053\000\053\000\000\000\000\000\000\000\000\000\000\000\
\001\001\000\000\000\000\000\000\053\000\000\000\053\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\002\001\000\000\000\000\000\000\000\000\000\000\
\000\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\003\001\000\000\000\000\000\000\
\000\000\000\000\000\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\119\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\000\000\000\000\000\000\000\000\000\000\120\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\000\000\000\000\000\000\000\000\000\000\170\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\000\000\000\000\000\000\000\000\000\000\
\172\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\000\000\000\000\000\000\000\000\
\000\000\204\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\000\000\000\000\000\000\
\000\000\000\000\019\001\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\119\000\027\000\000\000\
\028\000\149\000\029\000\000\000\030\000\000\000\000\000\000\000\
\106\000\000\000\203\000\000\000\032\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\119\000\
\232\000\000\000\000\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\119\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\109\000\
\110\000\111\000\000\000\000\000\114\000\115\000\116\000\117\000\
\118\000\119\000"

let yycheck = "\058\000\
\060\000\058\000\023\000\062\000\081\000\064\000\016\000\033\000\
\085\000\087\000\146\000\088\000\017\001\016\001\149\000\133\000\
\024\000\038\000\026\000\155\000\020\001\001\000\010\001\010\001\
\034\000\001\001\029\001\003\001\016\001\005\001\010\001\039\000\
\058\000\038\001\010\001\061\000\016\001\063\000\041\001\039\001\
\016\001\016\001\018\001\102\000\020\001\021\001\072\000\017\001\
\074\000\025\001\010\001\186\000\055\001\015\001\029\001\010\001\
\066\000\067\000\020\001\035\001\036\001\037\001\140\000\000\001\
\052\001\002\001\054\001\004\001\038\001\006\001\080\000\207\000\
\052\001\191\000\133\000\083\000\052\001\053\001\040\001\055\001\
\055\001\013\001\017\001\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\119\000\154\000\121\000\
\214\000\000\001\124\000\002\001\017\001\004\001\019\001\006\001\
\021\001\040\001\017\001\010\001\020\001\020\001\026\001\014\001\
\015\001\050\001\015\001\017\001\137\000\033\001\139\000\020\001\
\000\001\131\000\041\001\040\001\000\001\001\001\038\001\003\001\
\039\001\005\001\156\000\000\001\191\000\002\001\010\001\004\001\
\010\001\006\001\040\001\040\001\016\001\010\001\018\001\000\000\
\020\001\014\001\206\000\050\001\012\001\025\001\227\000\228\000\
\229\000\174\000\010\001\014\001\215\000\017\001\215\000\035\001\
\036\001\037\001\007\001\008\001\009\001\010\001\011\001\001\001\
\002\001\003\001\017\001\005\001\006\001\017\001\010\001\016\001\
\052\001\053\001\029\001\055\001\040\001\050\001\010\001\041\001\
\017\001\211\000\212\000\213\000\029\001\215\000\020\001\251\000\
\026\001\040\001\220\000\255\000\040\001\031\001\001\001\002\001\
\003\001\038\001\005\001\006\001\016\001\035\001\051\001\017\001\
\012\001\039\001\020\001\038\001\030\001\030\001\240\000\017\001\
\019\001\029\001\244\000\245\000\246\000\247\000\001\001\026\001\
\003\001\029\001\005\001\041\001\031\001\039\001\016\001\010\001\
\016\001\038\001\000\001\017\001\002\001\016\001\004\001\018\001\
\006\001\020\001\016\001\029\001\010\001\029\001\025\001\016\001\
\014\001\015\001\030\001\040\001\030\001\010\001\021\001\029\001\
\035\001\036\001\037\001\016\001\029\001\018\001\019\001\018\001\
\017\001\022\001\023\001\016\001\016\001\010\001\016\001\030\001\
\019\001\052\001\053\001\016\001\055\001\018\001\017\001\021\001\
\020\001\022\001\023\001\020\001\010\001\042\001\016\001\044\001\
\045\001\046\001\047\001\048\001\049\001\016\001\000\001\052\001\
\002\001\054\001\004\001\016\001\006\001\042\001\040\001\044\001\
\045\001\046\001\047\001\048\001\049\001\010\001\000\001\052\001\
\002\001\054\001\004\001\016\001\006\001\018\001\015\001\040\001\
\010\001\022\001\023\001\020\001\014\001\040\001\040\001\024\001\
\025\001\026\001\016\001\016\001\016\001\040\001\030\001\040\001\
\019\001\017\001\017\001\036\001\017\001\042\001\039\001\044\001\
\045\001\046\001\047\001\048\001\049\001\017\001\015\001\052\001\
\017\001\054\001\019\001\020\001\021\001\017\001\010\001\024\001\
\025\001\026\001\027\001\028\001\010\001\030\001\031\001\032\001\
\033\001\034\001\015\001\015\001\015\001\038\001\015\001\040\001\
\020\001\024\001\025\001\026\001\024\001\025\001\026\001\015\001\
\040\001\016\001\033\001\034\001\017\001\017\001\030\001\019\001\
\036\001\021\001\017\001\039\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\017\001\
\016\001\019\001\038\001\021\001\040\001\017\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\017\001\017\001\019\001\038\001\021\001\040\001\030\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\017\001\017\001\019\001\038\001\021\001\
\040\001\043\001\024\001\025\001\016\001\027\001\028\001\029\001\
\030\001\031\001\032\001\017\001\034\001\017\001\017\001\019\001\
\038\001\021\001\040\001\017\001\024\001\025\001\000\000\027\001\
\028\001\029\001\030\001\031\001\032\001\017\001\034\001\017\001\
\017\001\019\001\038\001\021\001\040\001\030\001\024\001\025\001\
\017\001\027\001\028\001\029\001\030\001\031\001\032\001\019\001\
\034\001\017\001\021\001\019\001\038\001\021\001\040\001\030\001\
\024\001\025\001\020\001\027\001\028\001\029\001\030\001\031\001\
\032\001\017\001\034\001\019\001\019\001\021\001\038\001\017\001\
\040\001\020\001\011\000\027\001\028\001\029\001\030\001\031\001\
\032\001\017\001\144\000\019\001\191\000\021\001\038\001\019\001\
\040\001\089\000\082\000\027\001\028\001\029\001\030\001\031\001\
\032\001\017\001\255\255\019\001\255\255\021\001\038\001\255\255\
\040\001\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\017\001\255\255\019\001\255\255\021\001\038\001\255\255\
\040\001\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\017\001\255\255\019\001\255\255\021\001\038\001\255\255\
\040\001\255\255\255\255\027\001\028\001\255\255\255\255\017\001\
\255\255\019\001\255\255\021\001\255\255\255\255\038\001\255\255\
\040\001\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\038\001\255\255\040\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\017\001\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\040\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\255\255\040\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\255\255\040\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\255\255\255\255\
\255\255\255\255\040\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\000\001\255\255\
\002\001\038\001\004\001\255\255\006\001\255\255\255\255\255\255\
\010\001\255\255\021\001\255\255\014\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\024\001\
\025\001\026\001\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  ENTRY\000\
  REFERENCE\000\
  AS\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  HASH\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  PATH\000\
  TYPE_VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 52 "parser.mly"
                  ( Topdecs _1 )
# 586 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                        ( [] )
# 592 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 57 "parser.mly"
                        ( _1 :: _2 )
# 600 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 61 "parser.mly"
        ( GlobalDeclaration _1 )
# 607 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 62 "parser.mly"
                                                            ( Routine (Internal, _2, [], _4, _6) )
# 616 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 63 "parser.mly"
                                                            ( Routine (Internal, _2, _4, _7, _9) )
# 626 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 64 "parser.mly"
                                                            ( Routine (External, _2, [], _4, _6) )
# 635 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 65 "parser.mly"
                                                            ( Routine (External, _2, _4, _7, _9) )
# 645 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'simple_params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 66 "parser.mly"
                                                            ( Routine (Entry, _2, [], _4, _6) )
# 654 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'simple_params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 67 "parser.mly"
                                                            ( raise_line_error "Entrypoints cannot be generic" (get_filename ()) (get_linenum ()) )
# 664 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 68 "parser.mly"
                                                            ( Struct (_2, [], _4) )
# 672 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 69 "parser.mly"
                                                            ( Struct (_2, _4, _7) )
# 681 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
                                                            ( FileReference(_4, _2) )
# 689 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 74 "parser.mly"
                            ( [_1] )
# 696 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : char) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_vars) in
    Obj.repr(
# 75 "parser.mly"
                            ( _1 :: _3 )
# 704 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 79 "parser.mly"
                        ( [_1] )
# 711 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_args) in
    Obj.repr(
# 80 "parser.mly"
                        ( _1 :: _3 )
# 719 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                        ( T_Int )
# 725 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                        ( T_Bool )
# 731 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                        ( T_Char )
# 737 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
          ( raise_line_error "Entrypoints can only take simple types as arguments" (get_filename ()) (get_linenum ()) )
# 743 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 91 "parser.mly"
                        ( _1 )
# 750 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 92 "parser.mly"
                        ( T_Array _1 )
# 757 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
                        ( T_Struct (_1, []) )
# 764 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_args) in
    Obj.repr(
# 94 "parser.mly"
                        ( T_Struct (_1, _3) )
# 772 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 95 "parser.mly"
                        ( T_Generic _1 )
# 779 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 99 "parser.mly"
                                ( Block _2 )
# 786 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 103 "parser.mly"
                                                  ( Reference _1 )
# 793 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 104 "parser.mly"
                                                  ( Value _1 )
# 800 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                                                      ( VariableAccess _1 )
# 807 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                                                      ( StructAccess (_1, _3) )
# 815 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 110 "parser.mly"
                                                      ( ArrayAccess (_1, _3) )
# 823 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                                                      ( Null )
# 829 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 112 "parser.mly"
                        (_2)
# 836 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'value) in
    Obj.repr(
# 116 "parser.mly"
                  ( _2 )
# 843 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 117 "parser.mly"
              ( Bool _1 )
# 850 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 118 "parser.mly"
              ( Int _1 )
# 857 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 119 "parser.mly"
              ( Char _1 )
# 864 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 120 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 871 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 121 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 878 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 122 "parser.mly"
                                                          ( ArraySize _2 )
# 885 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 123 "parser.mly"
                                                          ( GetInput _2 )
# 892 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 124 "parser.mly"
                                                          ( ValueOf _2 )
# 899 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 125 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 907 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 126 "parser.mly"
                                                          ( ArrayLiteral _2 )
# 914 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 127 "parser.mly"
                                                          ( NewStruct (_2, [], _4) )
# 922 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 128 "parser.mly"
                                                          ( NewStruct (_2, _4, _7) )
# 931 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 129 "parser.mly"
                                                          ( StructLiteral _2 )
# 938 "parser.ml"
               : 'simple_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_value) in
    Obj.repr(
# 133 "parser.mly"
                ( _1 )
# 945 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 134 "parser.mly"
                                          ( Binary_op ("&&", _1, _3) )
# 953 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 135 "parser.mly"
                                          ( Binary_op ("||", _1, _3) )
# 961 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 136 "parser.mly"
                                    ( Binary_op ("=", _1, _3) )
# 969 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 137 "parser.mly"
                                    ( Binary_op ("!=", _1, _3) )
# 977 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 138 "parser.mly"
                                    ( Binary_op ("<=", _1, _3) )
# 985 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 139 "parser.mly"
                                    ( Binary_op ("<", _1, _3) )
# 993 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 140 "parser.mly"
                                    ( Binary_op (">=", _1, _3) )
# 1001 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 141 "parser.mly"
                                    ( Binary_op (">", _1, _3) )
# 1009 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 142 "parser.mly"
                                    ( Binary_op ("+", _1, _3) )
# 1017 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 143 "parser.mly"
                                    ( Binary_op ("*", _1, _3) )
# 1025 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 144 "parser.mly"
                                    ( Binary_op ("-", _1, _3) )
# 1033 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
                 ( [] )
# 1039 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 149 "parser.mly"
                 ( _1 )
# 1046 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 153 "parser.mly"
                                   ( [_1] )
# 1053 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 154 "parser.mly"
                                   ( _1 :: _3 )
# 1061 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
          ( raise_line_error "Error in arguments" (get_filename ()) (get_linenum ()) )
# 1067 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
                               ( [] )
# 1073 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 160 "parser.mly"
                               ( _1 :: _2 )
# 1081 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 164 "parser.mly"
                                                             ( Statement (_1, (get_filename ()), (get_linenum ())) )
# 1088 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 165 "parser.mly"
                                                             ( Declaration (_1, (get_filename ()), (get_linenum ())) )
# 1095 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 169 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 1103 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 170 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 1111 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 171 "parser.mly"
                                                  ( AssignDeclaration (false, Some _3, _1, _5) )
# 1120 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 172 "parser.mly"
                                                        ( AssignDeclaration (true, Some _4, _1, _6) )
# 1129 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 173 "parser.mly"
                                                    ( AssignDeclaration (false, None, _1, _4) )
# 1137 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 174 "parser.mly"
                                                    ( AssignDeclaration (true, None, _1, _5) )
# 1145 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 178 "parser.mly"
                                                      ( _1 )
# 1152 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 179 "parser.mly"
                                                  ( If (_3, _5, _7) )
# 1161 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 180 "parser.mly"
                                                  ( If (_3, _5, Block []) )
# 1169 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 181 "parser.mly"
                                                  ( While (_3, _5) )
# 1177 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 182 "parser.mly"
                                                  ( While (Value (Unary_op("!", _3)), _5) )
# 1185 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'non_control_flow_stmt) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 183 "parser.mly"
                                                                    ( Block([Declaration(_3, (get_filename ()), (get_linenum ())); Statement(While(_4, Block([Statement(_8, (get_filename ()), (get_linenum ())); Statement(_6, (get_filename ()), (get_linenum ()));])), (get_filename ()), (get_linenum ()));]) )
# 1195 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 184 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VariableAccess var_name), Value _3)), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Assign(VariableAccess(var_name), Value(Binary_op("+", Value(Int 1), Reference(VariableAccess var_name)))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1214 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 196 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, Some T_Int, limit_name, Value(ValueOf(_3))), (get_filename ()), (get_linenum ())); 
      Declaration(TypeDeclaration(false, T_Int, count_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VariableAccess count_name), Reference(VariableAccess limit_name))), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Assign(VariableAccess count_name, Value(Binary_op("+", Value(Int 1), Reference(VariableAccess count_name)))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1235 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "parser.mly"
                                                    ( Stop )
# 1241 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "parser.mly"
                                                     ( Halt )
# 1247 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parser.mly"
                                                 ( Break )
# 1253 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "parser.mly"
                                                   ( Continue )
# 1259 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_control_flow_stmt) in
    Obj.repr(
# 214 "parser.mly"
                               ( _1 )
# 1266 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 218 "parser.mly"
                                           ( Assign (_1, _3) )
# 1274 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 219 "parser.mly"
                                           ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 1282 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 220 "parser.mly"
                                           ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 1290 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 221 "parser.mly"
                                           ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 1298 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 222 "parser.mly"
                                           ( Assign (_1, Value(Unary_op("!", _4))) )
# 1306 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 223 "parser.mly"
                                                      ( Call (None, _1, [], _3) )
# 1314 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 224 "parser.mly"
                                                      ( Call (None, _1, _3, _6) )
# 1323 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 225 "parser.mly"
                                                       ( Call (Some(_1), _3, [], _5) )
# 1332 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 226 "parser.mly"
                                                       ( Call (Some(_1), _3, _5, _8) )
# 1342 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 227 "parser.mly"
                                              ( Print _2 )
# 1349 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "parser.mly"
                      ( [] )
# 1355 "parser.ml"
               : 'simple_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_params1) in
    Obj.repr(
# 232 "parser.mly"
                      ( _1 )
# 1362 "parser.ml"
               : 'simple_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_param) in
    Obj.repr(
# 236 "parser.mly"
                                         ( [_1] )
# 1369 "parser.ml"
               : 'simple_params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_params1) in
    Obj.repr(
# 237 "parser.mly"
                                         ( _1 :: _3 )
# 1377 "parser.ml"
               : 'simple_params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 241 "parser.mly"
                                           ( (true, _4, _1) )
# 1385 "parser.ml"
               : 'simple_param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 242 "parser.mly"
                                           ( (false, _3, _1) )
# 1393 "parser.ml"
               : 'simple_param))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "parser.mly"
               ( [] )
# 1399 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 247 "parser.mly"
               ( _1 )
# 1406 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 251 "parser.mly"
                           ( [_1] )
# 1413 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 252 "parser.mly"
                           ( _1 :: _3 )
# 1421 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 256 "parser.mly"
                                    ( (true, _4, _1) )
# 1429 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 257 "parser.mly"
                                    ( (false, _3, _1) )
# 1437 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
