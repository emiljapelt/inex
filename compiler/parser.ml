type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | ENTRY
  | NAME of (string)
  | MERGE
  | REFERENCE
  | AS
  | PATH of (string)
  | TYPE_VAR of (char)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | NULL
  | NEW
  | PRINT
  | HASH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number

  let get_filename () = ((symbol_start_pos ()).pos_fname)
  let get_linenum () = ((symbol_start_pos ()).pos_lnum)
# 77 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  265 (* ENTRY *);
  267 (* MERGE *);
  268 (* REFERENCE *);
  269 (* AS *);
  272 (* ASSIGNMENT *);
  273 (* LPAR *);
  274 (* RPAR *);
  275 (* LBRACE *);
  276 (* RBRACE *);
  277 (* LBRAKE *);
  278 (* RBRAKE *);
  279 (* STOP *);
  280 (* HALT *);
  281 (* PLUS *);
  282 (* MINUS *);
  283 (* TIMES *);
  284 (* EQ *);
  285 (* NEQ *);
  286 (* LT *);
  287 (* GT *);
  288 (* LTEQ *);
  289 (* GTEQ *);
  290 (* LOGIC_AND *);
  291 (* LOGIC_OR *);
  292 (* PIPE *);
  293 (* NOT *);
  294 (* VALUE *);
  295 (* COMMA *);
  296 (* DOT *);
  297 (* SEMI *);
  298 (* COLON *);
    0 (* EOF *);
  299 (* IF *);
  300 (* ELSE *);
  301 (* WHILE *);
  302 (* UNTIL *);
  303 (* FOR *);
  304 (* REPEAT *);
  305 (* BREAK *);
  306 (* CONTINUE *);
  307 (* LOCKED *);
  308 (* STRUCT *);
  309 (* NULL *);
  310 (* NEW *);
  311 (* PRINT *);
  312 (* HASH *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  266 (* NAME *);
  270 (* PATH *);
  271 (* TYPE_VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\007\000\007\000\
\009\000\009\000\011\000\011\000\011\000\011\000\010\000\010\000\
\010\000\010\000\010\000\006\000\013\000\013\000\013\000\014\000\
\014\000\014\000\014\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\016\000\016\000\017\000\017\000\017\000\
\012\000\012\000\018\000\018\000\004\000\004\000\004\000\004\000\
\004\000\004\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\008\000\
\008\000\021\000\021\000\022\000\022\000\005\000\005\000\023\000\
\023\000\024\000\024\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\009\000\006\000\009\000\
\006\000\009\000\006\000\009\000\003\000\005\000\001\000\003\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\003\000\
\001\000\004\000\001\000\003\000\001\000\001\000\003\000\001\000\
\003\000\004\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\002\000\002\000\005\000\003\000\
\005\000\008\000\003\000\000\000\001\000\001\000\003\000\001\000\
\000\000\002\000\001\000\001\000\004\000\005\000\006\000\007\000\
\005\000\006\000\001\000\007\000\005\000\005\000\005\000\008\000\
\005\000\005\000\002\000\002\000\002\000\002\000\002\000\003\000\
\004\000\004\000\004\000\004\000\004\000\007\000\002\000\000\000\
\001\000\001\000\003\000\004\000\003\000\000\000\001\000\001\000\
\003\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\019\000\020\000\021\000\
\000\000\027\000\000\000\000\000\000\000\023\000\013\000\000\000\
\000\000\000\000\000\000\000\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\000\000\000\000\000\000\
\037\000\036\000\038\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\061\000\000\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\073\000\000\000\
\000\000\000\000\000\000\070\000\000\000\024\000\014\000\000\000\
\000\000\000\000\000\000\000\000\005\000\105\000\016\000\000\000\
\007\000\000\000\000\000\101\000\009\000\099\000\000\000\026\000\
\000\000\031\000\000\000\059\000\056\000\052\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\033\000\074\000\000\000\
\071\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\075\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\100\000\000\000\018\000\063\000\000\000\000\000\000\000\034\000\
\072\000\000\000\000\000\000\000\083\000\084\000\000\000\000\000\
\000\000\000\000\000\000\085\000\086\000\095\000\028\000\000\000\
\000\000\000\000\000\000\000\000\066\000\087\000\000\000\000\000\
\000\000\057\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\008\000\010\000\000\000\012\000\
\093\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\000\000\082\000\081\000\058\000\000\000\000\000\
\000\000\094\000\076\000\000\000\080\000"

let yydgoto = "\002\000\
\010\000\011\000\012\000\013\000\044\000\185\000\048\000\052\000\
\093\000\094\000\038\000\186\000\097\000\072\000\073\000\098\000\
\099\000\188\000\189\000\190\000\053\000\054\000\045\000\046\000"

let yysindex = "\015\000\
\121\255\000\000\055\255\098\255\099\255\246\254\057\255\096\255\
\105\255\000\000\134\000\121\255\000\000\155\255\182\255\201\255\
\025\255\094\255\128\255\211\255\000\000\000\000\135\255\144\255\
\135\255\144\255\152\255\144\255\000\000\000\000\000\000\000\000\
\133\255\000\000\200\255\209\001\037\255\000\000\000\000\156\255\
\135\255\144\255\125\255\150\255\000\000\130\255\131\255\140\255\
\160\255\165\255\132\255\179\255\000\000\159\255\169\255\216\001\
\000\000\000\000\000\000\000\000\200\255\101\255\101\255\200\255\
\255\254\200\255\255\254\000\000\228\001\216\001\022\000\022\255\
\000\000\200\255\056\255\200\255\198\255\000\000\163\255\188\255\
\192\255\044\255\206\255\135\255\144\255\205\255\206\255\210\255\
\024\255\206\255\152\255\215\255\216\255\078\255\057\001\000\000\
\219\001\222\255\000\000\227\255\046\255\143\255\000\000\022\255\
\241\255\230\255\231\255\200\255\200\255\200\255\200\255\200\255\
\200\255\200\255\200\255\200\255\200\255\200\255\000\000\200\255\
\240\255\122\001\200\255\000\000\139\001\000\000\000\000\221\255\
\247\255\216\001\231\255\236\255\000\000\000\000\000\000\135\255\
\000\000\135\255\070\001\000\000\000\000\000\000\152\255\000\000\
\216\001\000\000\101\255\000\000\000\000\000\000\101\255\216\001\
\139\255\046\255\046\255\000\000\036\002\036\002\075\000\075\000\
\075\000\075\000\000\000\046\255\234\001\000\000\000\000\156\001\
\000\000\000\000\135\255\231\255\077\255\235\255\237\255\255\255\
\004\000\007\000\017\000\019\000\002\000\005\000\101\255\000\000\
\000\000\012\000\208\255\236\255\000\000\018\000\239\255\043\000\
\000\000\047\000\000\000\000\000\054\000\029\000\248\001\000\000\
\000\000\062\000\101\255\216\001\000\000\000\000\200\255\200\255\
\200\255\071\000\200\255\000\000\000\000\000\000\000\000\200\255\
\077\000\079\000\081\000\090\000\000\000\000\000\206\255\206\255\
\206\255\000\000\070\000\000\000\066\000\093\000\082\000\075\001\
\093\001\111\001\200\255\003\002\103\255\099\000\003\002\200\255\
\200\255\200\255\200\255\000\000\000\000\000\000\101\255\000\000\
\000\000\091\000\021\000\021\000\021\000\173\001\021\000\021\000\
\003\002\003\002\003\002\003\002\113\000\101\255\244\255\092\000\
\000\000\000\000\050\255\000\000\000\000\000\000\131\000\021\000\
\136\000\000\000\000\000\021\000\000\000"

let yyrindex = "\000\000\
\167\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\167\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\154\000\000\000\
\154\000\000\000\157\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\154\000\000\000\000\000\000\000\000\000\164\000\159\000\000\000\
\000\000\000\000\000\000\000\000\000\000\167\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\173\000\178\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\094\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\172\000\000\000\000\000\
\001\255\000\000\000\000\000\000\148\000\000\000\000\000\112\000\
\187\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\255\191\000\000\000\000\000\000\000\154\000\
\000\000\154\000\000\000\000\000\000\000\000\000\157\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\
\000\000\166\000\184\000\000\000\026\001\040\001\218\000\234\000\
\250\000\010\001\000\000\202\000\000\000\000\000\000\000\000\000\
\000\000\000\000\154\000\061\255\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\191\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\205\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\002\025\002\251\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\255\033\255\095\255\107\255\000\000\200\000\078\000\220\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\217\001\000\000\138\255\232\255\184\255\234\255\078\001\
\116\255\242\255\174\255\051\001\229\255\191\255\031\001\203\255\
\142\255\000\000\042\000\233\000\154\001\000\000\169\001\000\000"

let yytablesize = 839
let yytable = "\102\000\
\049\000\104\000\037\000\050\000\195\000\055\000\140\000\071\000\
\060\000\100\000\133\000\198\000\088\000\184\000\137\000\001\000\
\080\000\141\000\062\000\081\000\062\000\075\000\062\000\029\000\
\029\000\030\000\030\000\031\000\031\000\032\000\032\000\017\000\
\196\000\095\000\033\000\088\000\101\000\089\000\103\000\034\000\
\035\000\062\000\120\000\029\000\107\000\030\000\122\000\031\000\
\125\000\032\000\090\000\068\000\076\000\033\000\106\000\107\000\
\193\000\077\000\034\000\007\001\089\000\121\000\135\000\231\000\
\014\000\107\000\187\000\131\000\214\000\184\000\018\000\123\000\
\110\000\090\000\139\000\036\000\077\000\078\000\106\000\117\000\
\154\000\155\000\156\000\157\000\158\000\159\000\160\000\161\000\
\162\000\163\000\164\000\235\000\165\000\203\000\130\000\168\000\
\124\000\197\000\077\000\106\000\096\000\057\000\068\000\058\000\
\183\000\059\000\204\000\015\000\016\000\019\000\060\000\191\000\
\091\000\192\000\020\000\172\000\145\000\061\000\017\000\062\000\
\255\000\063\000\187\000\120\000\092\000\199\000\064\000\003\000\
\004\000\005\000\006\000\007\000\008\000\021\000\039\000\091\000\
\065\000\066\000\067\000\057\000\040\000\058\000\121\000\059\000\
\043\000\237\000\202\000\092\000\060\000\230\000\244\000\245\000\
\246\000\068\000\069\000\061\000\070\000\062\000\047\000\063\000\
\126\000\051\000\056\000\120\000\064\000\079\000\082\000\083\000\
\084\000\085\000\086\000\023\000\009\000\089\000\065\000\066\000\
\067\000\087\000\150\000\232\000\233\000\234\000\121\000\236\000\
\024\000\187\000\187\000\187\000\239\000\187\000\187\000\068\000\
\069\000\005\001\070\000\088\000\090\000\091\000\025\000\092\000\
\057\000\187\000\058\000\127\000\059\000\128\000\187\000\254\000\
\015\001\060\000\187\000\026\000\001\001\002\001\003\001\004\001\
\061\000\027\000\062\000\126\000\063\000\136\000\129\000\216\000\
\132\000\064\000\138\000\041\000\120\000\077\000\028\000\143\000\
\217\000\218\000\219\000\065\000\066\000\067\000\077\000\077\000\
\042\000\148\000\077\000\077\000\220\000\173\000\144\000\121\000\
\149\000\166\000\153\000\077\000\068\000\069\000\132\000\070\000\
\223\000\151\000\174\000\175\000\203\000\170\000\077\000\171\000\
\077\000\077\000\077\000\077\000\077\000\077\000\152\000\207\000\
\077\000\204\000\077\000\205\000\208\000\206\000\176\000\209\000\
\177\000\178\000\179\000\180\000\181\000\182\000\007\001\215\000\
\068\000\210\000\183\000\211\000\008\001\009\001\010\001\132\000\
\012\001\013\001\212\000\174\000\175\000\213\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\019\001\222\000\227\000\224\000\021\001\119\000\176\000\
\225\000\177\000\178\000\179\000\180\000\181\000\182\000\226\000\
\025\000\068\000\025\000\183\000\025\000\025\000\025\000\229\000\
\006\000\025\000\025\000\025\000\025\000\025\000\247\000\025\000\
\025\000\025\000\025\000\025\000\240\000\032\000\241\000\025\000\
\242\000\025\000\032\000\108\000\109\000\110\000\032\000\032\000\
\032\000\243\000\248\000\006\001\117\000\118\000\249\000\029\000\
\250\000\029\000\032\000\029\000\000\001\032\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\054\000\014\001\054\000\029\000\054\000\029\000\016\001\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\053\000\018\001\053\000\054\000\053\000\
\054\000\020\001\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\050\000\002\000\050\000\
\053\000\050\000\053\000\102\000\050\000\050\000\096\000\050\000\
\050\000\050\000\050\000\050\000\050\000\104\000\050\000\047\000\
\098\000\047\000\050\000\047\000\050\000\015\000\047\000\047\000\
\060\000\047\000\047\000\047\000\047\000\047\000\047\000\060\000\
\047\000\049\000\017\000\049\000\047\000\049\000\047\000\025\000\
\049\000\049\000\065\000\049\000\049\000\049\000\049\000\049\000\
\049\000\060\000\049\000\040\000\194\000\040\000\049\000\040\000\
\049\000\026\000\040\000\040\000\022\000\040\000\040\000\040\000\
\040\000\040\000\040\000\044\000\040\000\044\000\221\000\044\000\
\040\000\238\000\040\000\017\001\142\000\044\000\044\000\044\000\
\044\000\044\000\044\000\046\000\134\000\046\000\000\000\046\000\
\044\000\000\000\044\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\043\000\000\000\043\000\000\000\043\000\
\046\000\000\000\046\000\000\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\045\000\000\000\045\000\000\000\045\000\
\043\000\000\000\043\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\041\000\000\000\041\000\000\000\041\000\
\045\000\000\000\045\000\000\000\000\000\041\000\041\000\000\000\
\000\000\042\000\000\000\042\000\000\000\042\000\000\000\000\000\
\041\000\000\000\041\000\042\000\042\000\029\000\000\000\030\000\
\000\000\031\000\146\000\032\000\000\000\000\000\042\000\000\000\
\042\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\251\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\252\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\253\000\000\000\000\000\000\000\000\000\000\000\000\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\000\000\000\000\000\000\
\000\000\000\000\167\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\000\000\000\000\
\000\000\000\000\000\000\169\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\000\000\
\000\000\000\000\000\000\000\000\201\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\029\000\000\000\030\000\000\000\031\000\011\001\032\000\029\000\
\000\000\030\000\033\000\031\000\000\000\032\000\000\000\034\000\
\074\000\033\000\000\000\029\000\000\000\030\000\034\000\031\000\
\000\000\032\000\000\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\034\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\000\000\200\000\
\000\000\147\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\228\000\000\000\000\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\108\000\109\000\110\000\000\000\
\000\000\113\000\114\000\115\000\116\000\117\000\118\000"

let yycheck = "\065\000\
\025\000\067\000\017\000\026\000\145\000\028\000\089\000\035\000\
\010\001\063\000\083\000\152\000\018\001\132\000\087\000\001\000\
\041\000\090\000\018\001\042\000\020\001\036\000\022\001\000\001\
\000\001\002\001\002\001\004\001\004\001\006\001\006\001\042\001\
\147\000\061\000\010\001\041\001\064\000\018\001\066\000\015\001\
\016\001\041\001\021\001\000\001\018\001\002\001\074\000\004\001\
\076\000\006\001\018\001\053\001\016\001\010\001\069\000\070\000\
\139\000\021\001\015\001\010\001\041\001\040\001\085\000\204\000\
\010\001\039\001\132\000\082\000\183\000\188\000\014\001\016\001\
\027\001\041\001\051\001\051\001\021\001\041\001\018\001\034\001\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\210\000\120\000\017\001\051\001\123\000\
\041\001\151\000\021\001\039\001\000\001\001\001\053\001\003\001\
\055\001\005\001\030\001\010\001\010\001\014\001\010\001\136\000\
\018\001\138\000\010\001\130\000\039\001\017\001\042\001\019\001\
\018\001\021\001\188\000\021\001\018\001\153\000\026\001\007\001\
\008\001\009\001\010\001\011\001\012\001\000\000\041\001\041\001\
\036\001\037\001\038\001\001\001\013\001\003\001\040\001\005\001\
\010\001\211\000\171\000\041\001\010\001\203\000\223\000\224\000\
\225\000\053\001\054\001\017\001\056\001\019\001\015\001\021\001\
\022\001\010\001\030\001\021\001\026\001\010\001\042\001\018\001\
\039\001\039\001\031\001\017\001\052\001\042\001\036\001\037\001\
\038\001\018\001\036\001\207\000\208\000\209\000\040\001\211\000\
\030\001\251\000\252\000\253\000\216\000\255\000\000\001\053\001\
\054\001\247\000\056\001\031\001\018\001\039\001\017\001\031\001\
\001\001\011\001\003\001\041\001\005\001\018\001\016\001\235\000\
\006\001\010\001\020\001\030\001\240\000\241\000\242\000\243\000\
\017\001\017\001\019\001\022\001\021\001\017\001\031\001\016\001\
\019\001\026\001\017\001\017\001\021\001\010\001\030\001\017\001\
\025\001\026\001\027\001\036\001\037\001\038\001\019\001\020\001\
\030\001\020\001\023\001\024\001\037\001\010\001\031\001\040\001\
\022\001\010\001\021\001\021\001\053\001\054\001\019\001\056\001\
\018\001\017\001\023\001\024\001\017\001\041\001\043\001\017\001\
\045\001\046\001\047\001\048\001\049\001\050\001\030\001\017\001\
\053\001\030\001\055\001\041\001\017\001\041\001\043\001\017\001\
\045\001\046\001\047\001\048\001\049\001\050\001\010\001\020\001\
\053\001\017\001\055\001\017\001\251\000\252\000\253\000\019\001\
\255\000\000\001\041\001\023\001\024\001\041\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\016\001\041\001\031\001\018\001\020\001\041\001\043\001\
\018\001\045\001\046\001\047\001\048\001\049\001\050\001\018\001\
\016\001\053\001\018\001\055\001\020\001\021\001\022\001\018\001\
\010\001\025\001\026\001\027\001\028\001\029\001\017\001\031\001\
\032\001\033\001\034\001\035\001\016\001\016\001\016\001\039\001\
\016\001\041\001\021\001\025\001\026\001\027\001\025\001\026\001\
\027\001\016\001\041\001\017\001\034\001\035\001\018\001\018\001\
\031\001\020\001\037\001\022\001\018\001\040\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\018\001\018\001\020\001\039\001\022\001\041\001\044\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\018\001\018\001\020\001\039\001\022\001\
\041\001\018\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\018\001\000\000\020\001\
\039\001\022\001\041\001\018\001\025\001\026\001\018\001\028\001\
\029\001\030\001\031\001\032\001\033\001\018\001\035\001\018\001\
\018\001\020\001\039\001\022\001\041\001\031\001\025\001\026\001\
\020\001\028\001\029\001\030\001\031\001\032\001\033\001\022\001\
\035\001\018\001\031\001\020\001\039\001\022\001\041\001\021\001\
\025\001\026\001\020\001\028\001\029\001\030\001\031\001\032\001\
\033\001\018\001\035\001\018\001\143\000\020\001\039\001\022\001\
\041\001\021\001\025\001\026\001\012\000\028\001\029\001\030\001\
\031\001\032\001\033\001\018\001\035\001\020\001\188\000\022\001\
\039\001\211\000\041\001\011\001\091\000\028\001\029\001\030\001\
\031\001\032\001\033\001\018\001\084\000\020\001\255\255\022\001\
\039\001\255\255\041\001\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\018\001\255\255\020\001\255\255\022\001\
\039\001\255\255\041\001\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\018\001\255\255\020\001\255\255\022\001\
\039\001\255\255\041\001\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\018\001\255\255\020\001\255\255\022\001\
\039\001\255\255\041\001\255\255\255\255\028\001\029\001\255\255\
\255\255\018\001\255\255\020\001\255\255\022\001\255\255\255\255\
\039\001\255\255\041\001\028\001\029\001\000\001\255\255\002\001\
\255\255\004\001\018\001\006\001\255\255\255\255\039\001\255\255\
\041\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\041\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\041\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\041\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\000\001\255\255\002\001\255\255\004\001\041\001\006\001\000\001\
\255\255\002\001\010\001\004\001\255\255\006\001\255\255\015\001\
\016\001\010\001\255\255\000\001\255\255\002\001\015\001\004\001\
\255\255\006\001\255\255\255\255\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\022\001\
\255\255\039\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\022\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\025\001\026\001\027\001\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  ENTRY\000\
  MERGE\000\
  REFERENCE\000\
  AS\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  HASH\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  PATH\000\
  TYPE_VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 52 "parser.mly"
                  ( Topdecs _1 )
# 579 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                        ( [] )
# 585 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 57 "parser.mly"
                        ( _1 :: _2 )
# 593 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 61 "parser.mly"
        ( GlobalDeclaration _1 )
# 600 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 62 "parser.mly"
                                                            ( Routine (Internal, _2, [], _4, _6) )
# 609 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 63 "parser.mly"
                                                            ( Routine (Internal, _2, _4, _7, _9) )
# 619 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 64 "parser.mly"
                                                            ( Routine (External, _2, [], _4, _6) )
# 628 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 65 "parser.mly"
                                                            ( Routine (External, _2, _4, _7, _9) )
# 638 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'simple_params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 66 "parser.mly"
                                                            ( Routine (Entry, _2, [], _4, _6) )
# 647 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'simple_params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 67 "parser.mly"
                                                            ( raise_line_error "Entrypoints cannot be generic" (get_filename ()) (get_linenum ()) )
# 657 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 68 "parser.mly"
                                                            ( Struct (_2, [], _4) )
# 665 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 69 "parser.mly"
                                                            ( Struct (_2, _4, _7) )
# 674 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
                                                            ( Merge _2 )
# 681 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 71 "parser.mly"
                                                            ( FileReference(_4, _2) )
# 689 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 75 "parser.mly"
                            ( [_1] )
# 696 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : char) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_vars) in
    Obj.repr(
# 76 "parser.mly"
                            ( _1 :: _3 )
# 704 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 80 "parser.mly"
                        ( [_1] )
# 711 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_args) in
    Obj.repr(
# 81 "parser.mly"
                        ( _1 :: _3 )
# 719 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                        ( T_Int )
# 725 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                        ( T_Bool )
# 731 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                        ( T_Char )
# 737 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
          ( raise_line_error "Entrypoints can only take simple types as arguments" (get_filename ()) (get_linenum ()) )
# 743 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 92 "parser.mly"
                        ( _1 )
# 750 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 93 "parser.mly"
                        ( T_Array _1 )
# 757 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                        ( T_Struct (_1, []) )
# 764 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_args) in
    Obj.repr(
# 95 "parser.mly"
                        ( T_Struct (_1, _3) )
# 772 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 96 "parser.mly"
                        ( T_Generic _1 )
# 779 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 100 "parser.mly"
                                ( Block _2 )
# 786 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 104 "parser.mly"
                                                  ( Reference _1 )
# 793 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 105 "parser.mly"
                                                  ( Value _1 )
# 800 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 106 "parser.mly"
                                                  ( _2 )
# 807 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                                                      ( VariableAccess _1 )
# 814 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
                                                      ( StructAccess (_1, _3) )
# 822 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 112 "parser.mly"
                                                      ( ArrayAccess (_1, _3) )
# 830 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                                                      ( Null )
# 836 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 117 "parser.mly"
              ( Bool _1 )
# 843 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 118 "parser.mly"
              ( Int _1 )
# 850 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 119 "parser.mly"
              ( Char _1 )
# 857 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 120 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 865 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 121 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 873 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 122 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 881 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 123 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 889 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 124 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 897 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 125 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 905 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 126 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 913 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 127 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 921 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 128 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 929 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 129 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 937 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 130 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 945 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 131 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 952 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 132 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 959 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 133 "parser.mly"
                                                          ( ArraySize _2 )
# 966 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 134 "parser.mly"
                                                          ( GetInput _2 )
# 973 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 135 "parser.mly"
                                                          ( ValueOf _2 )
# 980 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 136 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 988 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 137 "parser.mly"
                                                          ( ArrayLiteral _2 )
# 995 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 138 "parser.mly"
                                                          ( NewStruct (_2, [], _4) )
# 1003 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 139 "parser.mly"
                                                          ( NewStruct (_2, _4, _7) )
# 1012 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 140 "parser.mly"
                                                          ( StructLiteral _2 )
# 1019 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
                 ( [] )
# 1025 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 145 "parser.mly"
                 ( _1 )
# 1032 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 149 "parser.mly"
                                              ( [_1] )
# 1039 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 150 "parser.mly"
                                              ( _1 :: _3 )
# 1047 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
          ( raise_line_error "Error in arguments" (get_filename ()) (get_linenum ()) )
# 1053 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                               ( [] )
# 1059 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 156 "parser.mly"
                               ( _1 :: _2 )
# 1067 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 160 "parser.mly"
                                                             ( Statement (_1, (get_filename ()), (get_linenum ())) )
# 1074 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 161 "parser.mly"
                                                             ( Declaration (_1, (get_filename ()), (get_linenum ())) )
# 1081 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 165 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 1089 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 166 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 1097 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 167 "parser.mly"
                                                             ( AssignDeclaration (false, Some _3, _1, _5) )
# 1106 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 168 "parser.mly"
                                                                   ( AssignDeclaration (true, Some _4, _1, _6) )
# 1115 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 169 "parser.mly"
                                                               ( AssignDeclaration (false, None, _1, _4) )
# 1123 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 170 "parser.mly"
                                                               ( AssignDeclaration (true, None, _1, _5) )
# 1131 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 174 "parser.mly"
                                                      ( _1 )
# 1138 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 175 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1147 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 176 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1155 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 177 "parser.mly"
                                                             ( While (_3, _5) )
# 1163 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 178 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1171 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'non_control_flow_stmt) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 179 "parser.mly"
                                                                               ( Block([Declaration(_3, (get_filename ()), (get_linenum ())); Statement(While(_4, Block([Statement(_8, (get_filename ()), (get_linenum ())); Statement(_6, (get_filename ()), (get_linenum ()));])), (get_filename ()), (get_linenum ()));]) )
# 1181 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 180 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VariableAccess var_name), Value _3)), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Assign(VariableAccess(var_name), Value(Binary_op("+", Value(Int 1), Reference(VariableAccess var_name)))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1200 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 192 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, Some T_Int, limit_name, Value(ValueOf(_3))), (get_filename ()), (get_linenum ())); 
      Declaration(TypeDeclaration(false, T_Int, count_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VariableAccess count_name), Reference(VariableAccess limit_name))), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Assign(VariableAccess count_name, Value(Binary_op("+", Value(Int 1), Reference(VariableAccess count_name)))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1221 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parser.mly"
                                                    ( Stop )
# 1227 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 207 "parser.mly"
                                                     ( Halt )
# 1233 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "parser.mly"
                                                 ( Break )
# 1239 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "parser.mly"
                                                   ( Continue )
# 1245 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_control_flow_stmt) in
    Obj.repr(
# 210 "parser.mly"
                               ( _1 )
# 1252 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 214 "parser.mly"
                                                      ( Assign (_1, _3) )
# 1260 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 215 "parser.mly"
                                                      ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 1268 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 216 "parser.mly"
                                                      ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 1276 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 217 "parser.mly"
                                                      ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 1284 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 218 "parser.mly"
                                                      ( Assign (_1, Value(Unary_op("!", _4))) )
# 1292 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 219 "parser.mly"
                                                ( Call (_1, [], _3) )
# 1300 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 220 "parser.mly"
                                                ( Call (_1, _3, _6) )
# 1309 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 221 "parser.mly"
                                              ( Print _2 )
# 1316 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "parser.mly"
                      ( [] )
# 1322 "parser.ml"
               : 'simple_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_params1) in
    Obj.repr(
# 226 "parser.mly"
                      ( _1 )
# 1329 "parser.ml"
               : 'simple_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_param) in
    Obj.repr(
# 230 "parser.mly"
                                         ( [_1] )
# 1336 "parser.ml"
               : 'simple_params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_params1) in
    Obj.repr(
# 231 "parser.mly"
                                         ( _1 :: _3 )
# 1344 "parser.ml"
               : 'simple_params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 235 "parser.mly"
                                           ( (true, _4, _1) )
# 1352 "parser.ml"
               : 'simple_param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 236 "parser.mly"
                                           ( (false, _3, _1) )
# 1360 "parser.ml"
               : 'simple_param))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "parser.mly"
               ( [] )
# 1366 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 241 "parser.mly"
               ( _1 )
# 1373 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 245 "parser.mly"
                           ( [_1] )
# 1380 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 246 "parser.mly"
                           ( _1 :: _3 )
# 1388 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 251 "parser.mly"
                                    ( (true, _4, _1) )
# 1396 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 252 "parser.mly"
                                    ( (false, _3, _1) )
# 1404 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
