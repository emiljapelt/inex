type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | TYPE_VAR of (char)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | VAR
  | NULL
  | NEW
  | PRINT
  | HASH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number
# 70 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  267 (* ASSIGNMENT *);
  268 (* LPAR *);
  269 (* RPAR *);
  270 (* LBRACE *);
  271 (* RBRACE *);
  272 (* LBRAKE *);
  273 (* RBRAKE *);
  274 (* STOP *);
  275 (* HALT *);
  276 (* PLUS *);
  277 (* MINUS *);
  278 (* TIMES *);
  279 (* EQ *);
  280 (* NEQ *);
  281 (* LT *);
  282 (* GT *);
  283 (* LTEQ *);
  284 (* GTEQ *);
  285 (* LOGIC_AND *);
  286 (* LOGIC_OR *);
  287 (* PIPE *);
  288 (* NOT *);
  289 (* VALUE *);
  290 (* COMMA *);
  291 (* DOT *);
  292 (* SEMI *);
  293 (* COLON *);
    0 (* EOF *);
  294 (* IF *);
  295 (* ELSE *);
  296 (* WHILE *);
  297 (* UNTIL *);
  298 (* FOR *);
  299 (* REPEAT *);
  300 (* BREAK *);
  301 (* CONTINUE *);
  302 (* LOCKED *);
  303 (* STRUCT *);
  304 (* VAR *);
  305 (* NULL *);
  306 (* NEW *);
  307 (* PRINT *);
  308 (* HASH *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  265 (* NAME *);
  266 (* TYPE_VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\007\000\007\000\008\000\008\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\006\000\011\000\011\000\011\000\012\000\
\012\000\012\000\012\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\014\000\014\000\016\000\
\016\000\016\000\010\000\010\000\017\000\017\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\005\000\
\005\000\019\000\019\000\019\000\020\000\020\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\006\000\006\000\009\000\
\001\000\003\000\001\000\003\000\001\000\001\000\001\000\003\000\
\001\000\004\000\001\000\003\000\001\000\001\000\003\000\001\000\
\003\000\004\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\002\000\002\000\005\000\003\000\
\005\000\008\000\003\000\004\000\004\000\004\000\004\000\004\000\
\001\000\001\000\001\000\001\000\002\000\000\000\001\000\001\000\
\003\000\001\000\000\000\002\000\001\000\001\000\004\000\005\000\
\006\000\007\000\006\000\007\000\005\000\006\000\002\000\001\000\
\007\000\005\000\005\000\005\000\008\000\005\000\005\000\000\000\
\001\000\001\000\003\000\001\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\095\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\001\000\003\000\
\000\000\000\000\013\000\014\000\015\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\092\000\000\000\000\000\
\089\000\000\000\000\000\000\000\029\000\028\000\030\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\063\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\000\000\000\000\000\000\000\000\
\000\000\072\000\000\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\091\000\006\000\018\000\000\000\
\023\000\000\000\048\000\044\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\025\000\078\000\000\000\000\000\075\000\
\073\000\007\000\010\000\000\000\000\000\000\000\057\000\058\000\
\000\000\000\000\000\000\000\000\000\000\059\000\060\000\000\000\
\070\000\080\000\000\000\000\000\000\000\000\000\069\000\012\000\
\065\000\000\000\000\000\000\000\026\000\076\000\074\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\020\000\
\000\000\000\000\000\000\000\000\000\000\079\000\068\000\049\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\056\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\084\000\000\000\087\000\086\000\050\000\000\000\000\000\
\081\000\000\000\085\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\032\000\154\000\062\000\067\000\
\068\000\155\000\071\000\051\000\052\000\072\000\157\000\073\000\
\158\000\159\000\033\000\034\000"

let yysindex = "\072\000\
\001\255\000\000\067\255\100\255\076\255\123\255\000\000\133\000\
\001\255\000\000\124\255\125\255\012\255\050\255\000\000\000\000\
\101\255\101\255\000\000\000\000\000\000\116\255\000\000\171\255\
\022\255\132\255\014\255\101\255\136\255\000\000\111\255\138\255\
\000\000\120\255\139\255\004\000\000\000\000\000\000\000\000\000\
\171\255\095\255\171\255\252\254\171\255\252\254\000\000\017\001\
\004\000\076\001\011\255\000\000\171\255\144\255\086\255\171\255\
\171\255\146\255\000\000\156\255\122\255\131\255\062\255\157\255\
\101\255\157\255\151\255\013\255\011\001\000\000\195\001\161\255\
\000\000\113\255\089\255\000\000\011\255\106\255\165\255\170\255\
\171\255\171\255\171\255\171\255\171\255\171\255\171\255\171\255\
\171\255\171\255\171\255\000\000\171\255\181\255\093\001\171\255\
\171\255\000\000\110\001\127\001\000\000\162\255\136\255\188\255\
\004\000\170\255\233\255\000\000\000\000\000\000\000\000\004\000\
\000\000\095\255\000\000\000\000\095\255\004\000\196\255\113\255\
\113\255\000\000\012\002\012\002\023\002\023\002\023\002\023\002\
\000\000\113\255\210\001\000\000\000\000\144\001\161\001\000\000\
\000\000\000\000\000\000\101\255\170\255\003\255\000\000\000\000\
\194\255\195\255\197\255\198\255\199\255\000\000\000\000\095\255\
\000\000\000\000\207\255\118\255\190\255\233\255\000\000\000\000\
\000\000\211\255\206\255\224\001\000\000\000\000\000\000\224\255\
\095\255\171\255\171\255\171\255\229\255\171\255\000\000\000\000\
\171\255\228\255\230\255\232\255\238\255\000\000\000\000\000\000\
\241\255\000\000\204\255\231\255\029\001\047\001\065\001\171\255\
\235\001\090\255\237\255\235\001\171\255\171\255\171\255\171\255\
\095\255\000\000\000\000\015\000\015\000\015\000\178\001\015\000\
\015\000\235\001\235\001\235\001\235\001\242\255\251\255\240\255\
\000\000\000\000\140\255\000\000\000\000\000\000\015\000\255\255\
\000\000\015\000\000\000"

let yyrindex = "\000\000\
\016\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\012\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\255\000\000\
\000\000\124\000\000\000\000\000\088\000\033\000\000\000\106\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\255\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\142\000\
\160\000\000\000\242\000\250\000\018\000\194\000\210\000\226\000\
\000\000\178\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\078\255\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\246\001\001\002\255\254\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\255\038\255\054\255\081\255\000\000\016\000\216\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\058\001\000\000\152\255\239\255\055\000\223\000\203\255\
\250\255\169\000\252\255\212\255\159\000\143\255\121\000\148\255\
\000\000\010\000\020\001\000\000"

let yytablesize = 821
let yytable = "\075\000\
\035\000\077\000\153\000\162\000\040\000\161\000\027\000\003\000\
\004\000\005\000\060\000\051\000\064\000\019\000\169\000\020\000\
\064\000\021\000\055\000\050\000\022\000\023\000\024\000\019\000\
\057\000\020\000\093\000\021\000\058\000\058\000\022\000\023\000\
\053\000\094\000\051\000\064\000\069\000\052\000\074\000\013\000\
\076\000\079\000\080\000\175\000\047\000\094\000\112\000\006\000\
\095\000\059\000\053\000\099\000\100\000\153\000\094\000\188\000\
\106\000\025\000\160\000\026\000\052\000\028\000\156\000\019\000\
\163\000\020\000\054\000\021\000\192\000\054\000\022\000\023\000\
\001\000\053\000\029\000\011\000\120\000\121\000\122\000\123\000\
\124\000\125\000\126\000\127\000\128\000\129\000\130\000\214\000\
\131\000\054\000\093\000\134\000\135\000\055\000\070\000\037\000\
\097\000\038\000\141\000\039\000\030\000\058\000\208\000\040\000\
\093\000\093\000\041\000\105\000\012\000\031\000\042\000\093\000\
\013\000\156\000\164\000\043\000\055\000\117\000\108\000\116\000\
\110\000\098\000\168\000\094\000\094\000\044\000\045\000\046\000\
\177\000\194\000\118\000\014\000\015\000\093\000\083\000\017\000\
\018\000\178\000\179\000\180\000\036\000\090\000\056\000\047\000\
\048\000\061\000\049\000\063\000\215\000\181\000\064\000\066\000\
\094\000\065\000\096\000\103\000\104\000\143\000\144\000\156\000\
\156\000\156\000\101\000\156\000\156\000\189\000\190\000\191\000\
\102\000\193\000\107\000\037\000\196\000\038\000\156\000\039\000\
\111\000\115\000\156\000\040\000\119\000\156\000\041\000\150\000\
\151\000\058\000\042\000\207\000\047\000\132\000\152\000\043\000\
\210\000\211\000\212\000\213\000\037\000\138\000\038\000\140\000\
\039\000\044\000\045\000\046\000\040\000\170\000\171\000\041\000\
\172\000\173\000\174\000\042\000\101\000\216\000\217\000\218\000\
\043\000\220\000\221\000\047\000\048\000\176\000\049\000\184\000\
\082\000\182\000\044\000\045\000\046\000\082\000\082\000\185\000\
\225\000\082\000\082\000\227\000\187\000\005\000\197\000\202\000\
\198\000\142\000\199\000\203\000\047\000\048\000\107\000\049\000\
\200\000\209\000\143\000\144\000\201\000\082\000\222\000\082\000\
\082\000\082\000\082\000\082\000\082\000\019\000\169\000\020\000\
\082\000\021\000\082\000\226\000\022\000\023\000\145\000\002\000\
\146\000\147\000\148\000\149\000\150\000\151\000\223\000\215\000\
\088\000\047\000\024\000\152\000\107\000\090\000\036\000\024\000\
\143\000\144\000\036\000\024\000\024\000\024\000\062\000\009\000\
\036\000\036\000\036\000\036\000\036\000\036\000\011\000\024\000\
\017\000\067\000\024\000\036\000\145\000\036\000\146\000\147\000\
\148\000\149\000\150\000\151\000\062\000\018\000\017\000\047\000\
\017\000\152\000\016\000\017\000\017\000\139\000\183\000\017\000\
\017\000\017\000\017\000\017\000\195\000\017\000\017\000\017\000\
\017\000\017\000\021\000\224\000\109\000\017\000\021\000\017\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\046\000\000\000\000\000\021\000\
\046\000\021\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\045\000\000\000\
\000\000\046\000\045\000\046\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\042\000\000\000\000\000\045\000\042\000\045\000\000\000\042\000\
\042\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\042\000\039\000\000\000\000\000\042\000\039\000\042\000\
\000\000\039\000\039\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\039\000\041\000\000\000\000\000\039\000\
\041\000\039\000\000\000\041\000\041\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\041\000\032\000\000\000\
\000\000\041\000\032\000\041\000\000\000\032\000\032\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\038\000\032\000\
\000\000\000\000\038\000\032\000\000\000\032\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\035\000\000\000\
\000\000\000\000\035\000\038\000\000\000\038\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\037\000\000\000\
\000\000\000\000\037\000\035\000\000\000\035\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\033\000\000\000\
\000\000\000\000\033\000\037\000\000\000\037\000\034\000\000\000\
\033\000\033\000\034\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\019\000\033\000\020\000\033\000\021\000\113\000\
\000\000\078\000\023\000\034\000\000\000\034\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\205\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\206\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\000\000\000\000\000\000\000\000\000\000\092\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\000\000\000\000\000\000\000\000\000\000\
\133\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\000\000\000\000\000\000\000\000\
\000\000\136\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\000\000\000\000\000\000\
\000\000\000\000\137\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\000\000\000\000\
\000\000\000\000\000\000\166\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\000\000\
\000\000\000\000\000\000\000\000\167\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\000\000\000\000\000\000\000\000\000\000\219\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\000\000\165\000\000\000\114\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\186\000\000\000\000\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\081\000\
\082\000\083\000\000\000\000\000\086\000\087\000\088\000\089\000\
\090\000\091\000\081\000\082\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\000\091\000"

let yycheck = "\044\000\
\018\000\046\000\107\000\117\000\009\001\114\000\013\000\007\001\
\008\001\009\001\028\000\013\001\013\001\002\001\012\001\004\001\
\017\001\006\001\025\000\024\000\009\001\010\001\011\001\002\001\
\011\001\004\001\016\001\006\001\016\001\016\001\009\001\010\001\
\011\001\013\001\036\001\036\001\041\000\013\001\043\000\037\001\
\045\000\048\000\049\000\152\000\049\001\035\001\034\001\047\001\
\053\000\036\001\013\001\056\000\057\000\158\000\034\001\169\000\
\063\000\046\001\112\000\048\001\036\001\012\001\107\000\002\001\
\118\000\004\001\013\001\006\001\173\000\048\001\009\001\010\001\
\001\000\036\001\025\001\009\001\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\201\000\
\093\000\036\001\013\001\096\000\097\000\013\001\000\001\001\001\
\011\001\003\001\105\000\005\001\000\001\016\001\013\001\009\001\
\016\001\016\001\012\001\046\001\009\001\009\001\016\001\034\001\
\037\001\158\000\119\000\021\001\036\001\012\001\064\000\031\001\
\066\000\036\001\140\000\035\001\035\001\031\001\032\001\033\001\
\011\001\174\000\025\001\009\001\000\000\016\001\022\001\012\001\
\012\001\020\001\021\001\022\001\025\001\029\001\011\001\049\001\
\050\001\010\001\052\001\037\001\009\001\032\001\013\001\013\001\
\035\001\034\001\011\001\034\001\026\001\018\001\019\001\204\000\
\205\000\206\000\017\001\208\000\209\000\170\000\171\000\172\000\
\013\001\174\000\014\001\001\001\177\000\003\001\219\000\005\001\
\026\001\017\001\223\000\009\001\016\001\226\000\012\001\044\001\
\045\001\016\001\016\001\192\000\049\001\009\001\051\001\021\001\
\197\000\198\000\199\000\200\000\001\001\036\001\003\001\012\001\
\005\001\031\001\032\001\033\001\009\001\012\001\012\001\012\001\
\012\001\012\001\012\001\016\001\017\001\204\000\205\000\206\000\
\021\001\208\000\209\000\049\001\050\001\015\001\052\001\013\001\
\009\001\036\001\031\001\032\001\033\001\014\001\015\001\026\001\
\223\000\018\001\019\001\226\000\013\001\009\001\011\001\036\001\
\011\001\009\001\011\001\013\001\049\001\050\001\014\001\052\001\
\011\001\013\001\018\001\019\001\012\001\038\001\013\001\040\001\
\041\001\042\001\043\001\044\001\045\001\002\001\012\001\004\001\
\049\001\006\001\051\001\013\001\009\001\010\001\038\001\000\000\
\040\001\041\001\042\001\043\001\044\001\045\001\039\001\009\001\
\013\001\049\001\011\001\051\001\014\001\013\001\013\001\016\001\
\018\001\019\001\017\001\020\001\021\001\022\001\017\001\026\001\
\023\001\024\001\025\001\026\001\027\001\028\001\026\001\032\001\
\016\001\015\001\035\001\034\001\038\001\036\001\040\001\041\001\
\042\001\043\001\044\001\045\001\013\001\016\001\011\001\049\001\
\013\001\051\001\009\000\016\001\017\001\103\000\158\000\020\001\
\021\001\022\001\023\001\024\001\174\000\026\001\027\001\028\001\
\029\001\030\001\013\001\219\000\065\000\034\001\017\001\036\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\013\001\255\255\255\255\034\001\
\017\001\036\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\013\001\255\255\
\255\255\034\001\017\001\036\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\013\001\255\255\255\255\034\001\017\001\036\001\255\255\020\001\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\013\001\255\255\255\255\034\001\017\001\036\001\
\255\255\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\030\001\013\001\255\255\255\255\034\001\
\017\001\036\001\255\255\020\001\021\001\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\030\001\013\001\255\255\
\255\255\034\001\017\001\036\001\255\255\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\013\001\030\001\
\255\255\255\255\017\001\034\001\255\255\036\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\013\001\255\255\
\255\255\255\255\017\001\034\001\255\255\036\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\013\001\255\255\
\255\255\255\255\017\001\034\001\255\255\036\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\013\001\255\255\
\255\255\255\255\017\001\034\001\255\255\036\001\013\001\255\255\
\023\001\024\001\017\001\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\002\001\034\001\004\001\036\001\006\001\013\001\
\255\255\009\001\010\001\034\001\255\255\036\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\036\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\036\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\036\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\036\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\036\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\036\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\036\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\017\001\255\255\034\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  VAR\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  HASH\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  TYPE_VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 47 "parser.mly"
                  ( Topdecs _1 )
# 538 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                        ( [] )
# 544 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 52 "parser.mly"
                        ( _1 :: _2 )
# 552 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 56 "parser.mly"
        ( GlobalDeclaration _1 )
# 559 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 57 "parser.mly"
                                                   ( Routine (Internal, _2, _4, _6) )
# 568 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 58 "parser.mly"
                                                   ( Routine (External, _2, _4, _6) )
# 577 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 59 "parser.mly"
                                                   ( Struct (_2, [], _4) )
# 585 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 60 "parser.mly"
                                                                  ( Struct (_2, _4, _7) )
# 594 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 64 "parser.mly"
                            ( [_1] )
# 601 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : char) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_vars) in
    Obj.repr(
# 65 "parser.mly"
                            ( _1 :: _3 )
# 609 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 69 "parser.mly"
                        ( [_1] )
# 616 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_args) in
    Obj.repr(
# 70 "parser.mly"
                        ( _1 :: _3 )
# 624 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                        ( T_Int )
# 630 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                        ( T_Bool )
# 636 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                        ( T_Char )
# 642 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 77 "parser.mly"
                        ( T_Array _1 )
# 649 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
                        ( T_Struct (_1, []) )
# 656 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_args) in
    Obj.repr(
# 79 "parser.mly"
                        ( T_Struct (_1, _3) )
# 664 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 80 "parser.mly"
                        ( T_Generic _1 )
# 671 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 84 "parser.mly"
                                ( Block _2 )
# 678 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 88 "parser.mly"
                                                  ( Reference _1 )
# 685 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 89 "parser.mly"
                                                  ( Value _1 )
# 692 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 90 "parser.mly"
                                                  ( _2 )
# 699 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                                                      ( VarRef _1 )
# 706 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 714 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 96 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 722 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                                                      ( Null )
# 728 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 101 "parser.mly"
              ( Bool _1 )
# 735 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 102 "parser.mly"
              ( Int _1 )
# 742 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 103 "parser.mly"
              ( Char _1 )
# 749 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 104 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 757 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 105 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 765 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 106 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 773 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 107 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 781 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 108 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 789 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 109 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 797 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 110 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 805 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 111 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 813 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 112 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 821 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 113 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 829 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 114 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 837 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 115 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 844 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 116 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 851 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 117 "parser.mly"
                                                          ( ArraySize _2 )
# 858 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 118 "parser.mly"
                                                          ( GetInput _2 )
# 865 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 119 "parser.mly"
                                                          ( Lookup _2 )
# 872 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 120 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 880 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 121 "parser.mly"
                                                          ( ArrayLiteral _2 )
# 887 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 122 "parser.mly"
                                                          ( NewStruct (_2, [], _4) )
# 895 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 123 "parser.mly"
                                                          ( NewStruct (_2, _4, _7) )
# 904 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 127 "parser.mly"
                                                     ( Assign (_1, _3) )
# 912 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 128 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 920 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 129 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 928 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 130 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 936 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 131 "parser.mly"
                                                     ( Assign (_1, Value(Unary_op("!", _4))) )
# 944 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 132 "parser.mly"
                                                ( Call (_1, _3) )
# 952 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                                                ( Stop )
# 958 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
                                                ( Halt )
# 964 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                                                ( Break )
# 970 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                                                ( Continue )
# 976 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 137 "parser.mly"
                                                ( Print _2 )
# 983 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                 ( [] )
# 989 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 142 "parser.mly"
                 ( _1 )
# 996 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 146 "parser.mly"
                                              ( [_1] )
# 1003 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 147 "parser.mly"
                                              ( _1 :: _3 )
# 1011 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
          ( raise_offset_error "Error in arguments" ((symbol_start ())) )
# 1017 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
                               ( [] )
# 1023 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 153 "parser.mly"
                               ( _1 :: _2 )
# 1031 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 157 "parser.mly"
                                                             ( Statement (_1, (symbol_start ())) )
# 1038 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 158 "parser.mly"
                                                             ( Declaration (_1, (symbol_start ())) )
# 1045 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 162 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 1053 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 163 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 1061 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 164 "parser.mly"
                                                             ( AssignDeclaration (false, _3, _1, _5) )
# 1070 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 165 "parser.mly"
                                                                   ( AssignDeclaration (true, _4, _1, _6) )
# 1079 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 166 "parser.mly"
                                                                   ( VarDeclaration (false, _1, _5) )
# 1087 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 167 "parser.mly"
                                                                   ( VarDeclaration (true, _1, _6) )
# 1095 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 168 "parser.mly"
                                                               ( VarDeclaration (false, _1, _4) )
# 1103 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 169 "parser.mly"
                                                               ( VarDeclaration (true, _1, _5) )
# 1111 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 173 "parser.mly"
                                                       ( Expression _1 )
# 1118 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 174 "parser.mly"
                                                       ( _1 )
# 1125 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 175 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1134 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 176 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1142 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 177 "parser.mly"
                                                             ( While (_3, _5) )
# 1150 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 178 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1158 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 179 "parser.mly"
                                                                                 ( Block([Declaration(_3, (symbol_start ())); Statement(While(_4, Block([Statement(_8, (symbol_start ())); Statement(Expression(_6), (symbol_start ()));])), (symbol_start ()));]) )
# 1168 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 180 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name), (symbol_start ())); 
      Statement(While(Value(Binary_op("<", Reference(VarRef var_name), Value _3)), 
        Block([
          Statement(_5, (symbol_start ())); 
          Statement(Expression(Assign(VarRef(var_name), Value(Binary_op("+", Value(Int 1), Reference(VarRef var_name))))), (symbol_start ()));
        ])
      ), (symbol_start ()));
    ]) 
  )
# 1187 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 192 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, T_Int, limit_name, Value(Lookup(_3))), (symbol_start ())); 
      Declaration(TypeDeclaration(false, T_Int, count_name), (symbol_start ())); 
      Statement(While(Value(Binary_op("<", Reference(VarRef count_name), Reference(VarRef limit_name))), 
        Block([
          Statement(_5, (symbol_start ())); 
          Statement(Expression(Assign(VarRef count_name, Value(Binary_op("+", Value(Int 1), Reference(VarRef count_name))))), (symbol_start ()));
        ])
      ), (symbol_start ()));
    ]) 
  )
# 1208 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "parser.mly"
               ( [] )
# 1214 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 210 "parser.mly"
               ( _1 )
# 1221 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 214 "parser.mly"
                           ( [_1] )
# 1228 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 215 "parser.mly"
                           ( _1 :: _3 )
# 1236 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "parser.mly"
          ( raise_offset_error "Error in parameter declaration" ((symbol_start ())) )
# 1242 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 220 "parser.mly"
                                    ( (true, _4, _1) )
# 1250 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 221 "parser.mly"
                                    ( (false, _3, _1) )
# 1258 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
