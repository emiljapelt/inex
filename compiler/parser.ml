type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | ENTRY
  | NAME of (string)
  | MERGE
  | PATH of (string)
  | TYPE_VAR of (char)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | NULL
  | NEW
  | PRINT
  | HASH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number

  let get_filename () = ((symbol_start_pos ()).pos_fname)
  let get_linenum () = ((symbol_start_pos ()).pos_lnum)
# 75 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  265 (* ENTRY *);
  267 (* MERGE *);
  270 (* ASSIGNMENT *);
  271 (* LPAR *);
  272 (* RPAR *);
  273 (* LBRACE *);
  274 (* RBRACE *);
  275 (* LBRAKE *);
  276 (* RBRAKE *);
  277 (* STOP *);
  278 (* HALT *);
  279 (* PLUS *);
  280 (* MINUS *);
  281 (* TIMES *);
  282 (* EQ *);
  283 (* NEQ *);
  284 (* LT *);
  285 (* GT *);
  286 (* LTEQ *);
  287 (* GTEQ *);
  288 (* LOGIC_AND *);
  289 (* LOGIC_OR *);
  290 (* PIPE *);
  291 (* NOT *);
  292 (* VALUE *);
  293 (* COMMA *);
  294 (* DOT *);
  295 (* SEMI *);
  296 (* COLON *);
    0 (* EOF *);
  297 (* IF *);
  298 (* ELSE *);
  299 (* WHILE *);
  300 (* UNTIL *);
  301 (* FOR *);
  302 (* REPEAT *);
  303 (* BREAK *);
  304 (* CONTINUE *);
  305 (* LOCKED *);
  306 (* STRUCT *);
  307 (* NULL *);
  308 (* NEW *);
  309 (* PRINT *);
  310 (* HASH *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  266 (* NAME *);
  268 (* PATH *);
  269 (* TYPE_VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\007\000\007\000\009\000\
\009\000\011\000\011\000\011\000\011\000\010\000\010\000\010\000\
\010\000\010\000\006\000\013\000\013\000\013\000\014\000\014\000\
\014\000\014\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\016\000\016\000\017\000\017\000\017\000\012\000\
\012\000\018\000\018\000\004\000\004\000\004\000\004\000\004\000\
\004\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\008\000\008\000\
\021\000\021\000\022\000\022\000\005\000\005\000\023\000\023\000\
\024\000\024\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\009\000\006\000\009\000\
\006\000\009\000\006\000\009\000\003\000\001\000\003\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\001\000\
\004\000\001\000\003\000\001\000\001\000\003\000\001\000\003\000\
\004\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\002\000\002\000\005\000\003\000\005\000\
\008\000\003\000\000\000\001\000\001\000\003\000\001\000\000\000\
\002\000\001\000\001\000\004\000\005\000\006\000\007\000\005\000\
\006\000\001\000\007\000\005\000\005\000\005\000\008\000\005\000\
\005\000\002\000\002\000\002\000\002\000\002\000\003\000\004\000\
\004\000\004\000\004\000\004\000\007\000\002\000\000\000\001\000\
\001\000\003\000\004\000\003\000\000\000\001\000\001\000\003\000\
\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\107\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\018\000\019\000\020\000\000\000\026\000\
\000\000\000\000\000\000\022\000\013\000\000\000\000\000\000\000\
\000\000\102\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\096\000\000\000\000\000\000\000\036\000\035\000\037\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\060\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\000\000\000\000\000\000\069\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\005\000\
\104\000\015\000\000\000\007\000\000\000\000\000\100\000\009\000\
\098\000\000\000\025\000\000\000\030\000\000\000\058\000\055\000\
\051\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\032\000\073\000\000\000\070\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\074\000\000\000\000\000\000\000\066\000\
\000\000\000\000\000\000\099\000\000\000\017\000\062\000\000\000\
\000\000\000\000\033\000\071\000\000\000\000\000\000\000\082\000\
\083\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\094\000\027\000\000\000\000\000\000\000\000\000\000\000\065\000\
\086\000\000\000\000\000\000\000\056\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\008\000\
\010\000\000\000\012\000\092\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\078\000\000\000\081\000\080\000\
\057\000\000\000\000\000\000\000\093\000\075\000\000\000\079\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000\012\000\041\000\180\000\045\000\049\000\
\089\000\090\000\036\000\181\000\093\000\069\000\070\000\094\000\
\095\000\183\000\184\000\185\000\050\000\051\000\042\000\043\000"

let yysindex = "\015\000\
\119\255\000\000\016\255\030\255\054\255\238\254\081\255\095\255\
\000\000\103\000\119\255\000\000\091\255\149\255\212\255\048\255\
\069\255\249\255\000\000\000\000\112\255\123\255\112\255\123\255\
\115\255\123\255\000\000\000\000\000\000\000\000\109\255\000\000\
\220\255\213\001\027\255\000\000\000\000\112\255\123\255\114\255\
\159\255\000\000\102\255\128\255\129\255\165\255\154\255\162\255\
\174\255\000\000\167\255\170\255\253\001\000\000\000\000\000\000\
\000\000\220\255\099\255\099\255\220\255\009\255\220\255\009\255\
\000\000\254\001\253\001\063\000\004\255\000\000\220\255\093\255\
\220\255\188\255\000\000\210\255\181\255\025\255\211\255\112\255\
\123\255\217\255\211\255\227\255\071\255\211\255\115\255\228\255\
\223\255\251\254\046\001\000\000\179\001\235\255\000\000\239\255\
\124\255\136\255\000\000\004\255\255\255\242\255\248\255\220\255\
\220\255\220\255\220\255\220\255\220\255\220\255\220\255\220\255\
\220\255\220\255\000\000\220\255\009\000\111\001\220\255\000\000\
\128\001\000\000\234\255\008\000\253\001\248\255\241\255\000\000\
\000\000\000\000\112\255\000\000\112\255\216\255\000\000\000\000\
\000\000\115\255\000\000\253\001\000\000\099\255\000\000\000\000\
\000\000\099\255\253\001\214\255\124\255\124\255\000\000\022\002\
\022\002\033\002\033\002\033\002\033\002\000\000\124\255\205\001\
\000\000\000\000\145\001\000\000\000\000\112\255\248\255\005\255\
\251\255\254\255\024\000\025\000\026\000\027\000\028\000\006\000\
\013\000\099\255\000\000\000\000\042\000\138\255\241\255\000\000\
\022\000\051\000\057\000\000\000\058\000\000\000\000\000\059\000\
\048\000\219\001\000\000\000\000\066\000\099\255\253\001\000\000\
\000\000\220\255\220\255\220\255\075\000\220\255\000\000\000\000\
\000\000\000\000\220\255\084\000\091\000\104\000\109\000\000\000\
\000\000\211\255\211\255\211\255\000\000\082\000\000\000\097\000\
\125\000\130\000\064\001\082\001\100\001\220\255\245\001\060\255\
\138\000\245\001\220\255\220\255\220\255\220\255\000\000\000\000\
\000\000\099\255\000\000\000\000\147\000\003\000\003\000\003\000\
\162\001\003\000\003\000\245\001\245\001\245\001\245\001\153\000\
\099\255\007\000\135\000\000\000\000\000\002\255\000\000\000\000\
\000\000\156\000\003\000\164\000\000\000\000\000\003\000\000\000"

let yyrindex = "\000\000\
\187\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\187\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\174\000\000\000\174\000\000\000\
\179\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\
\000\000\000\000\182\000\176\000\000\000\000\000\000\000\000\000\
\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\195\000\196\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\197\000\000\000\000\000\127\255\000\000\000\000\000\000\
\137\000\000\000\000\000\101\000\210\000\000\000\119\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\094\255\213\000\000\000\
\000\000\000\000\174\000\000\000\174\000\000\000\000\000\000\000\
\000\000\179\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\216\000\000\000\000\000\155\000\173\000\000\000\015\001\
\029\001\207\000\223\000\239\000\255\000\000\000\191\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\000\122\255\222\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\213\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\216\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\221\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\
\011\002\012\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\216\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\255\028\255\062\255\078\255\000\000\
\216\000\222\255\150\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\231\001\000\000\142\255\236\255\178\255\247\255\107\001\
\120\255\246\255\192\255\065\001\232\255\194\255\041\001\206\255\
\121\255\000\000\089\000\250\000\171\001\000\000\181\001\000\000"

let yytablesize = 834
let yytable = "\098\000\
\128\000\100\000\046\000\190\000\132\000\035\000\191\000\136\000\
\068\000\096\000\193\000\002\001\179\000\074\000\047\000\001\000\
\052\000\076\000\057\000\198\000\135\000\016\000\116\000\072\000\
\027\000\013\000\028\000\087\000\029\000\077\000\030\000\140\000\
\199\000\091\000\031\000\088\000\097\000\032\000\099\000\014\000\
\073\000\117\000\209\000\089\000\016\000\074\000\118\000\027\000\
\121\000\028\000\087\000\029\000\065\000\030\000\178\000\102\000\
\103\000\031\000\088\000\065\000\032\000\033\000\226\000\015\000\
\182\000\075\000\089\000\126\000\179\000\188\000\027\000\130\000\
\028\000\125\000\029\000\250\000\030\000\090\000\116\000\149\000\
\150\000\151\000\152\000\153\000\154\000\155\000\156\000\157\000\
\158\000\159\000\230\000\160\000\017\000\091\000\163\000\192\000\
\034\000\117\000\092\000\054\000\090\000\055\000\019\000\056\000\
\018\000\021\000\119\000\037\000\057\000\106\000\186\000\074\000\
\187\000\058\000\167\000\059\000\091\000\060\000\022\000\134\000\
\182\000\040\000\061\000\194\000\048\000\003\000\004\000\005\000\
\006\000\007\000\106\000\120\000\062\000\063\000\064\000\044\000\
\053\000\105\000\080\000\239\000\240\000\241\000\061\000\232\000\
\061\000\197\000\061\000\225\000\106\000\065\000\066\000\211\000\
\067\000\078\000\116\000\113\000\116\000\082\000\105\000\076\000\
\212\000\213\000\214\000\023\000\081\000\061\000\076\000\076\000\
\008\000\145\000\076\000\076\000\215\000\117\000\079\000\117\000\
\024\000\227\000\228\000\229\000\083\000\231\000\084\000\182\000\
\182\000\182\000\234\000\182\000\182\000\086\000\076\000\000\001\
\076\000\076\000\076\000\076\000\076\000\076\000\088\000\182\000\
\076\000\085\000\076\000\087\000\182\000\249\000\010\001\122\000\
\182\000\124\000\252\000\253\000\254\000\255\000\054\000\027\000\
\055\000\028\000\056\000\029\000\054\000\030\000\055\000\057\000\
\056\000\123\000\025\000\127\000\058\000\057\000\059\000\131\000\
\060\000\122\000\058\000\031\000\059\000\061\000\060\000\026\000\
\031\000\133\000\138\000\061\000\031\000\031\000\031\000\062\000\
\063\000\064\000\168\000\139\000\143\000\062\000\063\000\064\000\
\031\000\127\000\144\000\031\000\148\000\169\000\170\000\038\000\
\065\000\066\000\074\000\067\000\002\001\146\000\065\000\066\000\
\165\000\067\000\161\000\127\000\039\000\198\000\166\000\169\000\
\170\000\171\000\147\000\172\000\173\000\174\000\175\000\176\000\
\177\000\200\000\199\000\065\000\201\000\178\000\202\000\203\000\
\204\000\205\000\206\000\171\000\207\000\172\000\173\000\174\000\
\175\000\176\000\177\000\208\000\024\000\065\000\024\000\178\000\
\024\000\024\000\024\000\210\000\217\000\024\000\024\000\024\000\
\024\000\024\000\218\000\024\000\024\000\024\000\024\000\024\000\
\219\000\220\000\221\000\024\000\222\000\024\000\003\001\004\001\
\005\001\224\000\007\001\008\001\006\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\242\000\235\000\028\000\014\001\028\000\115\000\028\000\016\001\
\236\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\053\000\237\000\053\000\028\000\
\053\000\028\000\238\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\052\000\243\000\
\052\000\053\000\052\000\053\000\244\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\049\000\251\000\049\000\052\000\049\000\052\000\245\000\049\000\
\049\000\001\001\049\000\049\000\049\000\049\000\049\000\049\000\
\009\001\049\000\046\000\013\001\046\000\049\000\046\000\049\000\
\011\001\046\000\046\000\015\001\046\000\046\000\046\000\046\000\
\046\000\046\000\002\000\046\000\048\000\101\000\048\000\046\000\
\048\000\046\000\095\000\048\000\048\000\103\000\048\000\048\000\
\048\000\048\000\048\000\048\000\014\000\048\000\039\000\097\000\
\039\000\048\000\039\000\048\000\059\000\039\000\039\000\059\000\
\039\000\039\000\039\000\039\000\039\000\039\000\043\000\039\000\
\043\000\016\000\043\000\039\000\024\000\039\000\064\000\059\000\
\043\000\043\000\043\000\043\000\043\000\043\000\045\000\025\000\
\045\000\020\000\045\000\043\000\189\000\043\000\233\000\216\000\
\045\000\045\000\045\000\045\000\045\000\045\000\042\000\012\001\
\042\000\137\000\042\000\045\000\129\000\045\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\044\000\000\000\
\044\000\000\000\044\000\042\000\000\000\042\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\040\000\000\000\
\040\000\000\000\040\000\044\000\000\000\044\000\000\000\000\000\
\040\000\040\000\000\000\000\000\041\000\000\000\041\000\000\000\
\041\000\000\000\000\000\040\000\000\000\040\000\041\000\041\000\
\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\
\000\000\041\000\000\000\041\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\246\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\247\000\000\000\000\000\000\000\000\000\000\000\000\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\248\000\000\000\000\000\000\000\000\000\
\000\000\000\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\000\000\000\000\000\000\000\000\000\000\162\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\000\000\000\000\000\000\000\000\000\000\164\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\000\000\000\000\000\000\000\000\000\000\196\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\000\000\000\000\000\000\000\000\000\000\
\006\001\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\027\000\000\000\028\000\142\000\
\029\000\000\000\030\000\000\000\000\000\000\000\031\000\000\000\
\195\000\032\000\071\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\223\000\000\000\
\000\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\027\000\027\000\028\000\028\000\
\029\000\029\000\030\000\030\000\000\000\000\000\031\000\101\000\
\000\000\032\000\032\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\104\000\105\000\106\000\000\000\
\000\000\109\000\110\000\111\000\112\000\113\000\114\000\104\000\
\105\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
\113\000\114\000"

let yycheck = "\062\000\
\079\000\064\000\023\000\140\000\083\000\016\000\142\000\086\000\
\033\000\060\000\147\000\010\001\127\000\019\001\024\000\001\000\
\026\000\038\000\010\001\015\001\085\000\040\001\019\001\034\000\
\000\001\010\001\002\001\016\001\004\001\039\000\006\001\037\001\
\028\001\058\000\010\001\016\001\061\000\013\001\063\000\010\001\
\014\001\038\001\178\000\016\001\040\001\019\001\071\000\000\001\
\073\000\002\001\039\001\004\001\051\001\006\001\053\001\066\000\
\067\000\010\001\039\001\051\001\013\001\014\001\199\000\010\001\
\127\000\039\001\039\001\078\000\183\000\134\000\000\001\081\000\
\002\001\049\001\004\001\016\001\006\001\016\001\019\001\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\205\000\116\000\012\001\016\001\119\000\146\000\
\049\001\038\001\000\001\001\001\039\001\003\001\000\000\005\001\
\010\001\015\001\014\001\039\001\010\001\016\001\131\000\019\001\
\133\000\015\001\125\000\017\001\039\001\019\001\028\001\049\001\
\183\000\010\001\024\001\148\000\010\001\007\001\008\001\009\001\
\010\001\011\001\037\001\039\001\034\001\035\001\036\001\013\001\
\028\001\016\001\037\001\218\000\219\000\220\000\016\001\206\000\
\018\001\166\000\020\001\198\000\025\001\051\001\052\001\014\001\
\054\001\040\001\019\001\032\001\019\001\029\001\037\001\010\001\
\023\001\024\001\025\001\015\001\037\001\039\001\017\001\018\001\
\050\001\034\001\021\001\022\001\035\001\038\001\016\001\038\001\
\028\001\202\000\203\000\204\000\016\001\206\000\029\001\246\000\
\247\000\248\000\211\000\250\000\251\000\016\001\041\001\242\000\
\043\001\044\001\045\001\046\001\047\001\048\001\029\001\006\001\
\051\001\040\001\053\001\037\001\011\001\230\000\001\001\020\001\
\015\001\029\001\235\000\236\000\237\000\238\000\001\001\000\001\
\003\001\002\001\005\001\004\001\001\001\006\001\003\001\010\001\
\005\001\016\001\015\001\017\001\015\001\010\001\017\001\015\001\
\019\001\020\001\015\001\014\001\017\001\024\001\019\001\028\001\
\019\001\015\001\015\001\024\001\023\001\024\001\025\001\034\001\
\035\001\036\001\010\001\029\001\018\001\034\001\035\001\036\001\
\035\001\017\001\020\001\038\001\019\001\021\001\022\001\015\001\
\051\001\052\001\019\001\054\001\010\001\015\001\051\001\052\001\
\039\001\054\001\010\001\017\001\028\001\015\001\015\001\021\001\
\022\001\041\001\028\001\043\001\044\001\045\001\046\001\047\001\
\048\001\039\001\028\001\051\001\039\001\053\001\015\001\015\001\
\015\001\015\001\015\001\041\001\039\001\043\001\044\001\045\001\
\046\001\047\001\048\001\039\001\014\001\051\001\016\001\053\001\
\018\001\019\001\020\001\018\001\039\001\023\001\024\001\025\001\
\026\001\027\001\016\001\029\001\030\001\031\001\032\001\033\001\
\016\001\016\001\016\001\037\001\029\001\039\001\246\000\247\000\
\248\000\016\001\250\000\251\000\010\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\015\001\014\001\016\001\011\001\018\001\039\001\020\001\015\001\
\014\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\016\001\014\001\018\001\037\001\
\020\001\039\001\014\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\016\001\039\001\
\018\001\037\001\020\001\039\001\016\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\016\001\016\001\018\001\037\001\020\001\039\001\029\001\023\001\
\024\001\015\001\026\001\027\001\028\001\029\001\030\001\031\001\
\016\001\033\001\016\001\016\001\018\001\037\001\020\001\039\001\
\042\001\023\001\024\001\016\001\026\001\027\001\028\001\029\001\
\030\001\031\001\000\000\033\001\016\001\016\001\018\001\037\001\
\020\001\039\001\016\001\023\001\024\001\016\001\026\001\027\001\
\028\001\029\001\030\001\031\001\029\001\033\001\016\001\016\001\
\018\001\037\001\020\001\039\001\018\001\023\001\024\001\020\001\
\026\001\027\001\028\001\029\001\030\001\031\001\016\001\033\001\
\018\001\029\001\020\001\037\001\019\001\039\001\018\001\016\001\
\026\001\027\001\028\001\029\001\030\001\031\001\016\001\019\001\
\018\001\011\000\020\001\037\001\138\000\039\001\206\000\183\000\
\026\001\027\001\028\001\029\001\030\001\031\001\016\001\006\001\
\018\001\087\000\020\001\037\001\080\000\039\001\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\031\001\016\001\255\255\
\018\001\255\255\020\001\037\001\255\255\039\001\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\031\001\016\001\255\255\
\018\001\255\255\020\001\037\001\255\255\039\001\255\255\255\255\
\026\001\027\001\255\255\255\255\016\001\255\255\018\001\255\255\
\020\001\255\255\255\255\037\001\255\255\039\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\037\001\255\255\039\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\039\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\039\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\039\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\039\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\000\001\255\255\002\001\037\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\020\001\013\001\014\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\000\001\000\001\002\001\002\001\
\004\001\004\001\006\001\006\001\255\255\255\255\010\001\010\001\
\255\255\013\001\013\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  ENTRY\000\
  MERGE\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  HASH\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  PATH\000\
  TYPE_VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 52 "parser.mly"
                  ( Topdecs _1 )
# 570 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                        ( [] )
# 576 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 57 "parser.mly"
                        ( _1 :: _2 )
# 584 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 61 "parser.mly"
        ( GlobalDeclaration _1 )
# 591 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 62 "parser.mly"
                                                            ( Routine (Internal, _2, [], _4, _6) )
# 600 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 63 "parser.mly"
                                                            ( Routine (Internal, _2, _4, _7, _9) )
# 610 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 64 "parser.mly"
                                                            ( Routine (External, _2, [], _4, _6) )
# 619 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 65 "parser.mly"
                                                            ( Routine (External, _2, _4, _7, _9) )
# 629 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'simple_params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 66 "parser.mly"
                                                            ( Routine (Entry, _2, [], _4, _6) )
# 638 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'simple_params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 67 "parser.mly"
                                                            ( raise_line_error "Entrypoints cannot be generic" (get_filename ()) (get_linenum ()) )
# 648 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 68 "parser.mly"
                                                            ( Struct (_2, [], _4) )
# 656 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 69 "parser.mly"
                                                            ( Struct (_2, _4, _7) )
# 665 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
                                                            ( Merge _2 )
# 672 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 74 "parser.mly"
                            ( [_1] )
# 679 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : char) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_vars) in
    Obj.repr(
# 75 "parser.mly"
                            ( _1 :: _3 )
# 687 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 79 "parser.mly"
                        ( [_1] )
# 694 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_args) in
    Obj.repr(
# 80 "parser.mly"
                        ( _1 :: _3 )
# 702 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                        ( T_Int )
# 708 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                        ( T_Bool )
# 714 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                        ( T_Char )
# 720 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
          ( raise_line_error "Entrypoints can only take simple types as arguments" (get_filename ()) (get_linenum ()) )
# 726 "parser.ml"
               : 'simple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 91 "parser.mly"
                        ( _1 )
# 733 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 92 "parser.mly"
                        ( T_Array _1 )
# 740 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
                        ( T_Struct (_1, []) )
# 747 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_args) in
    Obj.repr(
# 94 "parser.mly"
                        ( T_Struct (_1, _3) )
# 755 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 95 "parser.mly"
                        ( T_Generic _1 )
# 762 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 99 "parser.mly"
                                ( Block _2 )
# 769 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 103 "parser.mly"
                                                  ( Reference _1 )
# 776 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 104 "parser.mly"
                                                  ( Value _1 )
# 783 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 105 "parser.mly"
                                                  ( _2 )
# 790 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                                                      ( VariableAccess _1 )
# 797 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                                                      ( StructAccess (_1, _3) )
# 805 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 111 "parser.mly"
                                                      ( ArrayAccess (_1, _3) )
# 813 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                                                      ( Null )
# 819 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 116 "parser.mly"
              ( Bool _1 )
# 826 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 117 "parser.mly"
              ( Int _1 )
# 833 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 118 "parser.mly"
              ( Char _1 )
# 840 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 119 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 848 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 120 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 856 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 121 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 864 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 122 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 872 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 123 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 880 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 124 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 888 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 125 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 896 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 126 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 904 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 127 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 912 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 128 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 920 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 129 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 928 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 130 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 935 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 131 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 942 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 132 "parser.mly"
                                                          ( ArraySize _2 )
# 949 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 133 "parser.mly"
                                                          ( GetInput _2 )
# 956 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 134 "parser.mly"
                                                          ( ValueOf _2 )
# 963 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 135 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 971 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 136 "parser.mly"
                                                          ( ArrayLiteral _2 )
# 978 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 137 "parser.mly"
                                                          ( NewStruct (_2, [], _4) )
# 986 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 138 "parser.mly"
                                                          ( NewStruct (_2, _4, _7) )
# 995 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 139 "parser.mly"
                                                          ( StructLiteral _2 )
# 1002 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                 ( [] )
# 1008 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 144 "parser.mly"
                 ( _1 )
# 1015 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 148 "parser.mly"
                                              ( [_1] )
# 1022 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 149 "parser.mly"
                                              ( _1 :: _3 )
# 1030 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
          ( raise_line_error "Error in arguments" (get_filename ()) (get_linenum ()) )
# 1036 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                               ( [] )
# 1042 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 155 "parser.mly"
                               ( _1 :: _2 )
# 1050 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 159 "parser.mly"
                                                             ( Statement (_1, (get_filename ()), (get_linenum ())) )
# 1057 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 160 "parser.mly"
                                                             ( Declaration (_1, (get_filename ()), (get_linenum ())) )
# 1064 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 164 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 1072 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 165 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 1080 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 166 "parser.mly"
                                                             ( AssignDeclaration (false, Some _3, _1, _5) )
# 1089 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 167 "parser.mly"
                                                                   ( AssignDeclaration (true, Some _4, _1, _6) )
# 1098 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 168 "parser.mly"
                                                               ( AssignDeclaration (false, None, _1, _4) )
# 1106 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 169 "parser.mly"
                                                               ( AssignDeclaration (true, None, _1, _5) )
# 1114 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 173 "parser.mly"
                                                      ( _1 )
# 1121 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 174 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1130 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 175 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1138 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 176 "parser.mly"
                                                             ( While (_3, _5) )
# 1146 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 177 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1154 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'non_control_flow_stmt) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 178 "parser.mly"
                                                                               ( Block([Declaration(_3, (get_filename ()), (get_linenum ())); Statement(While(_4, Block([Statement(_8, (get_filename ()), (get_linenum ())); Statement(_6, (get_filename ()), (get_linenum ()));])), (get_filename ()), (get_linenum ()));]) )
# 1164 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 179 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VariableAccess var_name), Value _3)), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Assign(VariableAccess(var_name), Value(Binary_op("+", Value(Int 1), Reference(VariableAccess var_name)))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1183 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 191 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, Some T_Int, limit_name, Value(ValueOf(_3))), (get_filename ()), (get_linenum ())); 
      Declaration(TypeDeclaration(false, T_Int, count_name), (get_filename ()), (get_linenum ())); 
      Statement(While(Value(Binary_op("<", Reference(VariableAccess count_name), Reference(VariableAccess limit_name))), 
        Block([
          Statement(_5, (get_filename ()), (get_linenum ())); 
          Statement(Assign(VariableAccess count_name, Value(Binary_op("+", Value(Int 1), Reference(VariableAccess count_name)))), (get_filename ()), (get_linenum ()));
        ])
      ), (get_filename ()), (get_linenum ()));
    ]) 
  )
# 1204 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "parser.mly"
                                                    ( Stop )
# 1210 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parser.mly"
                                                     ( Halt )
# 1216 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 207 "parser.mly"
                                                 ( Break )
# 1222 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "parser.mly"
                                                   ( Continue )
# 1228 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'non_control_flow_stmt) in
    Obj.repr(
# 209 "parser.mly"
                               ( _1 )
# 1235 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 213 "parser.mly"
                                                      ( Assign (_1, _3) )
# 1243 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 214 "parser.mly"
                                                      ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 1251 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 215 "parser.mly"
                                                      ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 1259 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 216 "parser.mly"
                                                      ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 1267 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 217 "parser.mly"
                                                      ( Assign (_1, Value(Unary_op("!", _4))) )
# 1275 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 218 "parser.mly"
                                                ( Call (_1, [], _3) )
# 1283 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 219 "parser.mly"
                                                ( Call (_1, _3, _6) )
# 1292 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 220 "parser.mly"
                                              ( Print _2 )
# 1299 "parser.ml"
               : 'non_control_flow_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parser.mly"
                      ( [] )
# 1305 "parser.ml"
               : 'simple_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_params1) in
    Obj.repr(
# 225 "parser.mly"
                      ( _1 )
# 1312 "parser.ml"
               : 'simple_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_param) in
    Obj.repr(
# 229 "parser.mly"
                                         ( [_1] )
# 1319 "parser.ml"
               : 'simple_params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_params1) in
    Obj.repr(
# 230 "parser.mly"
                                         ( _1 :: _3 )
# 1327 "parser.ml"
               : 'simple_params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 234 "parser.mly"
                                           ( (true, _4, _1) )
# 1335 "parser.ml"
               : 'simple_param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_typ) in
    Obj.repr(
# 235 "parser.mly"
                                           ( (false, _3, _1) )
# 1343 "parser.ml"
               : 'simple_param))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser.mly"
               ( [] )
# 1349 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 240 "parser.mly"
               ( _1 )
# 1356 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 244 "parser.mly"
                           ( [_1] )
# 1363 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 245 "parser.mly"
                           ( _1 :: _3 )
# 1371 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 250 "parser.mly"
                                    ( (true, _4, _1) )
# 1379 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 251 "parser.mly"
                                    ( (false, _3, _1) )
# 1387 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
