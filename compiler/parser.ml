type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | TYPE_VAR of (char)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | NULL
  | NEW
  | PRINT
  | HASH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number
# 69 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  267 (* ASSIGNMENT *);
  268 (* LPAR *);
  269 (* RPAR *);
  270 (* LBRACE *);
  271 (* RBRACE *);
  272 (* LBRAKE *);
  273 (* RBRAKE *);
  274 (* STOP *);
  275 (* HALT *);
  276 (* PLUS *);
  277 (* MINUS *);
  278 (* TIMES *);
  279 (* EQ *);
  280 (* NEQ *);
  281 (* LT *);
  282 (* GT *);
  283 (* LTEQ *);
  284 (* GTEQ *);
  285 (* LOGIC_AND *);
  286 (* LOGIC_OR *);
  287 (* PIPE *);
  288 (* NOT *);
  289 (* VALUE *);
  290 (* COMMA *);
  291 (* DOT *);
  292 (* SEMI *);
  293 (* COLON *);
    0 (* EOF *);
  294 (* IF *);
  295 (* ELSE *);
  296 (* WHILE *);
  297 (* UNTIL *);
  298 (* FOR *);
  299 (* REPEAT *);
  300 (* BREAK *);
  301 (* CONTINUE *);
  302 (* LOCKED *);
  303 (* STRUCT *);
  304 (* NULL *);
  305 (* NEW *);
  306 (* PRINT *);
  307 (* HASH *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  265 (* NAME *);
  266 (* TYPE_VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\007\000\007\000\008\000\008\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\006\000\011\000\011\000\
\011\000\012\000\012\000\012\000\012\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\014\000\014\000\016\000\016\000\016\000\010\000\010\000\017\000\
\017\000\004\000\004\000\004\000\004\000\004\000\004\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\005\000\005\000\019\000\019\000\019\000\020\000\020\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\009\000\006\000\009\000\
\006\000\009\000\001\000\003\000\001\000\003\000\001\000\001\000\
\001\000\003\000\001\000\004\000\001\000\003\000\001\000\001\000\
\003\000\001\000\003\000\004\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\002\000\002\000\
\005\000\003\000\005\000\008\000\003\000\004\000\004\000\004\000\
\004\000\004\000\007\000\001\000\001\000\001\000\001\000\002\000\
\000\000\001\000\001\000\003\000\001\000\000\000\002\000\001\000\
\001\000\004\000\005\000\006\000\007\000\005\000\006\000\002\000\
\001\000\007\000\005\000\005\000\005\000\008\000\005\000\005\000\
\000\000\001\000\001\000\003\000\001\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\096\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\001\000\003\000\
\000\000\000\000\000\000\000\000\015\000\016\000\017\000\000\000\
\021\000\000\000\000\000\000\000\000\000\000\000\093\000\000\000\
\000\000\090\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\030\000\032\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\000\000\074\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\000\000\066\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
\000\000\000\000\000\000\000\000\075\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\005\000\092\000\012\000\000\000\
\007\000\000\000\020\000\000\000\025\000\000\000\050\000\046\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\000\000\027\000\
\079\000\000\000\076\000\009\000\000\000\000\000\000\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\000\000\073\000\081\000\000\000\000\000\000\000\000\000\072\000\
\000\000\000\000\014\000\068\000\000\000\000\000\000\000\028\000\
\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\000\022\000\000\000\000\000\000\000\000\000\000\000\
\080\000\071\000\000\000\000\000\051\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\008\000\
\000\000\010\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\085\000\000\000\088\000\087\000\052\000\
\000\000\000\000\000\000\059\000\082\000\000\000\086\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\033\000\155\000\037\000\071\000\
\072\000\156\000\075\000\055\000\056\000\076\000\158\000\077\000\
\159\000\160\000\034\000\035\000"

let yysindex = "\014\000\
\075\255\000\000\020\255\040\255\019\255\089\255\000\000\087\000\
\075\255\000\000\005\255\116\255\031\255\132\255\000\000\000\000\
\179\255\091\255\179\255\091\255\000\000\000\000\000\000\092\255\
\000\000\211\255\011\002\023\255\179\255\091\255\000\000\079\255\
\133\255\000\000\108\255\115\255\142\255\160\255\148\255\021\001\
\000\000\000\000\000\000\000\000\211\255\088\255\211\255\004\255\
\211\255\004\255\000\000\021\002\021\001\080\001\027\255\000\000\
\211\255\069\255\211\255\155\255\000\000\162\255\152\255\104\255\
\166\255\179\255\091\255\180\255\166\255\181\255\168\255\254\254\
\015\001\000\000\165\001\182\255\000\000\250\254\129\255\000\000\
\027\255\146\255\185\255\188\255\211\255\211\255\211\255\211\255\
\211\255\211\255\211\255\211\255\211\255\211\255\211\255\000\000\
\211\255\187\255\097\001\211\255\000\000\114\001\000\000\161\255\
\196\255\021\001\188\255\247\255\000\000\000\000\000\000\179\255\
\000\000\179\255\000\000\021\001\000\000\088\255\000\000\000\000\
\088\255\021\001\186\255\250\254\250\254\000\000\238\001\238\001\
\209\255\209\255\209\255\209\255\000\000\250\254\180\001\000\000\
\000\000\131\001\000\000\000\000\179\255\188\255\078\255\000\000\
\000\000\201\255\203\255\210\255\213\255\214\255\000\000\000\000\
\088\255\000\000\000\000\191\255\189\255\192\255\247\255\000\000\
\220\255\223\255\000\000\000\000\228\255\222\255\194\001\000\000\
\000\000\239\255\088\255\021\001\211\255\211\255\211\255\245\255\
\211\255\000\000\000\000\211\255\242\255\252\255\253\255\010\000\
\000\000\000\000\166\255\166\255\000\000\243\255\000\000\246\255\
\254\255\001\000\033\001\051\001\069\001\211\255\205\001\127\255\
\009\000\205\001\211\255\211\255\211\255\211\255\000\000\000\000\
\088\255\000\000\000\000\012\000\028\000\028\000\028\000\148\001\
\028\000\028\000\205\001\205\001\205\001\205\001\015\000\088\255\
\151\255\255\255\000\000\000\000\003\255\000\000\000\000\000\000\
\017\000\028\000\030\000\000\000\000\000\028\000\000\000"

let yyrindex = "\000\000\
\052\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\040\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\047\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\082\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\014\255\000\000\000\000\136\000\000\000\000\000\
\100\000\063\000\000\000\118\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\255\067\000\000\000\000\000\000\000\040\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\133\255\000\000\000\000\154\000\172\000\000\000\234\255\254\000\
\031\000\206\000\222\000\238\000\000\000\190\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\114\255\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\133\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216\001\
\227\001\045\255\000\000\000\000\000\000\000\000\000\000\000\000\
\133\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\255\082\255\111\255\125\255\000\000\133\255\
\029\000\231\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\074\001\000\000\158\255\238\255\194\255\244\255\159\255\
\249\255\193\000\235\255\208\255\176\000\139\255\128\000\147\255\
\000\000\173\255\048\001\000\000"

let yytablesize = 799
let yytable = "\079\000\
\038\000\081\000\109\000\165\000\054\000\028\000\113\000\039\000\
\164\000\154\000\062\000\225\000\044\000\060\000\001\000\087\000\
\017\000\063\000\163\000\058\000\144\000\145\000\094\000\073\000\
\166\000\078\000\067\000\080\000\011\000\018\000\067\000\116\000\
\021\000\059\000\022\000\099\000\023\000\102\000\060\000\024\000\
\025\000\026\000\097\000\178\000\083\000\084\000\151\000\152\000\
\012\000\067\000\051\000\051\000\153\000\193\000\111\000\013\000\
\107\000\053\000\061\000\157\000\154\000\098\000\054\000\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\194\000\135\000\027\000\198\000\138\000\100\000\
\053\000\003\000\004\000\005\000\060\000\054\000\015\000\074\000\
\041\000\171\000\042\000\223\000\043\000\161\000\055\000\162\000\
\044\000\014\000\142\000\045\000\036\000\167\000\172\000\046\000\
\101\000\021\000\233\000\022\000\047\000\023\000\157\000\095\000\
\024\000\025\000\013\000\064\000\040\000\055\000\048\000\049\000\
\050\000\006\000\170\000\056\000\207\000\208\000\094\000\019\000\
\200\000\226\000\227\000\228\000\095\000\230\000\231\000\051\000\
\052\000\057\000\053\000\217\000\020\000\066\000\097\000\029\000\
\097\000\065\000\056\000\094\000\067\000\106\000\237\000\195\000\
\196\000\197\000\239\000\199\000\030\000\121\000\202\000\120\000\
\057\000\098\000\171\000\098\000\157\000\157\000\157\000\068\000\
\157\000\157\000\122\000\103\000\069\000\070\000\104\000\172\000\
\216\000\105\000\031\000\108\000\157\000\219\000\220\000\221\000\
\222\000\157\000\041\000\032\000\042\000\157\000\043\000\112\000\
\114\000\115\000\044\000\136\000\140\000\045\000\119\000\180\000\
\123\000\046\000\103\000\060\000\097\000\179\000\047\000\141\000\
\181\000\182\000\183\000\041\000\173\000\042\000\174\000\043\000\
\048\000\049\000\050\000\044\000\184\000\175\000\045\000\098\000\
\176\000\177\000\046\000\185\000\085\000\086\000\087\000\047\000\
\187\000\051\000\052\000\188\000\053\000\094\000\095\000\083\000\
\189\000\048\000\049\000\050\000\083\000\083\000\035\000\190\000\
\083\000\083\000\035\000\192\000\203\000\005\000\209\000\143\000\
\035\000\035\000\051\000\052\000\108\000\053\000\204\000\205\000\
\144\000\145\000\211\000\035\000\083\000\035\000\083\000\083\000\
\083\000\083\000\083\000\083\000\206\000\218\000\083\000\224\000\
\083\000\210\000\212\000\232\000\146\000\236\000\147\000\148\000\
\149\000\150\000\151\000\152\000\225\000\234\000\051\000\026\000\
\153\000\108\000\238\000\038\000\026\000\144\000\145\000\038\000\
\026\000\026\000\026\000\002\000\089\000\038\000\038\000\038\000\
\038\000\038\000\038\000\091\000\026\000\011\000\065\000\026\000\
\038\000\146\000\038\000\147\000\148\000\149\000\150\000\151\000\
\152\000\013\000\019\000\051\000\019\000\153\000\019\000\019\000\
\019\000\070\000\016\000\019\000\019\000\019\000\019\000\019\000\
\020\000\019\000\019\000\019\000\019\000\019\000\023\000\186\000\
\201\000\019\000\023\000\019\000\235\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\048\000\110\000\000\000\023\000\048\000\023\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\047\000\000\000\000\000\048\000\047\000\048\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\044\000\000\000\000\000\047\000\
\044\000\047\000\000\000\044\000\044\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\044\000\041\000\000\000\
\000\000\044\000\041\000\044\000\000\000\041\000\041\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\041\000\
\043\000\000\000\000\000\041\000\043\000\041\000\000\000\043\000\
\043\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\000\000\043\000\034\000\000\000\000\000\043\000\034\000\043\000\
\000\000\034\000\034\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\040\000\034\000\000\000\000\000\040\000\034\000\
\000\000\034\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\037\000\000\000\000\000\000\000\037\000\040\000\
\000\000\040\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\039\000\000\000\000\000\000\000\039\000\037\000\
\000\000\037\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\036\000\000\000\000\000\000\000\036\000\039\000\
\000\000\039\000\000\000\000\000\036\000\036\000\021\000\000\000\
\022\000\000\000\023\000\117\000\000\000\024\000\025\000\036\000\
\000\000\036\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\213\000\000\000\000\000\
\000\000\000\000\000\000\000\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\214\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\215\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\000\000\000\000\
\000\000\000\000\000\000\096\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\000\000\
\000\000\000\000\000\000\000\000\137\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\000\000\000\000\000\000\000\000\000\000\139\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\000\000\000\000\000\000\000\000\000\000\169\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\000\000\000\000\000\000\000\000\000\000\229\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\000\000\168\000\000\000\118\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\191\000\000\000\000\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\085\000\086\000\087\000\000\000\000\000\090\000\091\000\
\092\000\093\000\094\000\095\000\021\000\000\000\022\000\000\000\
\023\000\000\000\000\000\024\000\025\000\057\000\021\000\000\000\
\022\000\000\000\023\000\000\000\000\000\082\000\025\000"

let yycheck = "\048\000\
\019\000\050\000\065\000\121\000\026\000\013\000\069\000\020\000\
\118\000\108\000\029\000\009\001\009\001\016\001\001\000\022\001\
\012\001\030\000\116\000\027\000\018\001\019\001\029\001\045\000\
\122\000\047\000\013\001\049\000\009\001\025\001\017\001\034\001\
\002\001\011\001\004\001\057\000\006\001\059\000\016\001\009\001\
\010\001\011\001\016\001\153\000\052\000\053\000\044\001\045\001\
\009\001\036\001\048\001\048\001\050\001\171\000\067\000\037\001\
\064\000\013\001\036\001\108\000\159\000\035\001\013\001\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\172\000\097\000\046\001\176\000\100\000\011\001\
\036\001\007\001\008\001\009\001\016\001\036\001\000\000\000\001\
\001\001\012\001\003\001\209\000\005\001\112\000\013\001\114\000\
\009\001\009\001\106\000\012\001\010\001\123\000\025\001\016\001\
\036\001\002\001\224\000\004\001\021\001\006\001\159\000\013\001\
\009\001\010\001\037\001\037\001\025\001\036\001\031\001\032\001\
\033\001\047\001\141\000\013\001\187\000\188\000\013\001\012\001\
\177\000\213\000\214\000\215\000\034\001\217\000\218\000\048\001\
\049\001\013\001\051\001\013\001\025\001\034\001\016\001\012\001\
\016\001\013\001\036\001\034\001\034\001\046\001\234\000\173\000\
\174\000\175\000\238\000\177\000\025\001\012\001\180\000\031\001\
\036\001\035\001\012\001\035\001\213\000\214\000\215\000\026\001\
\217\000\218\000\025\001\017\001\013\001\026\001\013\001\025\001\
\198\000\026\001\000\001\014\001\229\000\203\000\204\000\205\000\
\206\000\234\000\001\001\009\001\003\001\238\000\005\001\012\001\
\012\001\026\001\009\001\009\001\036\001\012\001\017\001\011\001\
\016\001\016\001\017\001\016\001\016\001\015\001\021\001\012\001\
\020\001\021\001\022\001\001\001\012\001\003\001\012\001\005\001\
\031\001\032\001\033\001\009\001\032\001\012\001\012\001\035\001\
\012\001\012\001\016\001\036\001\020\001\021\001\022\001\021\001\
\013\001\048\001\049\001\013\001\051\001\029\001\030\001\009\001\
\013\001\031\001\032\001\033\001\014\001\015\001\013\001\026\001\
\018\001\019\001\017\001\013\001\011\001\009\001\012\001\009\001\
\023\001\024\001\048\001\049\001\014\001\051\001\011\001\011\001\
\018\001\019\001\013\001\034\001\038\001\036\001\040\001\041\001\
\042\001\043\001\044\001\045\001\011\001\013\001\048\001\012\001\
\050\001\036\001\026\001\013\001\038\001\013\001\040\001\041\001\
\042\001\043\001\044\001\045\001\009\001\039\001\048\001\011\001\
\050\001\014\001\013\001\013\001\016\001\018\001\019\001\017\001\
\020\001\021\001\022\001\000\000\013\001\023\001\024\001\025\001\
\026\001\027\001\028\001\013\001\032\001\026\001\017\001\035\001\
\034\001\038\001\036\001\040\001\041\001\042\001\043\001\044\001\
\045\001\026\001\011\001\048\001\013\001\050\001\016\001\016\001\
\017\001\015\001\009\000\020\001\021\001\022\001\023\001\024\001\
\016\001\026\001\027\001\028\001\029\001\030\001\013\001\159\000\
\177\000\034\001\017\001\036\001\229\000\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\013\001\066\000\255\255\034\001\017\001\036\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\013\001\255\255\255\255\034\001\017\001\036\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\013\001\255\255\255\255\034\001\
\017\001\036\001\255\255\020\001\021\001\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\030\001\013\001\255\255\
\255\255\034\001\017\001\036\001\255\255\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\013\001\255\255\255\255\034\001\017\001\036\001\255\255\020\001\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\013\001\255\255\255\255\034\001\017\001\036\001\
\255\255\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\013\001\030\001\255\255\255\255\017\001\034\001\
\255\255\036\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\013\001\255\255\255\255\255\255\017\001\034\001\
\255\255\036\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\013\001\255\255\255\255\255\255\017\001\034\001\
\255\255\036\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\013\001\255\255\255\255\255\255\017\001\034\001\
\255\255\036\001\255\255\255\255\023\001\024\001\002\001\255\255\
\004\001\255\255\006\001\013\001\255\255\009\001\010\001\034\001\
\255\255\036\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\036\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\036\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\036\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\036\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\036\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\017\001\255\255\034\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\002\001\255\255\004\001\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\002\001\255\255\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  HASH\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  TYPE_VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 47 "parser.mly"
                  ( Topdecs _1 )
# 532 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                        ( [] )
# 538 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 52 "parser.mly"
                        ( _1 :: _2 )
# 546 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 56 "parser.mly"
        ( GlobalDeclaration _1 )
# 553 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 57 "parser.mly"
                                                          ( Routine (Internal, _2, [], _4, _6) )
# 562 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 58 "parser.mly"
                                                          ( Routine (Internal, _2, _4, _7, _9) )
# 572 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 59 "parser.mly"
                                                          ( Routine (External, _2, [], _4, _6) )
# 581 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 60 "parser.mly"
                                                          ( Routine (External, _2, _4, _7, _9) )
# 591 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 61 "parser.mly"
                                                          ( Struct (_2, [], _4) )
# 599 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typ_vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 62 "parser.mly"
                                                          ( Struct (_2, _4, _7) )
# 608 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 66 "parser.mly"
                            ( [_1] )
# 615 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : char) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_vars) in
    Obj.repr(
# 67 "parser.mly"
                            ( _1 :: _3 )
# 623 "parser.ml"
               : 'typ_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
                        ( [_1] )
# 630 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_args) in
    Obj.repr(
# 72 "parser.mly"
                        ( _1 :: _3 )
# 638 "parser.ml"
               : 'typ_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                        ( T_Int )
# 644 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
                        ( T_Bool )
# 650 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                        ( T_Char )
# 656 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 79 "parser.mly"
                        ( T_Array _1 )
# 663 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                        ( T_Struct (_1, []) )
# 670 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ_args) in
    Obj.repr(
# 81 "parser.mly"
                        ( T_Struct (_1, _3) )
# 678 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 82 "parser.mly"
                        ( T_Generic _1 )
# 685 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 86 "parser.mly"
                                ( Block _2 )
# 692 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 90 "parser.mly"
                                                  ( Reference _1 )
# 699 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 91 "parser.mly"
                                                  ( Value _1 )
# 706 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 92 "parser.mly"
                                                  ( _2 )
# 713 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                                                      ( VarRef _1 )
# 720 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 728 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 98 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 736 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                                                      ( Null )
# 742 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 103 "parser.mly"
              ( Bool _1 )
# 749 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 104 "parser.mly"
              ( Int _1 )
# 756 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 105 "parser.mly"
              ( Char _1 )
# 763 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 106 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 771 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 107 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 779 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 108 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 787 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 109 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 795 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 110 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 803 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 111 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 811 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 112 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 819 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 113 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 827 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 114 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 835 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 115 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 843 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 116 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 851 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 117 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 858 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 118 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 865 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 119 "parser.mly"
                                                          ( ArraySize _2 )
# 872 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 120 "parser.mly"
                                                          ( GetInput _2 )
# 879 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 121 "parser.mly"
                                                          ( Lookup _2 )
# 886 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 122 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 894 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 123 "parser.mly"
                                                          ( ArrayLiteral _2 )
# 901 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 124 "parser.mly"
                                                          ( NewStruct (_2, [], _4) )
# 909 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 125 "parser.mly"
                                                          ( NewStruct (_2, _4, _7) )
# 918 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 129 "parser.mly"
                                                     ( Assign (_1, _3) )
# 926 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 130 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 934 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 131 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 942 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 132 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 950 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 133 "parser.mly"
                                                     ( Assign (_1, Value(Unary_op("!", _4))) )
# 958 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 134 "parser.mly"
                                                ( Call (_1, [], _3) )
# 966 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'typ_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 135 "parser.mly"
                                                ( Call (_1, _3, _6) )
# 975 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                                                ( Stop )
# 981 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                                                ( Halt )
# 987 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
                                                ( Break )
# 993 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                                                ( Continue )
# 999 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 140 "parser.mly"
                                                ( Print _2 )
# 1006 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
                 ( [] )
# 1012 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 145 "parser.mly"
                 ( _1 )
# 1019 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 149 "parser.mly"
                                              ( [_1] )
# 1026 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 150 "parser.mly"
                                              ( _1 :: _3 )
# 1034 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
          ( raise_offset_error "Error in arguments" ((symbol_start ())) )
# 1040 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                               ( [] )
# 1046 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 156 "parser.mly"
                               ( _1 :: _2 )
# 1054 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 160 "parser.mly"
                                                             ( Statement (_1, (symbol_start ())) )
# 1061 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 161 "parser.mly"
                                                             ( Declaration (_1, (symbol_start ())) )
# 1068 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 165 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 1076 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 166 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 1084 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 167 "parser.mly"
                                                             ( AssignDeclaration (false, _3, _1, _5) )
# 1093 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 168 "parser.mly"
                                                                   ( AssignDeclaration (true, _4, _1, _6) )
# 1102 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 169 "parser.mly"
                                                               ( VarDeclaration (false, _1, _4) )
# 1110 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 170 "parser.mly"
                                                               ( VarDeclaration (true, _1, _5) )
# 1118 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 174 "parser.mly"
                                                       ( Expression _1 )
# 1125 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 175 "parser.mly"
                                                       ( _1 )
# 1132 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 176 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1141 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 177 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1149 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 178 "parser.mly"
                                                             ( While (_3, _5) )
# 1157 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 179 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1165 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 180 "parser.mly"
                                                                                 ( Block([Declaration(_3, (symbol_start ())); Statement(While(_4, Block([Statement(_8, (symbol_start ())); Statement(Expression(_6), (symbol_start ()));])), (symbol_start ()));]) )
# 1175 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 181 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name), (symbol_start ())); 
      Statement(While(Value(Binary_op("<", Reference(VarRef var_name), Value _3)), 
        Block([
          Statement(_5, (symbol_start ())); 
          Statement(Expression(Assign(VarRef(var_name), Value(Binary_op("+", Value(Int 1), Reference(VarRef var_name))))), (symbol_start ()));
        ])
      ), (symbol_start ()));
    ]) 
  )
# 1194 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 193 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, T_Int, limit_name, Value(Lookup(_3))), (symbol_start ())); 
      Declaration(TypeDeclaration(false, T_Int, count_name), (symbol_start ())); 
      Statement(While(Value(Binary_op("<", Reference(VarRef count_name), Reference(VarRef limit_name))), 
        Block([
          Statement(_5, (symbol_start ())); 
          Statement(Expression(Assign(VarRef count_name, Value(Binary_op("+", Value(Int 1), Reference(VarRef count_name))))), (symbol_start ()));
        ])
      ), (symbol_start ()));
    ]) 
  )
# 1215 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "parser.mly"
               ( [] )
# 1221 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 211 "parser.mly"
               ( _1 )
# 1228 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 215 "parser.mly"
                           ( [_1] )
# 1235 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 216 "parser.mly"
                           ( _1 :: _3 )
# 1243 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "parser.mly"
          ( raise_offset_error "Error in parameter declaration" ((symbol_start ())) )
# 1249 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 221 "parser.mly"
                                    ( (true, _4, _1) )
# 1257 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 222 "parser.mly"
                                    ( (false, _3, _1) )
# 1265 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
