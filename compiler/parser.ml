type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | VAR
  | NULL
  | NEW
  | PRINT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number
# 68 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  266 (* ASSIGNMENT *);
  267 (* LPAR *);
  268 (* RPAR *);
  269 (* LBRACE *);
  270 (* RBRACE *);
  271 (* LBRAKE *);
  272 (* RBRAKE *);
  273 (* STOP *);
  274 (* HALT *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* TIMES *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* GT *);
  282 (* LTEQ *);
  283 (* GTEQ *);
  284 (* LOGIC_AND *);
  285 (* LOGIC_OR *);
  286 (* PIPE *);
  287 (* NOT *);
  288 (* VALUE *);
  289 (* COMMA *);
  290 (* DOT *);
  291 (* SEMI *);
  292 (* COLON *);
    0 (* EOF *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* WHILE *);
  296 (* UNTIL *);
  297 (* FOR *);
  298 (* REPEAT *);
  299 (* BREAK *);
  300 (* CONTINUE *);
  301 (* LOCKED *);
  302 (* STRUCT *);
  303 (* VAR *);
  304 (* NULL *);
  305 (* NEW *);
  306 (* PRINT *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  265 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\008\000\008\000\008\000\008\000\008\000\006\000\007\000\
\007\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\010\000\
\010\000\015\000\015\000\009\000\009\000\016\000\016\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\005\000\005\000\018\000\018\000\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\006\000\006\000\006\000\
\006\000\001\000\001\000\001\000\003\000\001\000\003\000\005\000\
\006\000\001\000\001\000\003\000\001\000\003\000\004\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\002\000\005\000\005\000\003\000\004\000\004\000\004\000\
\004\000\004\000\001\000\001\000\001\000\001\000\002\000\000\000\
\001\000\001\000\003\000\000\000\002\000\001\000\001\000\004\000\
\005\000\006\000\007\000\006\000\007\000\005\000\006\000\002\000\
\001\000\007\000\005\000\005\000\005\000\008\000\005\000\005\000\
\000\000\001\000\001\000\003\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\001\000\003\000\
\000\000\000\000\010\000\011\000\012\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\026\000\025\000\027\000\021\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\005\000\007\000\084\000\006\000\008\000\
\020\000\041\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\022\000\071\000\000\000\000\000\068\000\066\000\009\000\000\000\
\000\000\051\000\052\000\000\000\000\000\000\000\000\000\000\000\
\053\000\054\000\000\000\063\000\073\000\000\000\000\000\000\000\
\000\000\062\000\000\000\000\000\000\000\057\000\000\000\023\000\
\069\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\015\000\000\000\000\000\000\000\000\000\000\000\072\000\
\061\000\000\000\044\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\000\077\000\000\000\080\000\079\000\017\000\
\000\000\000\000\074\000\000\000\078\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\029\000\133\000\093\000\026\000\
\134\000\140\000\141\000\045\000\046\000\136\000\142\000\137\000\
\138\000\030\000\031\000"

let yysindex = "\027\000\
\048\255\000\000\023\255\032\255\029\255\057\255\000\000\082\000\
\048\255\000\000\099\255\106\255\003\255\109\255\000\000\000\000\
\132\255\132\255\000\000\000\000\000\000\000\000\084\255\017\255\
\108\255\076\255\132\255\110\255\137\255\000\000\135\255\157\255\
\000\000\000\000\000\000\000\000\084\255\084\255\051\255\084\255\
\051\255\000\000\187\000\247\000\127\255\000\000\084\255\160\255\
\090\255\084\255\084\255\166\255\000\000\161\255\002\255\004\255\
\132\255\004\255\182\000\163\255\238\255\000\000\127\255\181\255\
\159\255\084\255\084\255\084\255\084\255\084\255\084\255\084\255\
\084\255\084\255\084\255\084\255\000\000\084\255\184\255\008\001\
\084\255\084\255\000\000\025\001\042\001\000\000\169\255\211\001\
\202\255\158\255\209\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\255\013\255\163\255\163\255\000\000\183\001\
\183\001\014\000\014\000\014\000\014\000\000\000\163\255\125\001\
\000\000\000\000\059\001\076\001\000\000\000\000\000\000\202\255\
\255\254\000\000\000\000\214\255\216\255\229\255\230\255\234\255\
\000\000\000\000\084\255\000\000\000\000\233\255\195\255\193\255\
\158\255\000\000\237\255\240\255\110\001\000\000\139\001\000\000\
\000\000\000\000\084\255\084\255\084\255\084\255\245\255\084\255\
\000\000\000\000\084\255\248\255\249\255\251\255\253\255\000\000\
\000\000\084\255\000\000\084\255\000\000\005\000\200\000\218\000\
\236\000\084\255\150\001\094\255\006\000\150\001\084\255\084\255\
\084\255\084\255\008\000\000\000\000\000\194\255\194\255\194\255\
\093\001\194\255\194\255\150\001\150\001\150\001\150\001\235\255\
\010\000\255\255\000\000\000\000\079\255\000\000\000\000\000\000\
\194\255\028\000\000\000\194\255\000\000"

let yyrindex = "\000\000\
\039\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\000\000\000\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\029\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\255\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\137\255\000\000\065\000\083\000\000\000\227\255\
\165\000\197\255\117\000\133\000\149\000\000\000\101\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\255\
\236\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\000\000\019\255\000\000\000\000\000\000\
\000\000\000\000\137\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\161\001\172\001\024\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\255\091\255\095\255\096\255\001\000\
\236\255\146\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\052\001\000\000\186\255\094\000\034\000\201\255\247\255\
\194\000\019\000\002\000\217\255\172\000\137\000\155\255\000\000\
\208\255\022\001\000\000"

let yytablesize = 732
let yytable = "\061\000\
\016\000\063\000\096\000\019\000\019\000\020\000\020\000\021\000\
\021\000\147\000\022\000\022\000\023\000\033\000\049\000\034\000\
\090\000\035\000\019\000\132\000\020\000\036\000\021\000\037\000\
\044\000\022\000\047\000\001\000\086\000\153\000\058\000\011\000\
\038\000\065\000\013\000\045\000\086\000\091\000\059\000\060\000\
\012\000\062\000\039\000\040\000\041\000\089\000\088\000\024\000\
\080\000\025\000\135\000\084\000\085\000\058\000\003\000\004\000\
\005\000\086\000\045\000\036\000\042\000\043\000\180\000\048\000\
\013\000\014\000\132\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\120\000\112\000\
\170\000\015\000\115\000\116\000\033\000\051\000\034\000\193\000\
\035\000\092\000\052\000\095\000\036\000\006\000\037\000\122\000\
\123\000\135\000\042\000\082\000\046\000\143\000\047\000\038\000\
\052\000\186\000\048\000\049\000\078\000\017\000\053\000\032\000\
\172\000\039\000\040\000\041\000\018\000\050\000\085\000\027\000\
\054\000\129\000\130\000\046\000\083\000\047\000\042\000\079\000\
\131\000\048\000\049\000\042\000\043\000\194\000\195\000\196\000\
\200\000\198\000\199\000\085\000\028\000\078\000\135\000\135\000\
\135\000\055\000\135\000\135\000\056\000\167\000\168\000\169\000\
\203\000\171\000\075\000\205\000\174\000\135\000\075\000\075\000\
\079\000\135\000\075\000\075\000\135\000\166\000\121\000\057\000\
\058\000\081\000\090\000\185\000\087\000\100\000\122\000\123\000\
\188\000\189\000\190\000\191\000\179\000\086\000\075\000\068\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\099\000\
\113\000\075\000\124\000\075\000\125\000\126\000\127\000\128\000\
\129\000\130\000\193\000\119\000\155\000\042\000\090\000\131\000\
\033\000\078\000\122\000\123\000\033\000\156\000\157\000\158\000\
\052\000\139\000\033\000\033\000\033\000\033\000\033\000\033\000\
\148\000\159\000\149\000\160\000\079\000\033\000\124\000\033\000\
\125\000\126\000\127\000\128\000\129\000\130\000\030\000\150\000\
\151\000\042\000\030\000\131\000\152\000\021\000\154\000\162\000\
\030\000\030\000\021\000\163\000\078\000\005\000\021\000\021\000\
\021\000\175\000\176\000\030\000\177\000\030\000\178\000\016\000\
\016\000\016\000\021\000\098\000\091\000\021\000\018\000\079\000\
\181\000\187\000\018\000\192\000\147\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\066\000\067\000\068\000\018\000\201\000\018\000\002\000\204\000\
\042\000\075\000\076\000\081\000\042\000\014\000\016\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\039\000\083\000\016\000\042\000\039\000\042\000\
\060\000\039\000\039\000\173\000\039\000\039\000\039\000\039\000\
\039\000\039\000\161\000\039\000\036\000\202\000\094\000\039\000\
\036\000\039\000\000\000\036\000\036\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\036\000\038\000\000\000\
\000\000\036\000\038\000\036\000\000\000\038\000\038\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\000\000\038\000\
\029\000\000\000\000\000\038\000\029\000\038\000\000\000\029\000\
\029\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\035\000\029\000\000\000\000\000\035\000\029\000\000\000\029\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\032\000\000\000\000\000\000\000\032\000\035\000\000\000\035\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\034\000\000\000\000\000\000\000\034\000\032\000\000\000\032\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\031\000\000\000\000\000\000\000\031\000\034\000\000\000\034\000\
\000\000\000\000\031\000\031\000\019\000\000\000\020\000\000\000\
\021\000\097\000\000\000\064\000\000\000\031\000\000\000\031\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\182\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\183\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\184\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\000\000\000\000\
\000\000\077\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\000\000\
\000\000\000\000\114\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\000\000\
\000\000\000\000\000\000\117\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\000\000\000\000\000\000\118\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\000\000\000\000\000\000\145\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\000\000\000\000\000\000\000\000\000\000\146\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\000\000\000\000\000\000\000\000\000\000\197\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\000\000\144\000\000\000\164\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\165\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\066\000\067\000\068\000\000\000\000\000\071\000\072\000\
\073\000\074\000\075\000\076\000\019\000\000\000\020\000\000\000\
\021\000\000\000\000\000\022\000"

let yycheck = "\039\000\
\000\000\041\000\058\000\002\001\002\001\004\001\004\001\006\001\
\006\001\011\001\009\001\009\001\010\001\001\001\024\000\003\001\
\013\001\005\001\002\001\090\000\004\001\009\001\006\001\011\001\
\023\000\009\001\010\001\001\000\016\001\131\000\012\001\009\001\
\020\001\043\000\036\001\012\001\012\001\034\001\037\000\038\000\
\009\001\040\000\030\001\031\001\032\001\055\000\045\001\045\001\
\047\000\047\001\090\000\050\000\051\000\035\001\007\001\008\001\
\009\001\033\001\035\001\009\001\048\001\049\001\164\000\047\001\
\036\001\009\001\137\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\088\000\078\000\
\151\000\000\000\081\000\082\000\001\001\010\001\003\001\009\001\
\005\001\056\000\015\001\058\000\009\001\046\001\011\001\017\001\
\018\001\137\000\048\001\010\001\012\001\100\000\012\001\020\001\
\015\001\012\001\012\001\012\001\015\001\011\001\035\001\018\000\
\152\000\030\001\031\001\032\001\011\001\010\001\012\001\011\001\
\027\000\043\001\044\001\035\001\035\001\035\001\048\001\034\001\
\050\001\035\001\035\001\048\001\049\001\182\000\183\000\184\000\
\192\000\186\000\187\000\033\001\009\001\015\001\182\000\183\000\
\184\000\036\001\186\000\187\000\012\001\148\000\149\000\150\000\
\201\000\152\000\009\001\204\000\155\000\197\000\013\001\014\001\
\034\001\201\000\017\001\018\001\204\000\147\000\009\001\033\001\
\012\001\010\001\013\001\170\000\012\001\015\001\017\001\018\001\
\175\000\176\000\177\000\178\000\162\000\016\001\037\001\021\001\
\039\001\040\001\041\001\042\001\043\001\044\001\028\001\011\001\
\009\001\048\001\037\001\050\001\039\001\040\001\041\001\042\001\
\043\001\044\001\009\001\035\001\010\001\048\001\013\001\050\001\
\012\001\015\001\017\001\018\001\016\001\019\001\020\001\021\001\
\015\001\009\001\022\001\023\001\024\001\025\001\026\001\027\001\
\011\001\031\001\011\001\035\001\034\001\033\001\037\001\035\001\
\039\001\040\001\041\001\042\001\043\001\044\001\012\001\011\001\
\011\001\048\001\016\001\050\001\011\001\010\001\014\001\011\001\
\022\001\023\001\015\001\012\001\015\001\009\001\019\001\020\001\
\021\001\010\001\010\001\033\001\010\001\035\001\010\001\007\001\
\008\001\009\001\031\001\030\001\034\001\034\001\012\001\034\001\
\012\001\012\001\016\001\012\001\011\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\019\001\020\001\021\001\033\001\038\001\035\001\000\000\012\001\
\012\001\028\001\029\001\012\001\016\001\015\001\046\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\012\001\012\001\009\000\033\001\016\001\035\001\
\014\001\019\001\020\001\152\000\022\001\023\001\024\001\025\001\
\026\001\027\001\137\000\029\001\012\001\197\000\057\000\033\001\
\016\001\035\001\255\255\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\012\001\255\255\
\255\255\033\001\016\001\035\001\255\255\019\001\020\001\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\012\001\255\255\255\255\033\001\016\001\035\001\255\255\019\001\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\012\001\029\001\255\255\255\255\016\001\033\001\255\255\035\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\012\001\255\255\255\255\255\255\016\001\033\001\255\255\035\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\012\001\255\255\255\255\255\255\016\001\033\001\255\255\035\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\012\001\255\255\255\255\255\255\016\001\033\001\255\255\035\001\
\255\255\255\255\022\001\023\001\002\001\255\255\004\001\255\255\
\006\001\012\001\255\255\009\001\255\255\033\001\255\255\035\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\035\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\035\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\035\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\035\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\016\001\255\255\033\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\002\001\255\255\004\001\255\255\
\006\001\255\255\255\255\009\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  VAR\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 45 "parser.mly"
                  ( Topdecs _1 )
# 499 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                        ( [] )
# 505 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 50 "parser.mly"
                        ( _1 :: _2 )
# 513 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 54 "parser.mly"
        ( GlobalDeclaration _1 )
# 520 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 55 "parser.mly"
                                                   ( Routine (Internal, _2, _4, _6) )
# 529 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 56 "parser.mly"
                                                   ( Routine (External, _2, _4, _6) )
# 538 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 57 "parser.mly"
                                                   ( Routine (Internal, _2, _4, Block _6) )
# 547 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 58 "parser.mly"
                                                   ( Routine (External, _2, _4, Block _6) )
# 556 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 59 "parser.mly"
                                                   ( Struct (_2, _4) )
# 564 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                        ( T_Int )
# 570 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                        ( T_Bool )
# 576 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                        ( T_Char )
# 582 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 66 "parser.mly"
                        ( T_Array _1 )
# 589 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
                        ( T_Struct _1 )
# 596 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 71 "parser.mly"
                                ( Block _2 )
# 603 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 75 "parser.mly"
                                 ( [Statement (Expression (Call(_2, _4)))] )
# 611 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arguments) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 76 "parser.mly"
                                       ( (Statement (Expression (Call (_2, _4)))) :: _6 )
# 620 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 80 "parser.mly"
                                                  ( Reference _1 )
# 627 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 81 "parser.mly"
                                                  ( Value _1 )
# 634 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 82 "parser.mly"
                                                  ( _2 )
# 641 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "parser.mly"
                                                      ( VarRef _1 )
# 648 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 656 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 88 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 664 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                                                      ( Null )
# 670 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 93 "parser.mly"
              ( Bool _1 )
# 677 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 94 "parser.mly"
              ( Int _1 )
# 684 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 95 "parser.mly"
              ( Char _1 )
# 691 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 96 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 699 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 97 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 707 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 98 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 715 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 99 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 723 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 100 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 731 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 101 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 739 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 102 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 747 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 103 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 755 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 104 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 763 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 105 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 771 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 106 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 779 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 107 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 786 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 108 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 793 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 109 "parser.mly"
                                                          ( ArraySize _2 )
# 800 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 110 "parser.mly"
                                                          ( Lookup _2 )
# 807 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 111 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 815 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 112 "parser.mly"
                                                          ( NewStruct (_2, _4) )
# 823 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 116 "parser.mly"
                                                     ( Assign (_1, _3) )
# 831 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 117 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 839 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 118 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 847 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 119 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 855 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 120 "parser.mly"
                                                     ( Assign (_1, Value(Unary_op("!", _4))) )
# 863 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 121 "parser.mly"
                                                ( Call (_1, _3) )
# 871 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
                                                ( Stop )
# 877 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                                                ( Halt )
# 883 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
                                                ( Break )
# 889 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                                                ( Continue )
# 895 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 126 "parser.mly"
                                                ( Print _2 )
# 902 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
                 ( [] )
# 908 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 131 "parser.mly"
                 ( _1 )
# 915 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 135 "parser.mly"
                                              ( [_1] )
# 922 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 136 "parser.mly"
                                              ( _1 :: _3 )
# 930 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                               ( [] )
# 936 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 141 "parser.mly"
                               ( _1 :: _2)
# 944 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 145 "parser.mly"
                                                             ( Statement _1 )
# 951 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 146 "parser.mly"
                                                             ( Declaration _1 )
# 958 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 150 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 966 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 151 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 974 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 152 "parser.mly"
                                                             ( AssignDeclaration (false, _3, _1, _5) )
# 983 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 153 "parser.mly"
                                                                   ( AssignDeclaration (true, _4, _1, _6) )
# 992 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 154 "parser.mly"
                                                                   ( VarDeclaration (false, _1, _5) )
# 1000 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 155 "parser.mly"
                                                                   ( VarDeclaration (true, _1, _6) )
# 1008 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 156 "parser.mly"
                                                               ( VarDeclaration (false, _1, _4) )
# 1016 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 157 "parser.mly"
                                                               ( VarDeclaration (true, _1, _5) )
# 1024 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 161 "parser.mly"
                                                       ( Expression _1 )
# 1031 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 162 "parser.mly"
                                                       ( _1 )
# 1038 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 163 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1047 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 164 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1055 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 165 "parser.mly"
                                                             ( While (_3, _5) )
# 1063 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 166 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1071 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 167 "parser.mly"
                                                                                 ( Block([Declaration(_3); Statement(While(_4, Block([Statement(_8); Statement(Expression(_6));])));]) )
# 1081 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 168 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name)); 
      Statement(While(Value(Binary_op("<", Reference(VarRef var_name), Value _3)), 
        Block([
          Statement(_5); 
          Statement(Expression(Assign(VarRef(var_name), Value(Binary_op("+", Value(Int 1), Reference(VarRef var_name))))));
        ])
      ));
    ]) 
  )
# 1100 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 180 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, T_Int, limit_name, Value(Lookup(_3)))); 
      Declaration(TypeDeclaration(false, T_Int, count_name)); 
      Statement(While(Value(Binary_op("<", Reference(VarRef count_name), Reference(VarRef limit_name))), 
        Block([
          Statement(_5); 
          Statement(Expression(Assign(VarRef count_name, Value(Binary_op("+", Value(Int 1), Reference(VarRef count_name))))));
        ])
      ));
    ]) 
  )
# 1121 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
               ( [] )
# 1127 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 198 "parser.mly"
               ( _1 )
# 1134 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 202 "parser.mly"
                           ( [_1] )
# 1141 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 203 "parser.mly"
                           ( _1 :: _3 )
# 1149 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 207 "parser.mly"
                                    ( (true, _4, _1) )
# 1157 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 208 "parser.mly"
                                    ( (false, _3, _1) )
# 1165 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
