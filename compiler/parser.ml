type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | VAR
  | NULL
  | NEW
  | PRINT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions
# 58 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  261 (* INTERNAL *);
  262 (* EXTERNAL *);
  264 (* ASSIGNMENT *);
  265 (* LPAR *);
  266 (* RPAR *);
  267 (* LBRACE *);
  268 (* RBRACE *);
  269 (* LBRAKE *);
  270 (* RBRAKE *);
  271 (* STOP *);
  272 (* HALT *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* GT *);
  280 (* LTEQ *);
  281 (* GTEQ *);
  282 (* LOGIC_AND *);
  283 (* LOGIC_OR *);
  284 (* PIPE *);
  285 (* NOT *);
  286 (* VALUE *);
  287 (* COMMA *);
  288 (* DOT *);
  289 (* SEMI *);
  290 (* COLON *);
    0 (* EOF *);
  291 (* IF *);
  292 (* ELSE *);
  293 (* WHILE *);
  294 (* UNTIL *);
  295 (* FOR *);
  296 (* BREAK *);
  297 (* CONTINUE *);
  298 (* LOCKED *);
  299 (* STRUCT *);
  300 (* VAR *);
  301 (* NULL *);
  302 (* NEW *);
  303 (* PRINT *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  263 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\004\000\004\000\004\000\
\007\000\008\000\008\000\005\000\005\000\005\000\005\000\005\000\
\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\010\000\010\000\014\000\014\000\009\000\009\000\015\000\015\000\
\017\000\017\000\017\000\017\000\017\000\017\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\006\000\006\000\018\000\
\018\000\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\004\000\005\000\006\000\007\000\006\000\
\006\000\006\000\006\000\006\000\001\000\001\000\003\000\001\000\
\003\000\005\000\006\000\001\000\001\000\005\000\005\000\003\000\
\001\000\004\000\004\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\002\000\003\000\004\000\004\000\
\004\000\004\000\004\000\001\000\001\000\001\000\001\000\002\000\
\000\000\001\000\001\000\003\000\000\000\002\000\001\000\001\000\
\004\000\005\000\006\000\007\000\006\000\007\000\002\000\001\000\
\007\000\005\000\005\000\005\000\008\000\000\000\001\000\001\000\
\003\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\003\000\000\000\
\000\000\013\000\014\000\016\000\000\000\000\000\000\000\000\000\
\000\000\079\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\030\000\
\029\000\025\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\021\000\015\000\000\000\000\000\000\000\
\000\000\000\000\008\000\010\000\081\000\009\000\011\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\012\000\000\000\000\000\052\000\
\053\000\000\000\000\000\000\000\000\000\054\000\055\000\000\000\
\072\000\000\000\000\000\000\000\000\000\063\000\064\000\000\000\
\007\000\024\000\044\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\071\000\
\062\000\000\000\000\000\000\000\058\000\000\000\026\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\022\000\051\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\000\000\066\000\000\000\000\000\000\000\
\000\000\075\000\076\000\000\000\019\000\000\000\000\000\069\000\
\067\000\000\000\000\000\070\000\068\000\073\000\000\000\077\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\022\000\139\000\025\000\097\000\060\000\
\098\000\140\000\051\000\052\000\100\000\141\000\101\000\102\000\
\103\000\026\000\027\000"

let yysindex = "\016\000\
\016\255\000\000\019\255\048\255\093\255\092\255\000\000\138\000\
\016\255\131\255\142\255\036\255\139\255\000\000\000\000\146\255\
\146\255\000\000\000\000\000\000\110\000\064\255\146\255\130\255\
\157\255\000\000\144\255\160\255\076\255\132\255\167\255\000\000\
\168\255\079\255\126\255\146\255\126\255\132\255\000\000\000\000\
\000\000\000\000\132\255\132\255\004\255\132\255\004\255\000\000\
\126\000\239\000\176\255\000\000\000\000\164\255\110\000\190\255\
\172\255\201\255\000\000\000\000\000\000\000\000\000\000\000\001\
\174\000\154\255\017\255\000\000\176\255\202\255\213\255\132\255\
\132\255\132\255\132\255\132\255\132\255\132\255\132\255\132\255\
\132\255\132\255\000\000\156\255\000\000\190\255\005\255\000\000\
\000\000\205\255\218\255\222\255\235\255\000\000\000\000\132\255\
\000\000\231\255\187\255\214\255\172\255\000\000\000\000\240\255\
\000\000\000\000\000\000\132\255\073\255\154\255\154\255\000\000\
\167\001\167\001\178\001\178\001\178\001\178\001\000\000\154\255\
\239\255\131\001\132\255\002\255\132\255\132\255\132\255\244\255\
\156\001\000\000\132\255\249\255\250\255\252\255\003\000\000\000\
\000\000\132\255\102\001\009\000\000\000\145\001\000\000\000\000\
\242\255\003\255\022\000\099\255\192\000\210\000\228\000\225\255\
\132\255\156\001\132\255\132\255\132\255\132\255\014\000\132\255\
\000\000\000\000\000\000\023\000\158\255\132\255\132\255\000\000\
\183\255\183\255\183\255\017\001\156\001\156\001\156\001\156\001\
\002\000\000\000\132\255\132\255\000\000\034\001\051\001\018\000\
\013\000\000\000\000\000\089\255\000\000\068\001\085\001\000\000\
\000\000\183\255\042\000\000\000\000\000\000\000\183\255\000\000"

let yyrindex = "\000\000\
\059\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\001\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\053\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\000\000\000\000\065\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\215\255\000\000\000\000\000\000\000\000\162\255\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\251\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\237\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\033\000\051\000\000\000\
\149\000\157\000\085\000\101\000\117\000\133\000\000\000\069\000\
\117\001\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\008\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\182\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\255\080\255\090\255\098\255\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\237\255\
\013\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\072\001\000\000\238\255\245\255\019\000\234\255\227\255\
\240\000\228\255\211\255\000\000\156\000\193\000\000\000\179\255\
\226\000\065\001\000\000"

let yytablesize = 717
let yytable = "\067\000\
\018\000\069\000\029\000\018\000\018\000\019\000\019\000\063\000\
\020\000\020\000\042\000\099\000\059\000\123\000\062\000\056\000\
\001\000\056\000\050\000\074\000\003\000\004\000\005\000\074\000\
\074\000\010\000\064\000\074\000\074\000\084\000\071\000\065\000\
\066\000\046\000\068\000\028\000\086\000\018\000\124\000\019\000\
\056\000\033\000\020\000\146\000\107\000\147\000\164\000\074\000\
\048\000\074\000\074\000\074\000\074\000\074\000\011\000\099\000\
\046\000\074\000\006\000\074\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\119\000\120\000\030\000\
\122\000\040\000\080\000\041\000\031\000\021\000\080\000\042\000\
\018\000\043\000\019\000\038\000\129\000\020\000\053\000\047\000\
\031\000\048\000\044\000\185\000\186\000\187\000\145\000\184\000\
\032\000\142\000\013\000\049\000\045\000\046\000\047\000\088\000\
\089\000\148\000\167\000\050\000\039\000\159\000\047\000\031\000\
\048\000\149\000\150\000\151\000\198\000\048\000\049\000\154\000\
\055\000\200\000\049\000\099\000\099\000\099\000\012\000\165\000\
\094\000\095\000\050\000\168\000\040\000\048\000\041\000\096\000\
\057\000\014\000\042\000\016\000\043\000\172\000\099\000\173\000\
\174\000\175\000\176\000\189\000\099\000\044\000\017\000\023\000\
\024\000\099\000\182\000\183\000\040\000\058\000\041\000\045\000\
\046\000\047\000\121\000\034\000\043\000\180\000\035\000\190\000\
\191\000\037\000\031\000\083\000\074\000\044\000\036\000\083\000\
\048\000\049\000\087\000\081\000\053\000\054\000\057\000\045\000\
\046\000\047\000\088\000\089\000\084\000\184\000\181\000\059\000\
\083\000\057\000\131\000\059\000\085\000\088\000\089\000\084\000\
\048\000\049\000\031\000\132\000\133\000\134\000\090\000\104\000\
\091\000\092\000\093\000\094\000\095\000\125\000\108\000\135\000\
\048\000\090\000\096\000\091\000\092\000\093\000\094\000\095\000\
\020\000\109\000\126\000\048\000\020\000\096\000\127\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\130\000\128\000\025\000\020\000\136\000\020\000\
\138\000\025\000\152\000\163\000\143\000\025\000\025\000\025\000\
\155\000\156\000\124\000\157\000\045\000\018\000\018\000\018\000\
\045\000\025\000\158\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\161\000\177\000\
\042\000\045\000\123\000\045\000\042\000\166\000\179\000\042\000\
\042\000\058\000\042\000\042\000\042\000\042\000\042\000\042\000\
\082\000\042\000\039\000\018\000\082\000\042\000\039\000\042\000\
\194\000\039\000\039\000\199\000\039\000\039\000\039\000\039\000\
\039\000\039\000\002\000\039\000\041\000\082\000\078\000\039\000\
\041\000\039\000\061\000\041\000\041\000\078\000\041\000\041\000\
\041\000\041\000\041\000\041\000\057\000\041\000\032\000\057\000\
\015\000\041\000\032\000\041\000\137\000\032\000\032\000\195\000\
\032\000\032\000\032\000\032\000\032\000\032\000\036\000\032\000\
\178\000\153\000\036\000\032\000\061\000\032\000\000\000\000\000\
\036\000\036\000\036\000\036\000\036\000\036\000\038\000\018\000\
\000\000\019\000\038\000\036\000\020\000\036\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\035\000\018\000\
\000\000\019\000\035\000\038\000\070\000\038\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\037\000\000\000\
\000\000\000\000\037\000\035\000\000\000\035\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\033\000\000\000\
\000\000\000\000\033\000\037\000\000\000\037\000\034\000\000\000\
\033\000\033\000\034\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\000\000\033\000\000\000\033\000\000\000\106\000\
\000\000\000\000\000\000\034\000\000\000\034\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\169\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\170\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\171\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\000\000\000\000\000\000\000\000\000\000\083\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\000\000\000\000\000\000\000\000\000\000\
\105\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\000\000\000\000\000\000\000\000\
\000\000\188\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\000\000\
\000\000\000\000\192\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\000\000\000\000\
\000\000\000\000\000\000\193\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\000\000\
\000\000\000\000\000\000\000\000\196\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\000\000\000\000\000\000\000\000\000\000\197\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\025\000\000\000\000\000\160\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\144\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\162\000\000\000\
\000\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\072\000\
\073\000\074\000\000\000\000\000\077\000\078\000\079\000\080\000\
\081\000\082\000\072\000\073\000\074\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\082\000"

let yycheck = "\045\000\
\000\000\047\000\021\000\002\001\002\001\004\001\004\001\037\000\
\007\001\007\001\007\001\057\000\035\000\009\001\037\000\034\000\
\001\000\010\001\030\000\007\001\005\001\006\001\007\001\011\001\
\012\001\007\001\038\000\015\001\016\001\013\001\049\000\043\000\
\044\000\010\001\046\000\017\000\055\000\002\001\034\001\004\001\
\033\001\023\000\007\001\042\001\028\001\044\001\044\001\035\001\
\045\001\037\001\038\001\039\001\040\001\041\001\007\001\101\000\
\033\001\045\001\043\001\047\001\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\008\001\
\084\000\001\001\010\001\003\001\013\001\042\001\014\001\007\001\
\002\001\009\001\004\001\008\001\096\000\007\001\014\001\010\001\
\013\001\010\001\018\001\169\000\170\000\171\000\123\000\007\001\
\033\001\109\000\007\001\010\001\028\001\029\001\030\001\015\001\
\016\001\124\000\008\001\010\001\033\001\138\000\033\001\013\001\
\033\001\125\000\126\000\127\000\194\000\045\001\046\001\131\000\
\042\001\199\000\033\001\169\000\170\000\171\000\034\001\146\000\
\040\001\041\001\033\001\033\001\001\001\045\001\003\001\047\001\
\011\001\000\000\007\001\009\001\009\001\153\000\188\000\155\000\
\156\000\157\000\158\000\177\000\194\000\018\001\009\001\013\001\
\007\001\199\000\166\000\167\000\001\001\032\001\003\001\028\001\
\029\001\030\001\007\001\034\001\009\001\008\001\010\001\179\000\
\180\000\010\001\013\001\010\001\019\001\018\001\031\001\014\001\
\045\001\046\001\007\001\026\001\014\001\014\001\011\001\028\001\
\029\001\030\001\015\001\016\001\013\001\007\001\033\001\010\001\
\031\001\011\001\008\001\014\001\033\001\015\001\016\001\013\001\
\045\001\046\001\013\001\017\001\018\001\019\001\035\001\007\001\
\037\001\038\001\039\001\040\001\041\001\009\001\013\001\029\001\
\045\001\035\001\047\001\037\001\038\001\039\001\040\001\041\001\
\010\001\013\001\009\001\045\001\014\001\047\001\009\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\012\001\009\001\008\001\031\001\033\001\033\001\
\009\001\013\001\007\001\010\001\014\001\017\001\018\001\019\001\
\008\001\008\001\034\001\008\001\010\001\005\001\006\001\007\001\
\014\001\029\001\008\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\014\001\010\001\
\010\001\031\001\009\001\033\001\014\001\008\001\008\001\017\001\
\018\001\032\001\020\001\021\001\022\001\023\001\024\001\025\001\
\010\001\027\001\010\001\043\001\014\001\031\001\014\001\033\001\
\036\001\017\001\018\001\010\001\020\001\021\001\022\001\023\001\
\024\001\025\001\000\000\027\001\010\001\031\001\010\001\031\001\
\014\001\033\001\012\001\017\001\018\001\014\001\020\001\021\001\
\022\001\023\001\024\001\025\001\014\001\027\001\010\001\010\001\
\009\000\031\001\014\001\033\001\101\000\017\001\018\001\188\000\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\027\001\
\160\000\128\000\014\001\031\001\036\000\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\002\001\
\255\255\004\001\014\001\031\001\007\001\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\002\001\
\255\255\004\001\014\001\031\001\007\001\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\255\255\
\255\255\255\255\014\001\031\001\255\255\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\255\255\
\255\255\255\255\014\001\031\001\255\255\033\001\010\001\255\255\
\020\001\021\001\014\001\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\031\001\255\255\033\001\255\255\010\001\
\255\255\255\255\255\255\031\001\255\255\033\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\013\001\255\255\255\255\031\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\017\001\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  INTERNAL\000\
  EXTERNAL\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  VAR\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 36 "parser.mly"
                  ( Topdecs _1 )
# 476 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                        ( [] )
# 482 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 41 "parser.mly"
                        ( _1 :: _2 )
# 490 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 45 "parser.mly"
                                                              ( Global (false, _3, _1) )
# 498 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 46 "parser.mly"
                                                                    ( Global (true, _4, _1) )
# 506 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 47 "parser.mly"
                                                                    ( GlobalAssign (false, _3, _1, _5)   )
# 515 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 48 "parser.mly"
                                                                    ( GlobalAssign (true, _4, _1, _6)    )
# 524 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 49 "parser.mly"
                                                   ( Routine (Internal, _2, _4, _6) )
# 533 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 50 "parser.mly"
                                                   ( Routine (External, _2, _4, _6) )
# 542 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 51 "parser.mly"
                                                   ( Routine (Internal, _2, _4, Block _6) )
# 551 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 52 "parser.mly"
                                                   ( Routine (External, _2, _4, Block _6) )
# 560 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 53 "parser.mly"
                                                   ( Struct (_2, _4) )
# 568 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                        ( T_Int )
# 574 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                        ( T_Bool )
# 580 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 59 "parser.mly"
                        ( T_Array _1 )
# 587 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                        ( T_Struct _1 )
# 594 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 64 "parser.mly"
                                ( Block _2 )
# 601 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 68 "parser.mly"
                                 ( [Statement (Expression (Call(_2, _4)))] )
# 609 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arguments) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 69 "parser.mly"
                                       ( (Statement (Expression (Call (_2, _4)))) :: _6 )
# 618 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 73 "parser.mly"
                                                  ( Reference _1 )
# 625 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 74 "parser.mly"
                                                  ( Value _1 )
# 632 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 75 "parser.mly"
                                                  ( NewArray (_2, _4) )
# 640 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 76 "parser.mly"
                                                  ( NewStruct (_2, _4) )
# 648 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 77 "parser.mly"
                                                  ( _2 )
# 655 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                                                      ( VarRef _1 )
# 662 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 82 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 670 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 83 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 678 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                                                      ( Null )
# 684 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 88 "parser.mly"
              ( Bool _1 )
# 691 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 89 "parser.mly"
              ( Int _1 )
# 698 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 90 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 706 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 91 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 714 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 92 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 722 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 93 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 730 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 94 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 738 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 95 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 746 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 96 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 754 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 97 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 762 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 98 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 770 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 99 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 778 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 100 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 786 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 101 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 793 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 102 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 800 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 103 "parser.mly"
                                                          ( ArraySize _2 )
# 807 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 104 "parser.mly"
                                                          ( Lookup _2 )
# 814 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 108 "parser.mly"
                                                     ( Assign ("", _1, _3) )
# 822 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 109 "parser.mly"
                                                     ( Assign ("+", _1, _4) )
# 830 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 110 "parser.mly"
                                                     ( Assign ("-", _1, _4) )
# 838 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 111 "parser.mly"
                                                     ( Assign ("*", _1, _4) )
# 846 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 112 "parser.mly"
                                                     ( Assign ("!", _1, _4) )
# 854 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 113 "parser.mly"
                                                ( Call (_1, _3) )
# 862 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                                                ( Stop )
# 868 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                                                ( Halt )
# 874 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                                                ( Break )
# 880 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                                                ( Continue )
# 886 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 118 "parser.mly"
                                                ( Print _2 )
# 893 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
                 ( [] )
# 899 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 123 "parser.mly"
                 ( _1 )
# 906 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 127 "parser.mly"
                                              ( [_1] )
# 913 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 128 "parser.mly"
                                              ( _1 :: _3 )
# 921 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                               ( [] )
# 927 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 133 "parser.mly"
                               ( _1 :: _2)
# 935 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 137 "parser.mly"
                                                             ( Statement _1 )
# 942 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 138 "parser.mly"
                                                             ( Declaration _1 )
# 949 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 142 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 957 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 143 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 965 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 144 "parser.mly"
                                                             ( AssignDeclaration (false, _3, _1, _5) )
# 974 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 145 "parser.mly"
                                                                   ( AssignDeclaration (true, _4, _1, _6) )
# 983 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 146 "parser.mly"
                                                                   ( VarDeclaration (false, _1, _5) )
# 991 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 147 "parser.mly"
                                                                   ( VarDeclaration (true, _1, _6) )
# 999 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 151 "parser.mly"
                                                       ( Expression _1 )
# 1006 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 152 "parser.mly"
                                                       ( _1 )
# 1013 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 153 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1022 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 154 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1030 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 155 "parser.mly"
                                                             ( While (_3, _5) )
# 1038 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 156 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1046 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 157 "parser.mly"
                                                                                 ( For (_3, _4, _6, _8) )
# 1056 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
               ( [] )
# 1062 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 162 "parser.mly"
               ( _1 )
# 1069 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 166 "parser.mly"
                           ( [_1] )
# 1076 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 167 "parser.mly"
                           ( _1 :: _3 )
# 1084 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 171 "parser.mly"
                                    ( (true, _4, _1) )
# 1092 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 172 "parser.mly"
                                    ( (false, _3, _1) )
# 1100 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
