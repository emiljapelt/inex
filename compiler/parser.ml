type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | CSTCHAR of (char)
  | CHAR
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | VAR
  | NULL
  | NEW
  | PRINT
  | HASH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number
# 69 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  262 (* CHAR *);
  263 (* INTERNAL *);
  264 (* EXTERNAL *);
  266 (* ASSIGNMENT *);
  267 (* LPAR *);
  268 (* RPAR *);
  269 (* LBRACE *);
  270 (* RBRACE *);
  271 (* LBRAKE *);
  272 (* RBRAKE *);
  273 (* STOP *);
  274 (* HALT *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* TIMES *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* GT *);
  282 (* LTEQ *);
  283 (* GTEQ *);
  284 (* LOGIC_AND *);
  285 (* LOGIC_OR *);
  286 (* PIPE *);
  287 (* NOT *);
  288 (* VALUE *);
  289 (* COMMA *);
  290 (* DOT *);
  291 (* SEMI *);
  292 (* COLON *);
    0 (* EOF *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* WHILE *);
  296 (* UNTIL *);
  297 (* FOR *);
  298 (* REPEAT *);
  299 (* BREAK *);
  300 (* CONTINUE *);
  301 (* LOCKED *);
  302 (* STRUCT *);
  303 (* VAR *);
  304 (* NULL *);
  305 (* NEW *);
  306 (* PRINT *);
  307 (* HASH *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  261 (* CSTCHAR *);
  265 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\008\000\008\000\008\000\008\000\008\000\006\000\007\000\
\007\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\010\000\010\000\015\000\015\000\009\000\009\000\016\000\016\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\005\000\005\000\018\000\018\000\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\006\000\006\000\006\000\
\006\000\001\000\001\000\001\000\003\000\001\000\003\000\005\000\
\006\000\001\000\001\000\003\000\001\000\003\000\004\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\002\000\002\000\005\000\005\000\003\000\004\000\004\000\
\004\000\004\000\004\000\001\000\001\000\001\000\001\000\002\000\
\000\000\001\000\001\000\003\000\000\000\002\000\001\000\001\000\
\004\000\005\000\006\000\007\000\006\000\007\000\005\000\006\000\
\002\000\001\000\007\000\005\000\005\000\005\000\008\000\005\000\
\005\000\000\000\001\000\001\000\003\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\088\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\001\000\003\000\
\000\000\000\000\010\000\011\000\012\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000\000\000\000\000\
\026\000\025\000\027\000\021\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\000\000\000\000\000\000\000\000\066\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\005\000\007\000\085\000\
\006\000\008\000\020\000\041\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\022\000\072\000\000\000\000\000\069\000\067\000\
\009\000\000\000\000\000\052\000\053\000\000\000\000\000\000\000\
\000\000\000\000\054\000\055\000\000\000\064\000\074\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\058\000\
\000\000\023\000\070\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\015\000\000\000\000\000\000\000\000\000\
\000\000\073\000\062\000\000\000\045\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\000\078\000\000\000\081\000\
\080\000\017\000\000\000\000\000\075\000\000\000\079\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\029\000\135\000\095\000\026\000\
\136\000\142\000\143\000\046\000\047\000\138\000\144\000\139\000\
\140\000\030\000\031\000"

let yysindex = "\008\000\
\039\255\000\000\010\255\012\255\249\254\049\255\000\000\061\000\
\039\255\000\000\022\255\051\255\004\255\084\255\000\000\000\000\
\092\255\092\255\000\000\000\000\000\000\000\000\121\255\016\255\
\097\255\024\255\092\255\075\255\098\255\000\000\107\255\113\255\
\000\000\000\000\000\000\000\000\121\255\121\255\002\255\121\255\
\002\255\000\000\192\000\227\001\003\001\173\255\000\000\121\255\
\133\255\030\255\121\255\121\255\141\255\000\000\150\255\026\255\
\110\255\092\255\110\255\194\000\036\255\144\255\000\000\173\255\
\154\255\151\255\153\255\121\255\121\255\121\255\121\255\121\255\
\121\255\121\255\121\255\121\255\121\255\121\255\000\000\121\255\
\164\255\020\001\121\255\121\255\000\000\037\001\054\001\000\000\
\142\255\227\001\153\255\162\255\182\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\121\255\088\255\036\255\036\255\
\000\000\195\001\195\001\206\001\206\001\206\001\206\001\000\000\
\036\255\137\001\000\000\000\000\071\001\088\001\000\000\000\000\
\000\000\153\255\001\255\000\000\000\000\175\255\189\255\198\255\
\203\255\211\255\000\000\000\000\121\255\000\000\000\000\181\255\
\177\255\201\255\162\255\000\000\224\255\231\255\122\001\000\000\
\151\001\000\000\000\000\000\000\121\255\121\255\121\255\121\255\
\237\255\121\255\000\000\000\000\121\255\235\255\247\255\248\255\
\249\255\000\000\000\000\121\255\000\000\121\255\000\000\014\000\
\212\000\230\000\248\000\121\255\162\001\067\000\015\000\162\001\
\121\255\121\255\121\255\121\255\019\000\000\000\000\000\212\255\
\212\255\212\255\105\001\212\255\212\255\162\001\162\001\162\001\
\162\001\227\255\002\000\230\255\000\000\000\000\085\255\000\000\
\000\000\000\000\212\255\031\000\000\000\212\255\000\000"

let yyrindex = "\000\000\
\044\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\251\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\013\000\
\049\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\115\255\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\098\255\000\000\069\000\087\000\
\000\000\169\000\177\000\215\255\121\000\137\000\153\000\000\000\
\105\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\130\255\213\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\031\255\000\000\
\000\000\000\000\000\000\000\000\098\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\098\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\173\001\184\001\048\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\255\057\255\074\255\
\086\255\001\000\213\255\176\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\056\001\000\000\171\255\078\000\214\255\200\255\236\255\
\189\000\123\255\004\000\217\255\185\000\144\000\128\255\000\000\
\184\255\032\001\000\000"

let yytablesize = 748
let yytable = "\062\000\
\016\000\064\000\098\000\050\000\155\000\019\000\134\000\020\000\
\001\000\021\000\036\000\149\000\022\000\023\000\094\000\168\000\
\097\000\019\000\011\000\020\000\012\000\021\000\066\000\067\000\
\022\000\048\000\045\000\019\000\013\000\020\000\181\000\021\000\
\017\000\052\000\022\000\091\000\013\000\182\000\053\000\084\000\
\060\000\061\000\059\000\063\000\053\000\003\000\004\000\005\000\
\024\000\042\000\025\000\082\000\137\000\134\000\086\000\087\000\
\070\000\014\000\054\000\046\000\015\000\018\000\049\000\077\000\
\085\000\059\000\047\000\172\000\048\000\122\000\090\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\046\000\114\000\006\000\049\000\117\000\118\000\
\033\000\047\000\034\000\048\000\035\000\195\000\027\000\032\000\
\036\000\050\000\037\000\137\000\028\000\124\000\125\000\088\000\
\055\000\145\000\051\000\038\000\049\000\057\000\056\000\196\000\
\197\000\198\000\174\000\200\000\201\000\039\000\040\000\041\000\
\050\000\033\000\092\000\034\000\059\000\035\000\087\000\131\000\
\132\000\036\000\205\000\037\000\042\000\207\000\133\000\042\000\
\043\000\202\000\044\000\058\000\038\000\086\000\083\000\093\000\
\137\000\137\000\137\000\087\000\137\000\137\000\039\000\040\000\
\041\000\169\000\170\000\171\000\088\000\173\000\080\000\137\000\
\176\000\089\000\086\000\137\000\101\000\102\000\137\000\053\000\
\042\000\043\000\123\000\044\000\115\000\100\000\092\000\187\000\
\121\000\081\000\124\000\125\000\190\000\191\000\192\000\193\000\
\076\000\150\000\157\000\080\000\076\000\076\000\141\000\080\000\
\076\000\076\000\156\000\158\000\159\000\160\000\126\000\151\000\
\127\000\128\000\129\000\130\000\131\000\132\000\081\000\161\000\
\152\000\042\000\081\000\133\000\076\000\153\000\076\000\076\000\
\076\000\076\000\076\000\076\000\195\000\154\000\021\000\076\000\
\092\000\076\000\033\000\021\000\124\000\125\000\033\000\021\000\
\021\000\021\000\164\000\162\000\033\000\033\000\033\000\033\000\
\033\000\033\000\165\000\021\000\177\000\005\000\021\000\033\000\
\126\000\033\000\127\000\128\000\129\000\130\000\131\000\132\000\
\178\000\179\000\180\000\042\000\093\000\133\000\018\000\016\000\
\016\000\016\000\018\000\203\000\149\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\043\000\183\000\189\000\018\000\043\000\018\000\194\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\206\000\002\000\042\000\043\000\016\000\043\000\
\042\000\082\000\084\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\039\000\014\000\
\016\000\042\000\039\000\042\000\061\000\039\000\039\000\163\000\
\039\000\039\000\039\000\039\000\039\000\039\000\188\000\039\000\
\036\000\080\000\175\000\039\000\036\000\039\000\204\000\036\000\
\036\000\096\000\036\000\036\000\036\000\036\000\036\000\036\000\
\000\000\036\000\038\000\000\000\081\000\036\000\038\000\036\000\
\000\000\038\000\038\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\029\000\000\000\000\000\038\000\
\029\000\038\000\000\000\029\000\029\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\035\000\029\000\000\000\000\000\
\035\000\029\000\000\000\029\000\000\000\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\032\000\000\000\000\000\000\000\
\032\000\035\000\000\000\035\000\000\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\034\000\000\000\000\000\000\000\
\034\000\032\000\000\000\032\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\030\000\000\000\000\000\000\000\
\030\000\034\000\000\000\034\000\031\000\000\000\030\000\030\000\
\031\000\019\000\000\000\020\000\000\000\021\000\031\000\031\000\
\065\000\030\000\000\000\030\000\000\000\099\000\000\000\000\000\
\000\000\031\000\000\000\031\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\184\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\185\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\186\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\000\000\000\000\000\000\000\000\000\000\079\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\000\000\000\000\000\000\000\000\116\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\000\000\000\000\000\000\000\000\119\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\000\000\
\120\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\000\000\000\000\000\000\000\000\
\000\000\147\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\000\000\
\000\000\000\000\148\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\000\000\000\000\
\000\000\000\000\000\000\199\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\146\000\000\000\166\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\167\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\068\000\069\000\070\000\
\000\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\068\000\069\000\070\000\000\000\019\000\000\000\020\000\000\000\
\021\000\077\000\078\000\022\000"

let yycheck = "\039\000\
\000\000\041\000\059\000\024\000\133\000\002\001\092\000\004\001\
\001\000\006\001\009\001\011\001\009\001\010\001\057\000\149\000\
\059\000\002\001\009\001\004\001\009\001\006\001\043\000\044\000\
\009\001\010\001\023\000\002\001\036\001\004\001\164\000\006\001\
\011\001\010\001\009\001\056\000\036\001\166\000\015\001\010\001\
\037\000\038\000\012\001\040\000\015\001\007\001\008\001\009\001\
\045\001\048\001\047\001\048\000\092\000\139\000\051\000\052\000\
\021\001\009\001\035\001\012\001\000\000\011\001\047\001\028\001\
\035\001\035\001\012\001\153\000\012\001\090\000\045\001\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\035\001\080\000\046\001\012\001\083\000\084\000\
\001\001\035\001\003\001\035\001\005\001\009\001\011\001\018\000\
\009\001\012\001\011\001\139\000\009\001\017\001\018\001\016\001\
\027\000\102\000\010\001\020\001\035\001\012\001\036\001\184\000\
\185\000\186\000\154\000\188\000\189\000\030\001\031\001\032\001\
\035\001\001\001\013\001\003\001\012\001\005\001\012\001\043\001\
\044\001\009\001\203\000\011\001\048\001\206\000\050\001\048\001\
\049\001\194\000\051\001\033\001\020\001\012\001\010\001\034\001\
\184\000\185\000\186\000\033\001\188\000\189\000\030\001\031\001\
\032\001\150\000\151\000\152\000\016\001\154\000\015\001\199\000\
\157\000\012\001\033\001\203\000\011\001\015\001\206\000\015\001\
\048\001\049\001\009\001\051\001\009\001\030\001\013\001\172\000\
\035\001\034\001\017\001\018\001\177\000\178\000\179\000\180\000\
\009\001\011\001\010\001\015\001\013\001\014\001\009\001\015\001\
\017\001\018\001\014\001\019\001\020\001\021\001\037\001\011\001\
\039\001\040\001\041\001\042\001\043\001\044\001\034\001\031\001\
\011\001\048\001\034\001\050\001\037\001\011\001\039\001\040\001\
\041\001\042\001\043\001\044\001\009\001\011\001\010\001\048\001\
\013\001\050\001\012\001\015\001\017\001\018\001\016\001\019\001\
\020\001\021\001\011\001\035\001\022\001\023\001\024\001\025\001\
\026\001\027\001\012\001\031\001\010\001\009\001\034\001\033\001\
\037\001\035\001\039\001\040\001\041\001\042\001\043\001\044\001\
\010\001\010\001\010\001\048\001\034\001\050\001\012\001\007\001\
\008\001\009\001\016\001\038\001\011\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\012\001\012\001\012\001\033\001\016\001\035\001\012\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\012\001\000\000\012\001\033\001\046\001\035\001\
\016\001\012\001\012\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\012\001\015\001\
\009\000\033\001\016\001\035\001\014\001\019\001\020\001\139\000\
\022\001\023\001\024\001\025\001\026\001\027\001\012\001\029\001\
\012\001\015\001\154\000\033\001\016\001\035\001\199\000\019\001\
\020\001\058\000\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\012\001\255\255\034\001\033\001\016\001\035\001\
\255\255\019\001\020\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\012\001\255\255\255\255\033\001\
\016\001\035\001\255\255\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\012\001\029\001\255\255\255\255\
\016\001\033\001\255\255\035\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\012\001\255\255\255\255\255\255\
\016\001\033\001\255\255\035\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\012\001\255\255\255\255\255\255\
\016\001\033\001\255\255\035\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\012\001\255\255\255\255\255\255\
\016\001\033\001\255\255\035\001\012\001\255\255\022\001\023\001\
\016\001\002\001\255\255\004\001\255\255\006\001\022\001\023\001\
\009\001\033\001\255\255\035\001\255\255\012\001\255\255\255\255\
\255\255\033\001\255\255\035\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\035\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\035\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\035\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\035\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\016\001\255\255\033\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\019\001\020\001\021\001\255\255\002\001\255\255\004\001\255\255\
\006\001\028\001\029\001\009\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  CHAR\000\
  INTERNAL\000\
  EXTERNAL\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  VAR\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  HASH\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  CSTCHAR\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 46 "parser.mly"
                  ( Topdecs _1 )
# 506 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                        ( [] )
# 512 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 51 "parser.mly"
                        ( _1 :: _2 )
# 520 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 55 "parser.mly"
        ( GlobalDeclaration _1 )
# 527 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 56 "parser.mly"
                                                   ( Routine (Internal, _2, _4, _6) )
# 536 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 57 "parser.mly"
                                                   ( Routine (External, _2, _4, _6) )
# 545 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 58 "parser.mly"
                                                   ( Routine (Internal, _2, _4, Block _6) )
# 554 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 59 "parser.mly"
                                                   ( Routine (External, _2, _4, Block _6) )
# 563 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 60 "parser.mly"
                                                   ( Struct (_2, _4) )
# 571 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                        ( T_Int )
# 577 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                        ( T_Bool )
# 583 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                        ( T_Char )
# 589 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 67 "parser.mly"
                        ( T_Array _1 )
# 596 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                        ( T_Struct _1 )
# 603 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 72 "parser.mly"
                                ( Block _2 )
# 610 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 76 "parser.mly"
                                 ( [Statement (Expression (Call(_2, _4)))] )
# 618 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arguments) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 77 "parser.mly"
                                       ( (Statement (Expression (Call (_2, _4)))) :: _6 )
# 627 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 81 "parser.mly"
                                                  ( Reference _1 )
# 634 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 82 "parser.mly"
                                                  ( Value _1 )
# 641 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 83 "parser.mly"
                                                  ( _2 )
# 648 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                                                      ( VarRef _1 )
# 655 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 663 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 89 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 671 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                                                      ( Null )
# 677 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 94 "parser.mly"
              ( Bool _1 )
# 684 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 95 "parser.mly"
              ( Int _1 )
# 691 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 96 "parser.mly"
              ( Char _1 )
# 698 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 97 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 706 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 98 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 714 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 99 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 722 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 100 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 730 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 101 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 738 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 102 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 746 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 103 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 754 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 104 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 762 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 105 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 770 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 106 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 778 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 107 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 786 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 108 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 793 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 109 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 800 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 110 "parser.mly"
                                                          ( ArraySize _2 )
# 807 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 111 "parser.mly"
                                                          ( GetInput _2 )
# 814 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 112 "parser.mly"
                                                          ( Lookup _2 )
# 821 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 113 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 829 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 114 "parser.mly"
                                                          ( NewStruct (_2, _4) )
# 837 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 118 "parser.mly"
                                                     ( Assign (_1, _3) )
# 845 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 119 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 853 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 120 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 861 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 121 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 869 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 122 "parser.mly"
                                                     ( Assign (_1, Value(Unary_op("!", _4))) )
# 877 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 123 "parser.mly"
                                                ( Call (_1, _3) )
# 885 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
                                                ( Stop )
# 891 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                                                ( Halt )
# 897 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                                                ( Break )
# 903 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                                                ( Continue )
# 909 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 128 "parser.mly"
                                                ( Print _2 )
# 916 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                 ( [] )
# 922 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 133 "parser.mly"
                 ( _1 )
# 929 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 137 "parser.mly"
                                              ( [_1] )
# 936 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 138 "parser.mly"
                                              ( _1 :: _3 )
# 944 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                               ( [] )
# 950 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 143 "parser.mly"
                               ( _1 :: _2)
# 958 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 147 "parser.mly"
                                                             ( Statement _1 )
# 965 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 148 "parser.mly"
                                                             ( Declaration _1 )
# 972 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 152 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 980 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 153 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 988 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 154 "parser.mly"
                                                             ( AssignDeclaration (false, _3, _1, _5) )
# 997 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 155 "parser.mly"
                                                                   ( AssignDeclaration (true, _4, _1, _6) )
# 1006 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 156 "parser.mly"
                                                                   ( VarDeclaration (false, _1, _5) )
# 1014 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 157 "parser.mly"
                                                                   ( VarDeclaration (true, _1, _6) )
# 1022 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 158 "parser.mly"
                                                               ( VarDeclaration (false, _1, _4) )
# 1030 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 159 "parser.mly"
                                                               ( VarDeclaration (true, _1, _5) )
# 1038 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 163 "parser.mly"
                                                       ( Expression _1 )
# 1045 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 164 "parser.mly"
                                                       ( _1 )
# 1052 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 165 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1061 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 166 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1069 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 167 "parser.mly"
                                                             ( While (_3, _5) )
# 1077 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 168 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1085 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 169 "parser.mly"
                                                                                 ( Block([Declaration(_3); Statement(While(_4, Block([Statement(_8); Statement(Expression(_6));])));]) )
# 1095 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 170 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name)); 
      Statement(While(Value(Binary_op("<", Reference(VarRef var_name), Value _3)), 
        Block([
          Statement(_5); 
          Statement(Expression(Assign(VarRef(var_name), Value(Binary_op("+", Value(Int 1), Reference(VarRef var_name))))));
        ])
      ));
    ]) 
  )
# 1114 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 182 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, T_Int, limit_name, Value(Lookup(_3)))); 
      Declaration(TypeDeclaration(false, T_Int, count_name)); 
      Statement(While(Value(Binary_op("<", Reference(VarRef count_name), Reference(VarRef limit_name))), 
        Block([
          Statement(_5); 
          Statement(Expression(Assign(VarRef count_name, Value(Binary_op("+", Value(Int 1), Reference(VarRef count_name))))));
        ])
      ));
    ]) 
  )
# 1135 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
               ( [] )
# 1141 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 200 "parser.mly"
               ( _1 )
# 1148 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 204 "parser.mly"
                           ( [_1] )
# 1155 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 205 "parser.mly"
                           ( _1 :: _3 )
# 1163 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 209 "parser.mly"
                                    ( (true, _4, _1) )
# 1171 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 210 "parser.mly"
                                    ( (false, _3, _1) )
# 1179 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
