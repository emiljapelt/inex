type token =
  | CSTINT of (int)
  | INT
  | CSTBOOL of (bool)
  | BOOL
  | INTERNAL
  | EXTERNAL
  | NAME of (string)
  | ASSIGNMENT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRAKE
  | RBRAKE
  | STOP
  | HALT
  | PLUS
  | MINUS
  | TIMES
  | EQ
  | NEQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | LOGIC_AND
  | LOGIC_OR
  | PIPE
  | NOT
  | VALUE
  | COMMA
  | DOT
  | SEMI
  | COLON
  | EOF
  | IF
  | ELSE
  | WHILE
  | UNTIL
  | FOR
  | REPEAT
  | BREAK
  | CONTINUE
  | LOCKED
  | STRUCT
  | VAR
  | NULL
  | NEW
  | PRINT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Absyn
  open ProgramRep
  open Exceptions

  type var_name_generator = { mutable next : int }
  let vg = ( {next = 0;} )
  let new_var () =
    let number = vg.next in
    let () = vg.next <- vg.next+1 in
    Int.to_string number
# 66 "parser.ml"
let yytransl_const = [|
  258 (* INT *);
  260 (* BOOL *);
  261 (* INTERNAL *);
  262 (* EXTERNAL *);
  264 (* ASSIGNMENT *);
  265 (* LPAR *);
  266 (* RPAR *);
  267 (* LBRACE *);
  268 (* RBRACE *);
  269 (* LBRAKE *);
  270 (* RBRAKE *);
  271 (* STOP *);
  272 (* HALT *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* GT *);
  280 (* LTEQ *);
  281 (* GTEQ *);
  282 (* LOGIC_AND *);
  283 (* LOGIC_OR *);
  284 (* PIPE *);
  285 (* NOT *);
  286 (* VALUE *);
  287 (* COMMA *);
  288 (* DOT *);
  289 (* SEMI *);
  290 (* COLON *);
    0 (* EOF *);
  291 (* IF *);
  292 (* ELSE *);
  293 (* WHILE *);
  294 (* UNTIL *);
  295 (* FOR *);
  296 (* REPEAT *);
  297 (* BREAK *);
  298 (* CONTINUE *);
  299 (* LOCKED *);
  300 (* STRUCT *);
  301 (* VAR *);
  302 (* NULL *);
  303 (* NEW *);
  304 (* PRINT *);
    0|]

let yytransl_block = [|
  257 (* CSTINT *);
  259 (* CSTBOOL *);
  263 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\008\000\008\000\008\000\008\000\006\000\007\000\007\000\
\011\000\011\000\011\000\012\000\012\000\012\000\012\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\010\000\010\000\015\000\
\015\000\009\000\009\000\016\000\016\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\005\000\005\000\
\018\000\018\000\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\006\000\006\000\006\000\006\000\
\006\000\001\000\001\000\003\000\001\000\003\000\005\000\006\000\
\001\000\001\000\003\000\001\000\003\000\004\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\002\000\
\005\000\005\000\003\000\004\000\004\000\004\000\004\000\004\000\
\001\000\001\000\001\000\001\000\002\000\000\000\001\000\001\000\
\003\000\000\000\002\000\001\000\001\000\004\000\005\000\006\000\
\007\000\006\000\007\000\005\000\006\000\002\000\001\000\007\000\
\005\000\005\000\005\000\008\000\005\000\005\000\000\000\001\000\
\001\000\003\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\001\000\003\000\
\000\000\000\000\010\000\011\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\000\000\000\000\025\000\
\024\000\020\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\005\000\007\000\082\000\006\000\008\000\019\000\039\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\021\000\069\000\
\000\000\000\000\066\000\064\000\009\000\000\000\000\000\049\000\
\050\000\000\000\000\000\000\000\000\000\000\000\051\000\052\000\
\000\000\061\000\071\000\000\000\000\000\000\000\000\000\060\000\
\000\000\000\000\000\000\055\000\000\000\022\000\067\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\070\000\059\000\000\000\
\042\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\075\000\000\000\078\000\077\000\016\000\000\000\000\000\
\072\000\000\000\076\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\028\000\131\000\091\000\025\000\
\132\000\138\000\139\000\043\000\044\000\134\000\140\000\135\000\
\136\000\029\000\030\000"

let yysindex = "\023\000\
\038\255\000\000\034\255\054\255\057\255\085\255\000\000\097\000\
\038\255\000\000\102\255\105\255\003\255\110\255\000\000\000\000\
\101\255\101\255\000\000\000\000\000\000\166\255\012\255\115\255\
\004\255\101\255\107\255\132\255\000\000\122\255\151\255\000\000\
\000\000\000\000\166\255\166\255\001\255\166\255\001\255\000\000\
\125\255\255\000\022\255\000\000\166\255\158\255\025\255\166\255\
\166\255\154\255\000\000\164\255\021\255\083\255\101\255\083\255\
\190\000\137\255\127\255\000\000\022\255\167\255\169\255\166\255\
\166\255\166\255\166\255\166\255\166\255\166\255\166\255\166\255\
\166\255\166\255\000\000\166\255\181\255\016\001\166\255\166\255\
\000\000\033\001\050\001\000\000\159\255\233\255\178\255\204\255\
\192\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\166\255\092\255\137\255\137\255\000\000\191\001\191\001\191\255\
\191\255\191\255\191\255\000\000\137\255\133\001\000\000\000\000\
\067\001\084\001\000\000\000\000\000\000\178\255\253\254\000\000\
\000\000\184\255\189\255\194\255\205\255\207\255\000\000\000\000\
\166\255\000\000\000\000\188\255\099\255\193\255\204\255\000\000\
\212\255\213\255\118\001\000\000\147\001\000\000\000\000\000\000\
\166\255\166\255\166\255\166\255\217\255\166\255\158\001\000\000\
\166\255\214\255\225\255\226\255\246\255\000\000\000\000\166\255\
\000\000\166\255\000\000\238\255\208\000\226\000\244\000\166\255\
\158\001\077\255\247\255\158\001\166\255\166\255\166\255\166\255\
\248\255\000\000\000\000\240\255\240\255\240\255\101\001\240\255\
\240\255\158\001\158\001\158\001\158\001\229\255\002\000\230\255\
\000\000\000\000\014\255\000\000\000\000\000\000\240\255\255\255\
\000\000\240\255\000\000"

let yyrindex = "\000\000\
\012\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\037\000\015\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\093\255\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\132\255\000\000\073\000\091\000\000\000\150\255\239\255\125\000\
\141\000\157\000\173\000\000\000\109\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\095\255\117\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\151\255\000\000\000\000\000\000\000\000\000\000\
\132\255\000\000\000\000\000\000\000\000\000\000\255\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\169\001\180\001\017\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\255\053\255\056\255\071\255\001\000\117\255\190\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\006\001\000\000\186\255\070\000\215\255\203\255\237\255\
\150\000\196\255\004\000\219\255\126\000\094\000\140\000\000\000\
\005\000\250\000\000\000"

let yytablesize = 730
let yytable = "\059\000\
\015\000\061\000\094\000\047\000\019\000\145\000\020\000\034\000\
\053\000\021\000\022\000\049\000\090\000\019\000\093\000\020\000\
\050\000\130\000\021\000\045\000\191\000\063\000\019\000\001\000\
\020\000\042\000\043\000\021\000\120\000\121\000\013\000\053\000\
\080\000\087\000\076\000\044\000\051\000\050\000\057\000\058\000\
\011\000\060\000\003\000\004\000\005\000\023\000\040\000\024\000\
\078\000\043\000\133\000\082\000\083\000\077\000\127\000\128\000\
\046\000\081\000\044\000\040\000\012\000\129\000\045\000\086\000\
\130\000\046\000\118\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\168\000\110\000\
\047\000\006\000\113\000\114\000\164\000\045\000\184\000\031\000\
\046\000\076\000\013\000\014\000\032\000\088\000\033\000\052\000\
\015\000\133\000\034\000\177\000\035\000\141\000\084\000\047\000\
\083\000\084\000\153\000\027\000\077\000\036\000\017\000\076\000\
\170\000\018\000\089\000\154\000\155\000\156\000\026\000\037\000\
\038\000\039\000\048\000\084\000\020\000\083\000\019\000\157\000\
\020\000\020\000\077\000\062\000\151\000\020\000\020\000\020\000\
\198\000\040\000\041\000\076\000\053\000\054\000\133\000\133\000\
\133\000\020\000\133\000\133\000\020\000\165\000\166\000\167\000\
\055\000\169\000\096\000\066\000\172\000\133\000\077\000\028\000\
\056\000\133\000\073\000\028\000\133\000\079\000\032\000\084\000\
\033\000\028\000\028\000\183\000\034\000\085\000\035\000\097\000\
\186\000\187\000\188\000\189\000\028\000\098\000\028\000\036\000\
\192\000\193\000\194\000\111\000\196\000\197\000\050\000\117\000\
\146\000\037\000\038\000\039\000\073\000\147\000\137\000\152\000\
\073\000\073\000\148\000\201\000\073\000\073\000\203\000\064\000\
\065\000\066\000\119\000\040\000\041\000\149\000\088\000\150\000\
\073\000\074\000\120\000\121\000\160\000\173\000\161\000\005\000\
\073\000\158\000\073\000\073\000\073\000\073\000\073\000\073\000\
\174\000\175\000\019\000\073\000\020\000\073\000\122\000\021\000\
\123\000\124\000\125\000\126\000\127\000\128\000\191\000\179\000\
\029\000\040\000\088\000\129\000\029\000\176\000\120\000\121\000\
\185\000\190\000\029\000\029\000\089\000\015\000\015\000\015\000\
\202\000\199\000\145\000\002\000\079\000\029\000\016\000\029\000\
\081\000\058\000\122\000\171\000\123\000\124\000\125\000\126\000\
\127\000\128\000\017\000\013\000\159\000\040\000\017\000\129\000\
\200\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\015\000\178\000\040\000\017\000\
\092\000\017\000\040\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\037\000\000\000\000\000\040\000\037\000\040\000\000\000\037\000\
\037\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\037\000\034\000\000\000\000\000\037\000\034\000\037\000\
\000\000\034\000\034\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\034\000\036\000\000\000\000\000\034\000\
\036\000\034\000\000\000\036\000\036\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\036\000\027\000\000\000\
\000\000\036\000\027\000\036\000\000\000\027\000\027\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\031\000\027\000\
\000\000\000\000\031\000\027\000\000\000\027\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\033\000\000\000\
\000\000\000\000\033\000\031\000\000\000\031\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\030\000\000\000\
\000\000\000\000\030\000\033\000\000\000\033\000\000\000\000\000\
\030\000\030\000\030\000\030\000\030\000\030\000\032\000\000\000\
\000\000\000\000\032\000\030\000\000\000\030\000\000\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\000\000\095\000\
\000\000\000\000\000\000\032\000\000\000\032\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\180\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\181\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\182\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\000\000\000\000\000\000\075\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\000\000\000\000\000\000\000\000\000\000\
\112\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\000\000\000\000\
\000\000\115\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\000\000\000\000\000\000\
\000\000\000\000\116\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\000\000\000\000\000\000\143\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\000\000\
\000\000\000\000\000\000\000\000\144\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\000\000\000\000\000\000\195\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\142\000\000\000\162\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\163\000\000\000\000\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\064\000\
\065\000\066\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\074\000"

let yycheck = "\037\000\
\000\000\039\000\056\000\023\000\002\001\009\001\004\001\007\001\
\010\001\007\001\008\001\008\001\054\000\002\001\056\000\004\001\
\013\001\088\000\007\001\008\001\007\001\041\000\002\001\001\000\
\004\001\022\000\010\001\007\001\015\001\016\001\034\001\033\001\
\008\001\053\000\013\001\010\001\033\001\013\001\035\000\036\000\
\007\001\038\000\005\001\006\001\007\001\043\001\046\001\045\001\
\045\000\033\001\088\000\048\000\049\000\032\001\041\001\042\001\
\045\001\033\001\033\001\046\001\007\001\048\001\010\001\043\001\
\135\000\010\001\086\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\149\000\076\000\
\010\001\044\001\079\000\080\000\145\000\033\001\010\001\018\000\
\033\001\013\001\034\001\007\001\001\001\011\001\003\001\026\000\
\000\000\135\000\007\001\160\000\009\001\098\000\010\001\033\001\
\010\001\014\001\008\001\007\001\032\001\018\001\009\001\013\001\
\150\000\009\001\032\001\017\001\018\001\019\001\009\001\028\001\
\029\001\030\001\008\001\031\001\008\001\031\001\002\001\029\001\
\004\001\013\001\032\001\007\001\129\000\017\001\018\001\019\001\
\190\000\046\001\047\001\013\001\034\001\010\001\180\000\181\000\
\182\000\029\001\184\000\185\000\032\001\146\000\147\000\148\000\
\031\001\150\000\028\001\019\001\153\000\195\000\032\001\010\001\
\010\001\199\000\026\001\014\001\202\000\008\001\001\001\014\001\
\003\001\020\001\021\001\168\000\007\001\010\001\009\001\009\001\
\173\000\174\000\175\000\176\000\031\001\013\001\033\001\018\001\
\180\000\181\000\182\000\007\001\184\000\185\000\013\001\033\001\
\009\001\028\001\029\001\030\001\007\001\009\001\007\001\012\001\
\011\001\012\001\009\001\199\000\015\001\016\001\202\000\017\001\
\018\001\019\001\007\001\046\001\047\001\009\001\011\001\009\001\
\026\001\027\001\015\001\016\001\009\001\008\001\010\001\007\001\
\035\001\033\001\037\001\038\001\039\001\040\001\041\001\042\001\
\008\001\008\001\002\001\046\001\004\001\048\001\035\001\007\001\
\037\001\038\001\039\001\040\001\041\001\042\001\007\001\010\001\
\010\001\046\001\011\001\048\001\014\001\008\001\015\001\016\001\
\010\001\010\001\020\001\021\001\032\001\005\001\006\001\007\001\
\010\001\036\001\009\001\000\000\010\001\031\001\009\000\033\001\
\010\001\012\001\035\001\150\000\037\001\038\001\039\001\040\001\
\041\001\042\001\010\001\013\001\135\000\046\001\014\001\048\001\
\195\000\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\044\001\162\000\010\001\031\001\
\055\000\033\001\014\001\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\010\001\255\255\255\255\031\001\014\001\033\001\255\255\017\001\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\027\001\010\001\255\255\255\255\031\001\014\001\033\001\
\255\255\017\001\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\010\001\255\255\255\255\031\001\
\014\001\033\001\255\255\017\001\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\010\001\255\255\
\255\255\031\001\014\001\033\001\255\255\017\001\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\027\001\
\255\255\255\255\014\001\031\001\255\255\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\255\255\
\255\255\255\255\014\001\031\001\255\255\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\255\255\
\255\255\255\255\014\001\031\001\255\255\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\255\255\
\255\255\255\255\014\001\031\001\255\255\033\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\010\001\
\255\255\255\255\255\255\031\001\255\255\033\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\014\001\255\255\031\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001"

let yynames_const = "\
  INT\000\
  BOOL\000\
  INTERNAL\000\
  EXTERNAL\000\
  ASSIGNMENT\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  LBRAKE\000\
  RBRAKE\000\
  STOP\000\
  HALT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  LOGIC_AND\000\
  LOGIC_OR\000\
  PIPE\000\
  NOT\000\
  VALUE\000\
  COMMA\000\
  DOT\000\
  SEMI\000\
  COLON\000\
  EOF\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  UNTIL\000\
  FOR\000\
  REPEAT\000\
  BREAK\000\
  CONTINUE\000\
  LOCKED\000\
  STRUCT\000\
  VAR\000\
  NULL\000\
  NEW\000\
  PRINT\000\
  "

let yynames_block = "\
  CSTINT\000\
  CSTBOOL\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdecs) in
    Obj.repr(
# 43 "parser.mly"
                  ( Topdecs _1 )
# 493 "parser.ml"
               : Absyn.topdecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                        ( [] )
# 499 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'topdec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'topdecs) in
    Obj.repr(
# 48 "parser.mly"
                        ( _1 :: _2 )
# 507 "parser.ml"
               : 'topdecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 52 "parser.mly"
        ( GlobalDeclaration _1 )
# 514 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 53 "parser.mly"
                                                   ( Routine (Internal, _2, _4, _6) )
# 523 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 54 "parser.mly"
                                                   ( Routine (External, _2, _4, _6) )
# 532 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 55 "parser.mly"
                                                   ( Routine (Internal, _2, _4, Block _6) )
# 541 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 56 "parser.mly"
                                                   ( Routine (External, _2, _4, Block _6) )
# 550 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 57 "parser.mly"
                                                   ( Struct (_2, _4) )
# 558 "parser.ml"
               : 'topdec))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                        ( T_Int )
# 564 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                        ( T_Bool )
# 570 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 63 "parser.mly"
                        ( T_Array _1 )
# 577 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                        ( T_Struct _1 )
# 584 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDecSeq) in
    Obj.repr(
# 68 "parser.mly"
                                ( Block _2 )
# 591 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 72 "parser.mly"
                                 ( [Statement (Expression (Call(_2, _4)))] )
# 599 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arguments) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chain) in
    Obj.repr(
# 73 "parser.mly"
                                       ( (Statement (Expression (Call (_2, _4)))) :: _6 )
# 608 "parser.ml"
               : 'chain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 77 "parser.mly"
                                                  ( Reference _1 )
# 615 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 78 "parser.mly"
                                                  ( Value _1 )
# 622 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 79 "parser.mly"
                                                  ( _2 )
# 629 "parser.ml"
               : 'assignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                                                      ( VarRef _1 )
# 636 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                                                      ( StructRef (_1, _3) )
# 644 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 85 "parser.mly"
                                                      ( ArrayRef (_1, _3) )
# 652 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                                                      ( Null )
# 658 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 90 "parser.mly"
              ( Bool _1 )
# 665 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "parser.mly"
              ( Int _1 )
# 672 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 92 "parser.mly"
                                                                ( Binary_op ("&&", _1, _3) )
# 680 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 93 "parser.mly"
                                                                ( Binary_op ("||", _1, _3) )
# 688 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 94 "parser.mly"
                                                          ( Binary_op ("=", _1, _3) )
# 696 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 95 "parser.mly"
                                                          ( Binary_op ("!=", _1, _3) )
# 704 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 96 "parser.mly"
                                                          ( Binary_op ("<=", _1, _3) )
# 712 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 97 "parser.mly"
                                                          ( Binary_op ("<", _1, _3) )
# 720 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 98 "parser.mly"
                                                          ( Binary_op (">=", _1, _3) )
# 728 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 99 "parser.mly"
                                                          ( Binary_op (">", _1, _3) )
# 736 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 100 "parser.mly"
                                                          ( Binary_op ("+", _1, _3) )
# 744 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 101 "parser.mly"
                                                          ( Binary_op ("*", _1, _3) )
# 752 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 102 "parser.mly"
                                                          ( Binary_op ("-", _1, _3) )
# 760 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 103 "parser.mly"
                                                          ( Binary_op ("-", Value (Int 0), _2) )
# 767 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 104 "parser.mly"
                                                          ( Unary_op ("!", _2) )
# 774 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    Obj.repr(
# 105 "parser.mly"
                                                          ( ArraySize _2 )
# 781 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 106 "parser.mly"
                                                          ( Lookup _2 )
# 788 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 107 "parser.mly"
                                                          ( NewArray (_2, _4) )
# 796 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 108 "parser.mly"
                                                          ( NewStruct (_2, _4) )
# 804 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 112 "parser.mly"
                                                     ( Assign (_1, _3) )
# 812 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 113 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("+", Reference _1, _4))) )
# 820 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 114 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("-", Reference _1, _4))) )
# 828 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 115 "parser.mly"
                                                     ( Assign (_1, Value(Binary_op("*", Reference _1, _4))) )
# 836 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 116 "parser.mly"
                                                     ( Assign (_1, Value(Unary_op("!", _4))) )
# 844 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 117 "parser.mly"
                                                ( Call (_1, _3) )
# 852 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                                                ( Stop )
# 858 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                                                ( Halt )
# 864 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                                                ( Break )
# 870 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                                                ( Continue )
# 876 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 122 "parser.mly"
                                                ( Print _2 )
# 883 "parser.ml"
               : 'unassignable_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                 ( [] )
# 889 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 127 "parser.mly"
                 ( _1 )
# 896 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable_expression) in
    Obj.repr(
# 131 "parser.mly"
                                              ( [_1] )
# 903 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments1) in
    Obj.repr(
# 132 "parser.mly"
                                              ( _1 :: _3 )
# 911 "parser.ml"
               : 'arguments1))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                               ( [] )
# 917 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtOrDec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmtOrDecSeq) in
    Obj.repr(
# 137 "parser.mly"
                               ( _1 :: _2)
# 925 "parser.ml"
               : 'stmtOrDecSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 141 "parser.mly"
                                                             ( Statement _1 )
# 932 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 142 "parser.mly"
                                                             ( Declaration _1 )
# 939 "parser.ml"
               : 'stmtOrDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 146 "parser.mly"
                                                             ( TypeDeclaration (false, _3, _1) )
# 947 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 147 "parser.mly"
                                                             ( TypeDeclaration (true, _4, _1) )
# 955 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 148 "parser.mly"
                                                             ( AssignDeclaration (false, _3, _1, _5) )
# 964 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 149 "parser.mly"
                                                                   ( AssignDeclaration (true, _4, _1, _6) )
# 973 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 150 "parser.mly"
                                                                   ( VarDeclaration (false, _1, _5) )
# 981 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 151 "parser.mly"
                                                                   ( VarDeclaration (true, _1, _6) )
# 989 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 152 "parser.mly"
                                                               ( VarDeclaration (false, _1, _4) )
# 997 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'assignable_expression) in
    Obj.repr(
# 153 "parser.mly"
                                                               ( VarDeclaration (true, _1, _5) )
# 1005 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unassignable_expression) in
    Obj.repr(
# 157 "parser.mly"
                                                       ( Expression _1 )
# 1012 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 158 "parser.mly"
                                                       ( _1 )
# 1019 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 159 "parser.mly"
                                                             ( If (_3, _5, _7) )
# 1028 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 160 "parser.mly"
                                                             ( If (_3, _5, Block []) )
# 1036 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 161 "parser.mly"
                                                             ( While (_3, _5) )
# 1044 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'assignable_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 162 "parser.mly"
                                                             ( While (Value (Unary_op("!", _3)), _5) )
# 1052 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'assignable_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'unassignable_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 163 "parser.mly"
                                                                                 ( Block([Declaration(_3); Statement(While(_4, Block([Statement(_8); Statement(Expression(_6));])));]) )
# 1062 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 164 "parser.mly"
                                ( 
    let var_name = new_var () in
    Block([
      Declaration(TypeDeclaration(false, T_Int, var_name)); 
      Statement(While(Value(Binary_op("<", Reference(VarRef var_name), Value _3)), 
        Block([
          Statement(_5); 
          Statement(Expression(Assign(VarRef(var_name), Value(Binary_op("+", Value(Int 1), Reference(VarRef var_name))))));
        ])
      ));
    ]) 
  )
# 1081 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 176 "parser.mly"
                                    ( 
    let count_name = new_var () in
    let limit_name = new_var () in
    Block([
      Declaration(AssignDeclaration(false, T_Int, limit_name, Value(Lookup(_3)))); 
      Declaration(TypeDeclaration(false, T_Int, count_name)); 
      Statement(While(Value(Binary_op("<", Reference(VarRef count_name), Reference(VarRef limit_name))), 
        Block([
          Statement(_5); 
          Statement(Expression(Assign(VarRef count_name, Value(Binary_op("+", Value(Int 1), Reference(VarRef count_name))))));
        ])
      ));
    ]) 
  )
# 1102 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "parser.mly"
               ( [] )
# 1108 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 194 "parser.mly"
               ( _1 )
# 1115 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 198 "parser.mly"
                           ( [_1] )
# 1122 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params1) in
    Obj.repr(
# 199 "parser.mly"
                           ( _1 :: _3 )
# 1130 "parser.ml"
               : 'params1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 203 "parser.mly"
                                    ( (true, _4, _1) )
# 1138 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 204 "parser.mly"
                                    ( (false, _3, _1) )
# 1146 "parser.ml"
               : 'param))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.topdecs)
